{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","models/app/settingModel.js","models/app/settingCollection.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","models/app/mergeTagLookupCollection.js","views/app/drawer/mergeTag.js","views/app/drawer/mergeTagList.js","views/app/drawer/mergeTagGroup.js","views/app/drawer/mergeTagGroupList.js","views/app/drawer/mergeTagFilter.js","views/app/drawer/mergeTagBox.js","controllers/app/mergeTagBox.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","controllers/app/getNewSettingGroupCollection.js","controllers/app/settingMedia.js","models/app/typeModel.js","models/app/typeCollection.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/emailFromSetting.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/actions/deleteFieldListener.js","controllers/actions/collectPaymentFields.js","controllers/actions/collectPaymentCalculations.js","controllers/actions/collectPaymentFixed.js","controllers/actions/collectPayment.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/fieldItem.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","click a","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","icon","document","createElement","classList","add","outerHTML","renderClasses","classes","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","click .publish","click .viewChanges","clickPublish","clickViewChanges","changeModel","effect","times","click .nf-mobile-menu","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","click #nf-logo","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formData","formSettings","formTitleView","currentDomain","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","viewHeight","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","click .nf-publish","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","drawer","contentView","headerView","footerView","empty","click .nf-toggle-drawer","clickToggleDrawer","clickTag","active","mergeTagItemView","updateFields","fieldCollection","set","Backbone","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","calcMergeTagGroup","useMergeTags","_","each","remove","include","models","sectionModel","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTags","mergeTagsClone","clone","click .nf-open-drawer","click .nf-change-domain","click .nf-close-drawer","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","width","keys","key","getPreventClose","clearFilter","blurFilter","keyup .nf-filter","input .nf-filter","focus input","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","click .dashicons-dismiss","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","zIndex","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","click .nf-item","keydown .nf-item","mousedown .nf-item","clickFieldType","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","renderType","templateHTML","savedField","htmlFragments","createRange","createContextualFragment","appendChild","innerHTML","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","click .toggle","clickToggleGroup","renderLabel","label","renderArrowDir","display","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","renderTypeNicename","domainID","scroll","clickAddAction","open","image","section","renderStyle","actionTypeButtonView","renderNicename","slug","actionTypeCollectionView","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","filteredInstalled","filteredAvailable","click .undoSingle","undoSingle","viewChangesItem","click .undoChanges","clickUndoChanges","settingErrorView","error","renderError","renderWarning","refresh","labelText","updateIcon","updateLink","labelWrapper","createTextNode","drawerOpened","drawerClosed","setting","unescape","silent","onBeforeRender","escape","next","jBox","maxWidth","theme","closeOnClick","mask","input","autoNumeric","aSep","thousandsSeparator","aDec","decimalPoint","currency","currencySymbol","currencySymbols","aSign","text","format","console","log","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","helpText","helpTextContainer","helpIcon","helpIconLink","helpTextWrapper","setAttribute","renderMergeTags","hide_merge_tags","change .setting","keyup .setting","click .setting","click .extra","changeSetting","keyUpSetting","clickSetting","itemSettingView","formName","formSubmit","titleSettingModel","addSubmitSettingModel","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","typeModel","view","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","cancel","scrollSensitivity","item","dropping","hide","renderAddButton","button","click .nf-button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","unset","title","x","y","outside","onCreated","setContent","attach","displayName","saved","renderSavedStar","star","actionCollection","mouseover .nf-item-control","click .nf-edit-settings","singletap .nf-item-control","click .nf-item-delete","click .nf-item-duplicate","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","change input","click","maybeClickEdit","changeToggle","renderToggle","settingName","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectType","objectDomain","order","fieldType","parentType","updateFieldKey","changedAttributes","keyModel","fieldModel","parseInt","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","nfi18n","domainFormFields","Esc","Ctrl+Shift+n","Ctrl+Shift+a","Ctrl+Shift+s","Alt+Ctrl+t","up","down","Shift+return","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","Ctrl+Shift+f","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","stringify","fields","field","parent_id","deleted_fields","actions","deleted_actions","autoClose","form","exception","fail","xhr","status","alert","pluck","isNumeric","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","appDomains","preview","publish","viewChanges","changeCollection","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","undoAll","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","reExp","toString","newUrl","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","attr","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","cloneModelDeep","attributes","clonedCollection","newModel","getSettingChildView","after","object","maybePreventUI","updateKey","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","clickDuplicate","tmpID","tagSectionCollection","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","updateID","replaceFieldKey","initMergeTags","mergeTagsView","jBoxes","closeOnEsc","maxHeight","onOpen","prev","onClose","tagModel","currentValue","currentPos","caret","newPos","substr","summernote","calcTag","getFieldKeyFormatCalc","fieldID","optionModel","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","targetTag","oldTag","fieldMergeTag","newKey","oldKey","_previousAttributes","oldVal","oldCalcKey","newCalcKey","re","RegExp","newVal","insertTag","mergeTagView","sectionFilter","searchFilter","filter","child","term","toLowerCase","removeActive","onClick","updateTags","setActive","siblings","mergeTagGroupView","keyup input","updateFilter","event","firstFilteredTag","sections","MergeTagModel","MergeTagLookupCollection","MergeTagView","MergeTagListView","MergeTagGroupView","MergeTagGroupListView","MergeTagFilterView","MergeTagBoxLayout","old","mergeTagsButtonClick","afterAppStart","beforeRenderSetting","beforeDrawerClose","bind","selector","focusCallback","keyupCallback","closest","Radio","layout","tagCollection","mergeTagListView","mergeTagGroupListView","getRegion","rteEditor","posY","outerHeight","tagBoxY","windowHeight","innerHeight","tagBoxHeight","boxHeight","repeaterRow","scrollLeft","posX","$input","hasClass","str","caretPos","patt","match","exec","string","childNode","childNodes","node","nodeValue","range","sel","getSelection","setStart","err","collapse","removeAllRanges","addRange","$this","$inputSetting","autocomplete","$overlayElement","dataID","so","mergetags","mergetag","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","linkButton","mediaButton","toolbar","codemirror","lineNumbers","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","onFocus","onKeydown","onKeyup","linkMenu","replaceWith","class","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","textEl","urlEl","isNewWindowEl","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","contains","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","actionModel","lastChanged","oldValue","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","form_id","isNaN","editFormLinkText","editFormLink","editFormListItem","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","mobileDefaults","desktopDefaults","openNotice","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","SettingCollection","settingGroupModel","SettingGroupCollection","getNewSettingGroupCollection","option","typeSectionModel","TypeCollection","SectionCollection","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","style","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","search","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","hiddenFields","found","alias","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","insertedAt","fieldWidth","dragFieldID","dragModel","oldPos","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","max_options","changeErrors","size","errorsFound","opt","listOptionModel","addOption","renderErrors","ErrorView","columns","parentView","hasErrors","click .nf-delete","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","findByIndex","getColumns","renderFieldSelect","initialOption","select","emptyContainer","selected","renderOptions","column","optionNode","listOptionView","listEmptyView","listOptionCollection","optionCollection","maybeHideNew","handle","forcePlaceholderSize","importLink","closeButton","clickImport","renderHeaders","beforeColumns","afterColumns","col","headerText","headerContainer","renderFieldsetClasses","currency_symbol","click .nf-add-new","limit","clickAddOption","textarea","trimLeft","trimRight","lines","isArray","line","row","slugify","separator","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","optionView","triggerDataModel","modelData","new","default","newOrder","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","insertField","productFields","getProductFields","addMask","newFieldKey","updateLabel","d","Date","valueOf","setError","keyExists","testKey","startWiggle","stopWiggle","initWiggle","ClassyWiggle","degrees","delay","updateField","modified","modelClone","fieldData","created_at","formID","newType","newTypeDefaults","settingDefaults","typeCollection","addDatepicker","pikadayResponsive","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","updateFromAddress","isValidEmail","home_url_host","errorInvalidEmailFromAddress","email","dropActionType","type_slug","actionTypeModel","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","group","registerListener","maybeUpdateSettings","newObject","isString","isObject","mapObject","filteredCollection","every","getFields","field_key","returnFields","sortBy","calcModels","calcs","getCalcs","returnCalcs","isEmpty","initCollectPayment","maybeClearTotal","maybeUpdateTotal","maybeError","oldName","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkDec","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calculations","targetCalc","selfRef","futureCalc","dec","errorNonIntDec","checked","Math","abs","nonIntDec","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ItemControls","MergeTags","MergeTagsBox","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","SettingMedia","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionEmailFromSetting","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","ActionDeleteFieldListener","ActionCollectPaymentFields","ActionCollectPaymentCalculations","ActionCollectPaymentFixed","ActionCollectPayment","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","doingShortcut","touch","renderRequired","required","getFieldID","renderIcon","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","Application","Renderer","onStart","evaluate","interpolate","variable"],"mappings":"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,sCACA,+BACA,gCACA,+CACA,+BAIA,2BACA,mCACA,iCACA,6BACA,qCACA,iCACA,8BACA,0BACA,iCACA,gCACA,mCACA,qCACA,+BACA,mCACA,mCACA,mCACA,yBACA,6BACA,4BACA,iCACA,qCACA,sCAKA,4BACA,2BACA,qCACA,iCACA,uCACA,qCACA,+BACA,gCACA,kCACA,qCACA,0CACA,2CACA,iDACA,0CACA,qCAKA,6BACA,4BACA,oCACA,kCACA,iCACA,qCAEA,SAIA80C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAKAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAqHA,MAlHAz0C,YAAA5B,OAAA8B,QACAG,WAAA,WAIA,GAAAmxC,GACA,GAAAC,GACA,GAAAvB,GACA,GAAAf,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAE,GACA,GAAAG,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAG,GACA,GAAAC,GACA,GAAAC,GACA,GAAAK,GACA,GAAAI,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAW,GACA,GAAAV,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAA9B,GACA,GAAAiC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GAQA,GAAArB,GACA,GAAA+B,GAEA,GAAAR,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAA9B,GACA,GAAAE,GACA,GAAAH,GACA,GAAAkC,GACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IAIA,GAAAU,IACA,GAAAC,IACA,GAAAE,IACA,GAAAE,IACA,GAAAd,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAC,IACA,GAAAG,IACA,GAAAE,IAKA,GAAAE,IACA,GAAAE,IACA,GAAAG,IACA,GAAAJ,IACA,GAAAE,IACA,GAAAC,IAMA,GAAAjF,GACA,GAAA+C,GACA,GAAA5C,GACA,GAAAiB,GACA,GAAAC,GACA,GAAAC,QAOAx2C,EAAA,0BAAA,0BAAA,SAAAolB,GC3KA,MAhKAzf,YAAAmE,WAAAjE,QACAC,QAAA,MACAC,SAAA,8BACAs0C,eAAA,EAEAtwC,SACAsb,aAAA,qBAGArf,WAAA,WACAC,KAAAK,MAAAC,GAAA,oBAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,eAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,kBAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,YAAAN,KAAAI,OAAAJ,OAGAuG,gBAAA,WACAvG,KAAAK,MAAAmG,IAAA,oBAAAxG,KAAAI,QACAJ,KAAAK,MAAAmG,IAAA,eAAAxG,KAAAI,QACAJ,KAAAK,MAAAmG,IAAA,kBAAAxG,KAAAI,QACAJ,KAAAK,MAAAmG,IAAA,YAAAxG,KAAAI,SAGAG,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,KAEAR,KAAAof,aAAAjb,KAAA,GAAAgb;8BAAA9e,MAAAL,KAAAK,SACAZ,OAAAO,KAAAuC,IAAA+P,mBAEApS,EAAAC,QAAA,OAAAwB,QAAA,cACAlC,OAAAO,KAAAuC,IAAAjC,GAAA,UAAA,SAAA9B,EAAA61C,GACA50C,OAAAjB,EAAA6P,QAAA2kB,SAAA,sBACAvzB,OAAAO,MAAAyM,SAAA,oCACAhN,OAAAO,MAAA0oC,aAAA,SAAAC,SAAA,MAAA,IAAA,MAAA,IAAA,OAAA,KAAA,OAAA,KAAAC,MAAA,SAMA5nC,gBAAA,WACA,OACAS,cAAA,WACA,GAAAC,GAAA,eAIA,OAHA1B,MAAAmgB,aACAze,GAAA,WAEAA,GAEA4yC,eAAA,WACA,MAAA,IAAAt0C,KAAAu0C,SACA,kCAEA,IAGAC,WAAA,WACA,MAAA/0C,QAAA2mB,UAAApmB,KAAAtB,IACA,SAAAsB,KAAAtB,GAEAsB,KAAAtB,IAGA+1C,WAAA,WACA,GAAAzhC,GAAA7R,CAOA,OALA6R,GAAA9S,EAAAC,QAAA,UAAAwB,QAAA,WAAA3B,KAAAgT,MAEA7R,EAAAC,SAAAC,cAAA,QACAF,EAAAG,UAAAC,IAAA,KAAA,MAAAyR,EAAApR,IAAA,SAEAT,EAAAK,aAKAZ,QACA6d,6BAAA,uBACAi2B,UAAA,gBACAn1B,MAAA,iBACAo1B,UAAA,eACAC,UAAA,YACAC,WAAA,aACAC,OAAA,UAGAt1B,eAAA,SAAAhhB,GACA,GAAAwB,KAAAo0C,cAEA,MADAp0C,MAAAo0C,eAAA,GACA,GAGA30C,OAAAjB,EAAA6P,QAAAjI,SAAA4sB,SAAA,uBAAAvzB,OAAAjB,EAAA6P,QAAAjI,SAAA4sB,SAAA,kBAAAvzB,OAAAjB,EAAA6P,QAAA2kB,SAAA,oBAAA9yB,EAAAC,QAAA,OAAAwB,QAAA,eACAlC,OAAA,UAAAkQ,OACAzP,EAAAC,QAAA,OAAAY,QAAA,aAAAvC,EAAAwB,KAAAK,SAIA00C,cAAA,SAAAv2C,GACA,GAAAqQ,GAAA3O,EAAAC,QAAA,OAAAwB,QAAA,cAIA,QAAA,GAAAkN,EAAA1S,QAAA,OAMA,GAAA0S,EAAA1S,QAAA,KACA+D,EAAAC,QAAA,OAAAY,QAAA,eAAAvC,EAAAwB,KAAAK,OACAL,KAAAo0C,eAAA,GACA,IACA,GAAAvlC,EAAA1S,QAAA,KACA6D,KAAAo0C,eAAA,EACAl0C,EAAAC,QAAA,OAAAY,QAAA,kBAAAvC,EAAAwB,KAAAK,QACA,OAHA,KAOA20C,aAAA,SAAAx2C,GACAiB,OAAAjB,EAAA6P,QAAAjI,SAAA4sB,SAAA,uBACA9yB,EAAAC,QAAA,OAAAY,QAAA,aAAAvC,EAAAwB,KAAAK,QAIA40C,UAAA,SAAAz2C,EAAA61C,GACA50C,OAAA40C,EAAAa,UAAA7mC,QAAAwjB,QAAA,OAAArvB,KAAA,sBAAA2B,OACA1E,OAAA40C,EAAAa,UAAA7mC,QAAAwjB,QAAA,OAAArvB,KAAA,mBAAA2B,QAGAgxC,WAAA,SAAA32C,EAAA61C,GACA50C,OAAA40C,EAAAa,UAAA7mC,QAAAwjB,QAAA,OAAArvB,KAAA,sBAAA0a,OACAzd,OAAA40C,EAAAa,UAAA7mC,QAAAwjB,QAAA,OAAArvB,KAAA,mBAAA0a,QAGA43B,OAAA,SAAAt2C,EAAA61C,GACA50C,OAAAO,KAAAuC,IAAAmmC,aAAA,QACAjpC,OAAAO,KAAAuC,IAAAwL,YAAA,qCAGAnD,OAAA,WACA1K,EAAAC,QAAA,UAAAwB,QAAA,gBACA3B,KAAAQ,IAAA0c,KAAA,OAAA,WACAzd,OAAAO,MAAA4K,WAGA5K,KAAAQ,IAAAoK,SAGA1K,EAAAC,QAAA,UAAAwB,QAAA,gBAAA,IAGAud,qBAAA,SAAA1gB,GACAiB,OAAAO,KAAAuC,IAAAC,KAAA,oBAAA8E,IAAA,UAAA,SAQAvN,EAAA,mCAAA,WCrHA,MA9CA2F,YAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,qCAEAyG,gBAAA,WACA9G,OAAAO,KAAAuC,IAAA6D,SAAA2H,YAAA,6BAAA+R,UAAA,YAGAvf,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAGA8B,OAAA,WACA7C,OAAAO,KAAAuC,IAAA6D,SAAA4sB,SAAA,gBACAvzB,OAAAO,KAAAuC,IAAA6D,SAAAsK,SAAA,WAEAjR,OAAAO,KAAAuC,IAAA6D,SAAAqG,SAAA,6BACAhN,OAAAO,KAAAuC,IAAA6D,SAAA0Z,WACAC,OAAA,SAAA1O,GACA,GAAA5R,OAAA4R,GAAA2hB,SAAA,aAAAvzB,OAAA4R,GAAA2hB,SAAA,wBACA,OAAA,GAGAxiB,YAAA,sBACAwP,WAAA,qBACAnP,UAAA,UACAC,KAAA,SAAAtS,EAAAuS,GACAA,EAAAiM,KAAAjM,EAAAM,UACAnR,EAAAC,QAAA,OAAAwB,QAAA,sBAAAoP,IAEAC,IAAA,SAAAxS,EAAAuS,GACAA,EAAAiM,KAAAjM,EAAAM,UACAnR,EAAAC,QAAA,OAAAwB,QAAA,qBAAAoP,IAEAkP,KAAA,SAAAzhB,EAAAuS,GACAA,EAAAiM,KAAAjM,EAAAM,UACAnR,EAAAC,QAAA,OAAAwB,QAAA,yBAAAoP,EACA,IAAAxH,GAAArJ,EAAAC,QAAA,UAAAwB,QAAA,iBACA4H,GAAAxI,QAAA,QAAAwI,WCjCAxP,EAAA,yBAAA,WA4BA,MA3BA2F,YAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,6BAEAC,WAAA,WAEAC,KAAAK,MAAAC,GAAA,eAAAN,KAAAI,OAAAJ,OASAgB,gBAAA,WAEA,OACAo0C,YAAA,WACA,GAAAvwC,GAAA3E,EAAAC,QAAA,OAAAwB,QAAA,gBACA,OAAA+I,GAAAwN,OAAArT,EAAAjD,IAAA,YAAAA,IAAA,iBCpBA7H,EAAA,mBAAA,yBAAA,gCAAA,uBAAA,SAAAs7C,EAAAC,EAAAC,GA2BA,MA1BA71C,YAAA5B,OAAA8B,QACAG,WAAA,WAEAG,EAAAC,QAAA,SAAAsF,MAAA,gBAAAzF,KAAAw1C,cAGAt1C,EAAAC,QAAA,SAAAsF,MAAA,uBAAAzF,KAAAy1C,qBAGAv1C,EAAAC,QAAA,SAAAsF,MAAA,gBAAAzF,KAAA01C,eAGAF,aAAA,SAAAn1C,GACA,MAAAg1C,IAGAI,oBAAA,WACA,MAAAH,IAGAI,aAAA,WACA,MAAAH,OAOA,IAAAr1C,GAAAuJ,SAAAqoB,KCpCAryB,QAAA2B,UAAAu0C,MAAA,SAAAC,GACA97C,GAAA,oBAAA,8BAAA,mBAAA,SAAA+7C,EAAAC,EAAAC,IAmDA,IAjDAr2C,WAAAs2C,YAAAp2C,QAEAG,WAAA,SAAAsN,GAEA,GAAA3K,GAAA1C,IACAN,YAAAu2C,SAAA71C,OAAA,SAAAN,EAAA6G,GACA,GAAA7G,GAAA4C,EAAA5C,SAAAA,EACA,OAAAA,GAAA6G,IAIAzG,EAAAC,QAAA,OAAAY,QAAA,yBAAAf,KAEA,IAAA81C,EAEA51C,GAAAC,QAAA,OAAAY,QAAA,wBAAAf,MAGAE,EAAAC,QAAA,OAAAY,QAAA,mBAAAf,KACA,IAAA+1C,EAEA71C,GAAAC,QAAA,OAAAY,QAAA,kBAAAf,MAEAE,EAAAC,QAAA,OAAAsF,MAAA,eAAAzF,KAAAF,WAGAo2C,QAAA,WACA,GAAAL,EAEA31C,GAAAC,QAAA,OAAAY,QAAA,iBAAAf,MAKA,GAAA8M,QAAAo8B,QACAhpC,EAAAC,QAAA,OAAAwB,QAAA,cAAA,aAIA7B,SAAA,SAAAA,GACA,MAAA4K,GAAA5K,SAAA81C,EAAA91C,GAAAgT,QACAqjC,SAAA,kBACAC,YAAA,0BACAl+B,OAAA,2BACAm+B,SAAA,cAMAllC,YAGApX,EAAA,OAAA","file":"builder.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-menu-item',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.dashicons ) return '';\n\n\t\t\t\t\tvar icon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'dashicons' );\n\t\t\t\t\ticon.classList.add( this.dashicons );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Collection view that takes our app menu items and renders an individual view for each.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: appMenuItemView,\n\n\t\t/**\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuButtons',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\t/**\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\n\t    \t\t *\n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\trenderPublish: function() {\n\t    \t\t\tif ( that.publishWidth ) {\n\t    \t\t\t\tthis.publishWidth = that.publishWidth + 'px';\n\t    \t\t\t} else {\n\t    \t\t\t\tthis.publishWidth = 'auto';\n\t    \t\t\t}\n\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\n\t    \t\t\t} else {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\n\t    \t\t\t}\n\t    \t\t\treturn template( this );\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable publish.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app isn't clean, render our 'viewChanges' button.\n\t    \t\t * @since  version\n\t    \t\t * @return {[type]} [description]\n\t    \t\t */\n\t    \t\tmaybeRenderCancel: function() {\n\t    \t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\tvar viewChanges = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-view-changes' );\n\t    \t\t\t\treturn viewChanges( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the Publish or view changes button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish',\n\t\t\t'click .viewChanges': 'clickViewChanges'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t},\n\n\t\t/**\n\t\t * When we click view changes, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickViewChanges: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\n\t\t},\n\n\t\tbounceIcon: function( changeModel ) {\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the mobile menu button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickMobileMenu: function( e) {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main application header. Includes links to all of our domains.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-header',\n\n\t\tregions: {\n\t\t\t// Menu is our main app menu.\n\t\t\tmenu: '.nf-app-menu',\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\n\t\t\tbuttons: '.nf-app-buttons',\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\n\t\t},\n\n\t\t/**\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Get our domains\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click #nf-logo': 'clickLogo'\n\t\t},\n\n\t\tclickLogo: function( e ) {\n\t\t\t\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders our sub-header. i.e. add new field, add new action, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder header.\n *\n * This is a layout view and handles two regions:\n * app - menu/buttons\n * subapp - title, add new field, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"div\",\n\t\ttemplate: \"#tmpl-nf-header\",\n\n\t\tregions: {\n\t\t\tapp: \"#nf-app-header\",\n\t\t\tformTitle: \"#nf-app-form-title\",\n\t\t\tappSub: \"#nf-app-sub-header\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.app.show( new appHeaderView() );\n\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar formSettings = formData.get( 'settings' );\n\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\n\n\t\t\tthis.changeSubHeader();\n\t\t},\n\n\t\tchangeSubHeader: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\n\t\t\tthis.appSub.show( subHeaderView );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder.\n *\n * This is a layout view and handles three regions:\n * gutterLeft - gutter to the left of our main content area\n * body - main content area\n * gutterRight - gutter to the right of our main content area\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/main',[], function() {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main',\n\t\tclassName: 'nf-main-test',\n\t\tmaybeDone: false,\n\n\t\toffsetRight: false,\n\t\toffsetLeft: false,\n\n\t\tregions: {\n\t\t\tgutterLeft: '#nf-main-gutter-left',\n\t\t\tbody: '#nf-main-body',\n\t\t\tgutterRight: '#nf-main-gutter-right'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\n\n\t\t\t/*\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\n\t\t\t// ... or Domain Change.\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', function(){\n                // @todo Using a timeout feels like a hack, but there may be a timing issue here.\n            \tsetTimeout(function(){\n                    nfRadio.channel( 'app' ).request( 'update:gutters' );\n\t\t\t\t}, 300, this );\n\t\t\t}, this );\n\n\n\t\t\t/*\n\t\t\t * Reply to messages requesting that we resize our gutters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\n\t\t\tthis.body.show( bodyView );\n\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\n\t\t\tthis.gutterLeft.show( gutterLeftView );\n\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\n\t\t\tthis.gutterRight.show( gutterRightView );\n\t\t\t\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\n\t\t},\n\n\t\tgetMainEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tthis.initialGutterResize();\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( window ).off( 'resize', this.resize );\n\t\t},\n\n\t\tinitialGutterResize: function() {\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\n\t\t\tthis.resizeGutter( this.gutterRight.el );\n\t\t\tthis.setBothGuttersFixed( this );\n\t\t},\n\n\t\tresizeBothGutters: function( e ) {\n\t\t\tvar context = ( e ) ? e.data.context : this;\n\n\t\t\tvar leftEl = context.gutterLeft.el;\n\t\t\tvar rightEl = context.gutterRight.el;\n\t\t\t\n\t\t\tcontext.resizeGutter( leftEl, context );\n\t\t\tcontext.resizeGutter( rightEl, context );\n\n\t\t\tcontext.setBothGuttersAbsolute( context );\n\n\t\t\t/*\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\n\t\t\t */\t\n\t\t\tclearTimeout( context.maybeDone );\n\t\t\t/*\n\t\t\t * Add our timeout.\n\t\t\t */\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\n\t\t},\n\n\t\tresizeGutter: function( el, context ) {\n\t\t\tvar top = jQuery( el ).offset().top;\n\t\t\tvar viewHeight = jQuery( window ).height();\n\t\t\tvar height = viewHeight - top;\n\t\t\tjQuery( el ).height( height );\n\t\t},\n\n\t\tsetBothGuttersFixed: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar topLeft = offsetLeft.top;\n\t\t\tvar leftLeft = offsetLeft.left;\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\t\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\t\t\tvar topRight = offsetRight.top;\n\t\t\tvar leftRight = offsetRight.left;\n\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\n\t\t},\n\n\t\tsetBothGuttersAbsolute: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\n\t\t},\n\n\t\tupdateGutters: function() {\n\t\t\tthis.resizeBothGutters();\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.mobileDashicon ) return '';\n\n                    var icon = document.createElement( 'span' );\n                    icon.classList.add( 'dashicons' );\n                    icon.classList.add( this.mobileDashicon );\n\n                    return icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for the menu drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu',\n\t\tchildView: mobileMenuItemView,\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-publish': 'clickPublish'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty drawer content view.\n * Called before we close the drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our drawer region\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer',\n\n\t\tregions: {\n\t\t\theader: '#nf-drawer-header',\n\t\t\tcontent: '#nf-drawer-content',\n\t\t\tfooter: '#nf-drawer-footer'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().perfectScrollbar();\n\t\t},\n\n\t\tloadContent: function( drawerID, data ) {\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\n\n\t\t\tthis.header.show( headerView );\n\t\t\tthis.content.show( contentView );\n\t\t\tthis.footer.show( footerView );\n\n\t\t},\n\n\t\temptyContent: function() {\n\t\t\tthis.header.empty();\n\t\t\tthis.content.empty();\n\t\t\tthis.footer.empty();\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\n\t\t},\n\n\t\tclickToggleDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for merge tags.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'li',\n\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:active', this.render );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:active', this.render, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click a': 'clickTag'\n\t\t},\n\n\t\tclickTag: function( e ) {\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tif ( this.active ) {\n\t\t\t\t\t\treturn 'active';\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Merge tags popup section\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\tchildView: mergeTagItemView,\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = this.model.get( 'tags' );\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\n\t\t},\n\n\t\tupdateFields: function() {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tthis.model.set( 'tags', fieldCollection );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tactive: false,\n\t\t\texclude: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: mergeTagModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Merge tags popup\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\n\t\tchildView: mergeTagsSectionView,\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\n\t\t},\n\n\t\treRender: function( settingModel ) {\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\n\n\t\t\t/*\n\t\t\t * For the Actions Domain, Add Calc Merge Tags as a Default Group.\n\t\t\t */\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tif( 'actions' == currentDomain.get( 'id' ) ){\n\t\t\t\tvar calcMergeTagGroup = mergeTagCollection.where( { id: 'calcs' } );\n                defaultGroups = defaultGroups.concat( calcMergeTagGroup );\n            }\n\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\n\t\t\tvar that = this;\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\n\t\t\tif ( 'object' == typeof useMergeTags ) {\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\n\t\t\t\t\t\tthat.collection.remove( exclude )\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t// console.log( sectionModel );\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\tgetMergeTagsView: function() {\n\t\t\treturn this;\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Builder view.\n *\n * This layout view has regions that represent our application areas:\n * header\n * main\n * menuDrawer - Mobile side-menu\n * drawer\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: \"#tmpl-nf-builder\",\n\t\tel: '#nf-builder',\n\n\t\tregions: {\n\t\t\theader: \"#nf-header\",\n\t\t\tmain: \"#nf-main\",\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\n\t\t\tdrawer: \"#nf-drawer\",\n\t\t\tmergeTagsContent: '.merge-tags-content'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Respond to requests asking for the builder dom element.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\n\t\t\t// Respond to requests asking for the builder view\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\n\t\t\t// Layout views aren't self-rendering.\n\t\t\tthis.render();\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar mergeTagsClone = mergeTags.clone();\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\n\t\t\t// Show our header.\n\t\t\tthis.header.show( new headerView() );\n\t\t\t// Show our main content.\n\t\t\tthis.main.show( new mainView() );\n\t\t\t// Show our mobile menu\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\n\t\t\t// Show our drawer.\n\t\t\tthis.drawer.show( new drawerView() );\n\n\n\t\t},\n\n\t\tonRender: function() {\n\n\t\t},\n\n\t\tgetBuilderEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tgetBuilderView: function() {\n\t\t\treturn this;\n\t\t},\n\n\t\t// Listen for clicks\n\t\tevents: {\n\t\t\t'click .nf-open-drawer': 'openDrawer',\n\t\t\t'click .nf-change-domain': 'changeDomain',\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\n\t\t},\n\n\t\t/**\n\t\t * Someone clicked to open a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to close a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to change the domain, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\tchangeDomain: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","\ndefine( 'controllers/app/remote',[], function() {\n    return Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\n        },\n\n        addListener: function( model, dataModel ) {\n\n            var listenTo = model.get( 'remote' ).listen;\n\n            // TODO: Change seems to be triggering twice on each update.\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\n\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\n\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\n\n            // Auto-trigger get:remote on drawer load.\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            jQuery( e.srcElement ).addClass( 'spin' );\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        updateSetting: function( dataModel, settingModel ) {\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        getRemote: function( dataModel ) {\n\n            var remote = this.get( 'remote' );\n\n            var data = {\n                parentValue: dataModel.get( remote.listen ),\n                action: remote.action,\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\n            };\n\n            // TODO: Disable setting and lock drawer while updating.\n            var that = this;\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n\n                if( 'textbox' == that.get( 'type' ) ) {\n                    dataModel.set( that.get('name'), response.value );\n                }\n\n                if( 'select' == that.get( 'type' ) ) {\n                    that.set( 'options', response.options );\n                    that.trigger( 'rerender' );\n                }\n            });\n        },\n\n    });\n} );\n","/**\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawer',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our drawer-related click events.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\n\n\t\t\t// Reply to direct requests to open or close the drawer.\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\n\n\t\t\t/*\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\n\t\t\t\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\n\t\t\t// Reply to requests for our disabled/enabled state.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent close' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventClose = {};\n\n\t\t\t/*\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\n\t\t},\n\n\t\t/**\n\t\t * Handles closing our drawer\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\t// Get our current domain.\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n            if ( ! currentDrawer || this.maybePreventClose() ) {\n                return false;\n            }\n\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\n\t\t\t/*\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\n\t\t\t * TODO: Remove this radio message in the future.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\n\t\t\t// Send a message to our drawer to empty its contents.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\n\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\n\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\n\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\n\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is closed, we:\n\t\t\t * clear our interval\n\t\t\t * request that the app change it's current drawer to false\n\t\t\t * trigger a drawer closed message\n\t\t\t */\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\n\t\t    \t\t/*\n\t\t    \t\t * Reset the add new button z-index to 98.\n\t\t    \t\t */\n\t\t    \t\tjQuery( '.nf-master-control' ).css( 'z-index', 98 );\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Click handler for our 'open drawer' event.\n\t\t * @since  3.0\n\t\t * @param  e jQuery event\n\t\t * @return void\n\t\t */\n\t\tclickOpenDrawer: function( e ) {\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\n\t\t\tthis.openDrawer( drawerID );\n\t\t},\n\n\t\t/**\n\t\t * Open our drawer.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string drawerID \tID of the drawer we want to open.\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( drawerID, data ) {\n\t\t\tif ( this.maybePreventClose() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\n\t\t\tdata = data || {};\n\n\t\t\t/*\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\n\t\t\t *\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.model ) {\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\n\t\t\t\tdata.model.set( 'editActive', true );\n\t\t\t\tthis.dataModel = data.model;\n\t\t\t}\n\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\n\t\t\t\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\n\t\t\t\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\n\t\t\t\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is opened, we:\n\t\t\t * clear our interval\n\t\t\t * focus our filter\n\t\t\t * request that the app update its current drawer to the one we opened\n\t\t\t * trigger a drawer opened message\n\t\t\t */\n\t\t\tthis.hasFocus = false;\n\n\t\t\t/*\n\t\t\t * Set our add new button z-index to 0;\n\t\t\t */\n\t\t\tjQuery( '.nf-master-control' ).css( 'z-index', 0 );\n\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\n\t\t\t\t\tif ( ! that.hasFocus ) {\n\t\t        \t\tthat.focusFilter();\n\t\t\t\t\t\tthat.hasFocus = true;\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\n\t\t\t\t\t}   \t\t\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Toggle the drawer from half to full screen and vise-versa\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\ttoggleDrawerSize: function() {\n\t\t\t// Get our drawer element.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\t// toggle our drawer size class.\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\n\t\t},\n\n\t\t/**\n\t\t * Focus our filter\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        focusFilter: function() {\n        \t// Get our filter element\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\n        \t// Focus\n        \tjQuery( filterEl ).focus();\n        },\n\n        /**\n         * Get the CSS right position (in px) of the closed drawer element.\n         * This is calculated by:\n         * getting the width of the builder element\n         * add 300 pixels\n         * make it negative\n         * \n         * @since  3.0\n         * @return void\n         */\n        getClosedDrawerPos: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\n\t\t\treturn '-' + closedPos + 'px';\n        },\n\n        /**\n         * Check to see if anything has registered a prevent close key.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventClose: function() {\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        preventClose: function( key ) {\n        \tthis.objPreventClose[ key ] = true;\n        \t/*\n        \t * When we disable closing the drawer, add the disable class.\n        \t */\n        \t// Get our current drawer.\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\n        },\n\n        /**\n         * Remove a previously registered prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        enableClose: function( key ) {\n        \tdelete this.objPreventClose[ key ];\n        \t /*\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\n        \t */\n        \tif ( ! this.maybePreventClose() && 'undefined' != typeof this.dataModel ) {\n\t        \t// Get our current drawer.\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );        \t\t\n        \t}\n        },\n\n        /**\n         * When we focus our filter, make sure that our open drawer interval is cleared.\n         * \n         * @since  3.0\n         * @return void\n         */\n        filterFocused: function() {\n        \tclearInterval( this.checkOpenDrawerPos );\n        },\n\n        getPreventClose: function() {\n        \treturn this.objPreventClose;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default drawer header.\n *\n * Includes our filter/search and 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Remove extra wrapping div.\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t// Respond to requests related to our filter.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\n\t\t\t'input .nf-filter'\t: 'changeFilter',\n\t\t\t'focus input'\t\t: 'getFocus'\n\t\t},\n\n\t\t/**\n\t\t * When the filter text is changed, trigger an event on our current drawer.\n\t\t * This lets us keep the logic separate from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tchangeFilter: function( e ) {\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\n\t\t},\n\n\t\t/**\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tmaybeChangeFilter: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\te.addObject = true;\n\t\t\t\tthis.changeFilter( e );\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Clear our filter.\n\t\t *\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tclearFilter: function() {\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\n\t\t\t\tfilterEl.val('');\n\t\t\t\tfilterEl.trigger( 'input' );\n\t\t\t\tfilterEl.focus();\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tblurFilter: function() {\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\n\t\t},\n\n\t\t/**\n\t\t * Return our filter dom element.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\n\t\t},\n\n\t\tgetFocus: function() {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Default drawer footer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/footerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tgetHeaderView: function( data ) {\n\t\t\t\treturn new defaultHeaderView( data );\n\t\t\t},\n\n\t\t\tgetFooterView: function( data ) {\n\t\t\t\treturn new defaultFooterView( data );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds all of our drawer models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: drawerModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\n\t\t},\n\n\t\tremoveStagedField: function( el ) {\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: stagedFieldView,\n\t\temptyView: stagedFieldsEmptyView,\n\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\n\t\t},\n\n\t\tonShow: function() {\n\n\t\t\tthis.$el = jQuery( this.el ).parent();\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\n\t\t\t\thelper: 'clone',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\n\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tjQuery( this.el ).parent().draggable( {\n\t\t\t\topacity: 0.9,\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\trefreshPositions: true,\n\t\t\t\tgrid: [ 3, 3 ],\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\thelper: function( e ) {\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\treturn element;\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\n\t\t\t\t},\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tgetStagedFieldsEl: function() {\n\t\t\treturn jQuery( this.el );\n\t\t},\n\n\t\tonAddChild: function() {\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\n\t\t},\n\n\t\tonRemoveChild: function() {\n\t\t\tif( this.hasStagedFields() ) return;\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\n\t\t},\n\n\t\thasStagedFields: function() {\n\t\t\treturn  0 != this.collection.length;\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model for our staged field.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of staged fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: stagingModel,\n\t\tcomparator: 'order'\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\n\n\t\tinitialize: function() {\n\t\t\t_.bindAll( this, 'render' );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.dragging = false;\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\n\t\t\t */\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'pointer',\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\t\trefreshPositions: true,\n\t\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t\tappendTo: '#nf-builder',\n\n\t\t\t\t\thelper: function( e ) {\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t},\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tdrag: function(e, ui) {\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\n\t\t\t\t\t}\n\n\t\t\t\t} ).disableSelection();\n\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\n\t\t\t    \tjQuery( this ).addClass( 'active' );\n\t\t\t    } ).blur( function() {\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\n\t\t\t    } );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickFieldType',\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\n\t\t},\n\n\t\tclickFieldType: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\n\t\t\t}\n\t\t},\n\n\t\tmousedownFieldType: function( e ) {\n\t\t\tjQuery( e.target).addClass( 'clicked' );\n\t\t\tsetTimeout( function() {\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\n\t\t\t}, 1500 );\n\t\t},\n\n\t\tmaybeClickFieldType: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\tthis.clickFieldType( e );\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderFieldTypes: function() {\n\t\t\t        var html = document.createElement( 'span' );\n\t\t\t        var that = this;\n\t\t\t        _.each( this.fieldTypes, function( id ) {\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\n\t\t\t            var nicename = type.get( 'nicename' );\n\t\t\t            var icon = type.get( 'icon' );\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\n\t\t\t            var templateHTML = renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField } );\n                        var htmlFragments = document.createRange().createContextualFragment( templateHTML );\n                        html.appendChild( htmlFragments );\n\t\t\t        } );\n\t\t\t        return html.innerHTML;\n\t\t\t\t},\n\n\t\t\t\tsavedField: function() {\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\n\t\t\t\t\t\treturn 'nf-saved';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetTypeSection: function() {\n\t\t\treturn this.el;\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: fieldTypeSectionView,\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\n\n\t\tregions: {\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\n\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\n\t\t\tthis.primaryCollection = this.savedCollection;\n\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\n\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\n\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\n\t\t},\n\n\t\tremoveFieldTypeFilter: function () {\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t},\n\n\t\tgetChildView: function( model ) {\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\n\t\t\n\t\tregions: {\n\t\t\tsettings: '.nf-field-settings'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tthis.dataModel = data.dataModel;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'display' ) ) {\n\t\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\n\t\t\t} else {\n\t\t\t\tthis.settings.empty();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .toggle': 'clickToggleGroup'\n\t\t},\n\n\t\tclickToggleGroup: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tif ( '' != this.label ) {\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\n\t\t\t\t\t\treturn groupLabel( this );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderArrowDir: function() {\n\t\t\t\t\tif ( this.display ) {\n\t\t\t\t\t\treturn 'down';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: itemSettingGroupView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\n\n\t\tregions: {\n\t\t\tsettingTitle: '.nf-setting-title',\n\t\t\tsettingGroups: '.nf-setting-groups'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.model;\n\t\t\tthis.groupCollection = data.groupCollection;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\n\n\t\t\tthis.settingTitle.show( titleView );\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\tmaybeRenderTitle: function() {\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\n\t    \t\t\t\treturn title( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Edit Settings drawer header.\n *\n * Includes our 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Button to add an action to the form.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/typeButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t\n\t\t\tjQuery( this.el ).disableSelection();\n\t\t\t\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\n\t\t\t\tvar that = this;\n\t\t\t\tjQuery( this.el ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\tscroll: false,\n\t\t\t\t\thelper: 'clone',\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickAddAction'\n\t\t},\n\n\t\tclickAddAction: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\n\t\t\t\t} else { // This isn't an installed action\n\t\t\t\t\twindow.open( this.model.get( 'link' ), '_blank' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-item';\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\t\t\t\t\t\tclasses += ' nf-has-img';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'installed' == this.section ) {\n\t\t\t\t\t\tclasses += ' nf-action-type';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderStyle: function() {\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\n\t\t\t\t\t\t// This is being used in a template, so carefully consider the order of double/single quotes.\n\t\t\t\t\t\treturn \"background-image: url('\" + jQuery.trim( this.image ) + \"')\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\n\t\tchildView: actionTypeButtonView,\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderNicename: function() {\n\t\t\t\t\treturn that.collection.nicename;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\treturn that.collection.slug;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Add action drawer.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection'], function( actionTypeCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\n\n\t\tregions: {\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\n\t\t\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n\t\t\tthis.primaryCollection = this.installedActions;\n\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n\t\t\tthis.secondaryCollection = this.availableActions;\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: filteredAvailable } ) );\n\t\t\t\n\t\t},\n\n\t\tremoveactionTypeFilter: function () {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.installedActions } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.availableActions } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Individual change item.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:disabled', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .undoSingle': 'undoSingle'\n\t\t},\n\n\t\tundoSingle: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'table',\n        className: 'nf-changes',\n\t\tchildView: viewChangesItem\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\n\n\t\tevents: {\n\t\t\t'click .undoChanges': 'clickUndoChanges'\n\t\t},\n\n\t\tclickUndoChanges: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Error view used for settings.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/settingError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\n\t\tregions: {\n\t\t\terror: '.nf-setting-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\t/*\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\n\t\t\t * Defaults to false.\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\n\t\t\t */\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\n\t\t\t\n\t\t\tif ( renderOnChange ) {\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\n\t\t\t}\n\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\n\t\t\tthis.model.on( 'change:warning', this.renderWarning, this );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n            /**\n\t\t\t * For settings that require a remote refresh\n\t\t\t *   add an \"update\"/refresh icon to the label.\n             */\n            var remote = this.model.get( 'remote' );\n\t\t\tif( remote ) {\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\n\t\t\t\t\tvar labelText, updateIcon, updateLink, labelWrapper;\n\n                    labelText = document.createTextNode( this.model.get('label') );\n\n                    updateIcon = document.createElement( 'span' );\n                    updateIcon.classList.add( 'dashicons', 'dashicons-update' );\n\n                    updateLink = document.createElement( 'a' );\n                    updateLink.classList.add( 'extra' );\n                    updateLink.appendChild( updateIcon );\n\n                    // Wrap the label text and icon/link in a parent element.\n                    labelWrapper = document.createElement( 'span' );\n                    labelWrapper.appendChild( labelText );\n                    labelWrapper.appendChild( updateLink );\n\n                    // The model expects a string value.\n                    this.model.set('label', labelWrapper.innerHTML );\n                }\n\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\n\n\t\t\t/*\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\n\t\t\tthis.model.off( 'change:error', this.renderError );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( this.model.get( 'remote' ) ) {\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\n\t\t\t/*\n\t\t\t * Unescape any HTML being saved if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\n\t\t\t}\n\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.mergeTagsContentView = false;\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tmaxWidth: 200,\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\tcloseOnClick: true\n\t\t\t\t})\n\t\t    });\n\t\t\t\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t    }\n\n\t\t\t/*\n\t\t\t * Apply Setting Field Masks\n\t\t\t */\n\t\t\tvar mask = this.model.get( 'mask' );\n\n\t\t\tif( typeof mask != \"undefined\" ){\n\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\n\n\t\t\t\tswitch( mask.type ){\n\t\t\t\t\tcase 'numeric':\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'currency':\n\n\t\t\t\t\t\tvar currency = nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' );\n\t\t\t\t\t\tvar currencySymbol = nfAdmin.currencySymbols[ currency ] || '';\n\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSign:  jQuery('<div />').html(currencySymbol).text(),\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'custom':\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// TODO: Error Logging.\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.renderError();\n\t\t},\n\n\t\tonShow: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonAttach: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\trenderError: function() {\n\t\t\tif ( this.model.get( 'error' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\n\t\t\t\tthis.error.empty();\n\t\t\t}\n\t\t},\n\n        renderWarning: function() {\n            if ( this.model.get( 'warning' ) ) {\n                jQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-warning' );\n                this.error.show( new settingErrorView( { model: this.model } ) );\n            } else {\n                jQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-warning' );\n                this.error.empty();\n            }\n        },\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) != this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t    \t\trenderSetting: function(){\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\n\t    \t\t\t\tthis.value = '';\n\t    \t\t\t}\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\tclasses += ' has-merge-tags';\n\t\t\t\t\t}\n\t\t\t\t\tif ( 'rte' == this.type ) {\n\t\t\t\t\t\tclasses += ' rte';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting ';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' nf-one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\tif ( ! this.help ) return '';\n\t\t\t\t\tvar helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\n\n\t\t\t\t\thelpText = document.createTextNode( this.help );\n\t\t\t\t\thelpTextContainer = document.createElement( 'div' );\n\t\t\t\t\thelpTextContainer.classList.add( 'nf-help-text' );\n\t\t\t\t\thelpTextContainer.appendChild( helpText );\n\n\t\t\t\t\thelpIcon = document.createElement( 'span' );\n\t\t\t\t\thelpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\n                    helpIconLink = document.createElement( 'a' );\n                    helpIconLink.classList.add( 'nf-help' );\n                    helpIconLink.setAttribute( 'href', '#' );\n                    helpIconLink.setAttribute( 'tabindex', '-1' );\n                    helpIconLink.appendChild( helpIcon );\n\n                    helpTextWrapper = document.createElement( 'span' );\n                    helpTextWrapper.appendChild( helpIconLink );\n                    helpTextWrapper.appendChild( helpTextContainer );\n\n                    // The template expects a string value.\n\t\t\t\t\treturn helpTextWrapper.innerHTML;\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeSetting',\n\t\t\t'keyup .setting': 'keyUpSetting',\n\t\t\t'click .setting': 'clickSetting',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n\n\t\tchangeSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tkeyUpSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tclickSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerOpened: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerClosed: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\n\n\t\tregions: {\n\t\t\tformName: '.new-form-name',\n\t\t\tformSubmit: '.new-form-submit'\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\n\t\t\t/*\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\n\t\t\t */\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\n\t\t\t} else {\n\t\t\t\tdataModel.set( 'add_submit', 0 );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish'\n\t\t},\n\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerNewForm',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\n\t});\n\n\treturn view;\n} );\n","/**\n * Config file for our app drawers.\n *\n * this.collection represents all of our registered drawers.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerConfig',[\n\t'models/app/drawerCollection',\n\t'views/fields/drawer/addField',\n\t'views/app/drawer/editSettings',\n\t'views/app/drawer/headerEditSettings',\n\t'views/actions/drawer/addAction',\n\t'views/app/drawer/contentViewChanges',\n\t'views/app/drawer/headerViewChanges',\n\t'views/app/drawer/contentNewForm',\n\t'views/app/drawer/headerNewForm'\n\t], function(\n\t\tdrawerCollection,\n\t\taddFieldView,\n\t\teditSettingsView,\n\t\teditSettingsHeaderView,\n\t\taddActionView,\n\t\tviewChangesView,\n\t\tviewChangesHeaderView,\n\t\tnewFormView,\n\t\tnewFormHeaderView,\n\t\tmobileItemControlsView\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.collection = new drawerCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'addField',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addFieldView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'addAction',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addActionView( data );\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tid: 'editSettings',\n\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\n\t\t\t\t\t */\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new view( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new editSettingsView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'viewChanges',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'newForm',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new newFormHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new newFormView( data );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t// Listen for requests for our drawer collection.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\n\t\t\t// Listen for requests for specific drawer models.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\n\t\t},\n\n\t\tgetDrawerCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDrawer: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tif ( 'undefined' != typeof type ) {\n\t    \t\t\t\treturn type.get( 'nicename' );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/empty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Model for our individual domains.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdashicons: '',\n\t\t\tclasses: '',\n\t\t\tactive: false,\n\t\t\turl: '',\n\t\t\thotkeys: false,\n\t\t\tdisabled: false,\n\n\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t/*\n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t},\n\n\t\t\tgetGutterRightView: function( data ) {\n\t\t\t\t/* \n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our domain models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\treorderOnSort: true,\n\n\t\tgetChildView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\n\t\t},\n\n\t\tgetEmptyView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.collection.models.length > 0 ) {\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\n\t\t\t\tvar that = this;\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\n\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\n\t\t\t\t *\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\n\t\t\t\t * destroy it when the drag stops.\n\t\t\t\t */\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tthis.initSortable();\n\t\t\t\t// }\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\n\t\t},\n\n\t\tgetSortableEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tinitSortable: function() {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar tolerance = 'pointer';\n\t\t\t} else {\n\t\t\t\tvar tolerance = 'intersect';\n\t\t\t}\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\t//containment: '#nf-main',\n\t\t\t\thelper: 'clone',\n\t\t\t\tcancel: '.nf-item-controls',\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\n\t\t\t\topacity: 0.95,\n\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t// scroll: false,\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\tscrollSensitivity: 10,\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tdestroySortable: function() {\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\n\t\t},\n\n\t\tonAddChild: function( childView ) {\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\n\t\t\t\tchildView.$el.hide().show( 'clip' );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\n\t\t\t}\n\t\t}\n\t\t\n\t} );\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-add-saved-field',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderAddButton();\n\t\t},\n\n\t\trenderAddButton: function() {\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\n\t\t\t} else {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\n\t\t\t}\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-button': 'clickAddSavedField'\n\t\t},\n\n\t\tclickAddSavedField: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Fields settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:saved', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\n\t\t},\n\n\t\tregions: {\n\t\t\taddSaved: '.nf-add-saved-field'\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:saved', this.render );\n\t\t\tthis.addSavedjBox.destroy();\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderjBoxContent();\n\t\t\tvar that = this;\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\n\t\t\t\ttrigger: 'click',\n\t\t\t\ttitle: 'Add to Saved Fields',\n\t\t\t\tposition: {\n\t\t\t\t\tx:'left',\n\t\t\t\t\ty:'center'\n\t\t\t\t},\n\t\t\t\toutside:'x',\n\t\t\t\tcloseOnClick: 'body',\n\n\t\t\t\tonCreated: function() {\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\n\t\t},\n\n\t\trenderjBoxContent: function() {\n\t\t\tif ( this.addSaved ) {\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tvar displayName = type.get( 'nicename' );\n\n\t    \t\t\tif ( this.saved ) {\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\n\t    \t\t\t}\n\t    \t\t\treturn displayName;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderSavedStar: function() {\n\t\t\t\t\tif ( this.saved ) {\n\t\t\t\t\t\tvar star = 'filled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar star = 'empty';\n\t\t\t\t\t}\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Add main header.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-actions',\n\n\t\tinitialize: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tif ( actionCollection.models.length == 0 ) {\n\t\t\t\tjQuery( this.el ).hide();\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).show();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Actions subheader view.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/itemControls',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-item-controls',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\t// \n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'click .nf-edit-settings': 'clickEdit',\n\t\t\t'singletap .nf-item-control': 'singleTapEdit',\n\t\t\t'click .nf-item-delete': 'clickDelete',\n\t\t\t'click .nf-item-duplicate': 'clickDuplicateField'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tsingleTapEdit: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\tclickDelete: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t},\n\n\t\tclickDuplicateField: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Single action table row\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-action-item',\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:actionItemTemplate' ) || this.template;\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\n\t\t\t}\n\n\t\t\tthis.maybeDeactivate();\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t},\n\n\t\tmaybeDeactivate: function() {\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change input': 'changeToggle',\n\t\t\t'click': 'maybeClickEdit'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tchangeToggle: function( e ) {\n\t\t\tvar setting = jQuery( e.target ).data( 'setting' );\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', setting );\n\t\t\tconsole.log( settingModel );\n\t\t\tconsole.log( this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderToggle: function( settingName ) {\n\t\t\t\t\tthis.settingName = settingName || 'active';\n\t\t\t\t\tvar actionLabel = this.label;\n\t\t\t\t\tthis.label = '';\n\t\t\t\t\tthis.value = this[ this.settingName ];\n\t\t\t\t\tthis.name = this.id + '-' + this.settingName;\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\n\t\t\t\t\thtml = html( this );\n\t\t\t\t\tthis.label = actionLabel;\n\t\t\t\t\treturn html;\n\t\t\t\t},\n\n\t\t\t\trenderTypeNicename: function() {\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\n\n\t\t\t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\n                /**\n\t\t\t\t * [Deprecated] Tooltips are not currently implemented in the context of the action list.\n\t\t\t\t *   However, the template uses a nested template which requires the helper method.\n                 * @returns {string}\n                 */\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t// }\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\t// jQuery( this.el ).parent().droppable( {\n\t\t\t// \taccept: function( draggable ) {\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t// \t\t\treturn true;\n\t\t\t// \t\t}\n\t\t\t// \t},\n\t\t\t// \thoverClass: 'nf-droppable-hover',\n\t\t\t// \ttolerance: 'pointer',\n\t\t\t// \tover: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tout: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tdrop: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t// \t},\n\t\t\t// } );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content view for our actions.\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttemplate: '#tmpl-nf-action-table',\n\t\tchildView: actionView,\n\t\temptyView: emptyView,\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:mainContentTemplate' ) || this.template;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tjQuery( this.el ).droppable( {\n\t\t\t\taccept: '.nf-action-type-draggable',\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\n\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/advanced/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/settingItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-form-setting-type',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click': 'clickEdit'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateActiveClass: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\tchildView: settingItem\n\t\t\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our form fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Field',\n\t\t\tobjectDomain: 'fields',\n\t\t\teditActive: false,\n\t\t\torder: 999\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tif ( 'undefined' == typeof this.get( 'type' ) ) return;\n\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\n\t\t\tvar parentType = fieldType.get( 'parentType' );\n\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\n\t\t\t\t\tthis.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/*\n\t\t\t * If our field type is a saved field, set our field type to the actual field type\n\t\t\t */\n\t\t\tif ( 'saved' == fieldType.get( 'section' ) ) {\n\t\t\t\tthis.set( 'type', fieldType.get( 'type' ) );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * fields-parentType\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * This is the actual field data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: function( model ){\n\t\t\treturn parseInt( model.get( 'order' ) );\n\t\t},\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addField, this );\n\t\t\tthis.on( 'remove', this.removeField, this );\n\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new fields property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddField: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed fields property.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveField: function( model ) {\n\t\t\tthis.removedIDs = this.removedIDs || {};\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t},\n\n\t\taddNewField: function( model ) {\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tappendNewField: function( model ) {\n\t\t\tif ( 0 == this.length ) {\n\t\t\t\tvar order = 0;\n\t\t\t} else {\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\n\t\t\t}\n\n\t\t\tmodel.set( 'order', order, { silent: true } );\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tremoveFieldResponse: function( model ) {\n\t\t\tthis.remove( model );\n\t\t},\n\n\t\tfieldExists: function( fieldModel ) {\n\t\t\treturn -1 != this.indexOf( fieldModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n\n","/**\n * Config file for our app domains.\n * \n * this.collection represents all of our app domain (fields, actions, settings) information.\n *\n * This doesn't store the current domain, but rather all the data about each.\n * \n * This data includes:\n * hotkeys\n * header view\n * subheader view\n * content view\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/domainConfig',[\n\t// Require our domain collection\n\t'models/app/domainCollection',\n\t// Require our fields domain files\n\t'views/fields/subHeader',\n\t'views/fields/mainContentFieldCollection',\n\t'views/fields/drawer/settingsTitle',\n\t// Require our actions domain files\n\t'views/actions/mainHeader', \n\t'views/actions/subHeader',\n\t'views/actions/mainContent',\n\t// Require our settings domain files\n\t'views/advanced/mainHeader',\n\t'views/advanced/subHeader',\n\t'views/advanced/mainContent',\n\t// Empty View\n\t'views/app/empty',\n\t// FieldCollection: used by the default formContentData filter\n\t'models/fields/fieldCollection'\n\t], \n\tfunction( \n\t\tappDomainCollection,\n\t\tfieldsSubHeaderView,\n\t\tFieldsMainContentFieldCollectionView,\n\t\tfieldsSettingsTitleView,\n\t\tactionsMainHeaderView,\n\t\tactionsSubHeaderView,\n\t\tactionsMainContentView,\n\t\tsettingsMainHeaderView,\n\t\tsettingsSubHeaderView,\n\t\tsettingsMainContentView,\n\t\tEmptyView,\n\t\tFieldCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Add our default formContentView filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * Add our default formContentData filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\n\t\t\t/*\n\t\t\t * Add our default formContentGutterView filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\n\n\t\t\t// Define our app domains\n\t\t\tthis.collection = new appDomainCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'fields',\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\n\t\t\t\t\t},\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\n\t\t\t\t\t * Uses two filters:\n\t\t\t\t\t * 1) One for our formContentData\n\t\t\t\t\t * 2) One for our formContentView\n\t\t\t\t\t *\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\n\t\t\t\t\t * \n\t\t\t\t\t * @since  3.0\n\t\t\t\t\t * @return formContentView backbone view.\n\t\t\t\t\t */\n\t\t\t\t\tgetMainContentView: function( collection ) {\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( ! formContentData ) {\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentView = callback();\n\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\n\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterRightView: function() {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'actions',\n\t\t\t\t\tnicename: nfi18n.domainActions,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new actionsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'settings',\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new settingsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'preview',\n\t\t\t\t\tnicename: 'Preview Form',\n\t\t\t\t\tclasses: 'preview',\n\t\t\t\t\tdashicons: 'dashicons-visibility',\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\n\t\t\t\t\turl: nfAdmin.previewurl\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t/*\n\t\t\t * Send out a radio message with our domain config collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get the app domain collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\n\t\t},\n\n\t\tgetDomainCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDomainModel: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tdefaultFormContentView: function( formContentData ) {\n\t\t\treturn FieldsMainContentFieldCollectionView;\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData ) {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\n\n\t\t\t/*\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\n\t\t\t */\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn fieldCollection.findWhere( { key: key } );\n        \t}, this );\n\n        \treturn new FieldCollection( fieldModels );\n\t\t},\n\n\t\tdefaultFormContentGutterView: function( formContentData ) {\n\t\t\treturn EmptyView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our app data.\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/appModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tloading: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes to our 'clean' attribute.\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\n\t\t},\n\n\t\tchangeStatus: function() {\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\n *\n * clean is a boolean that represents whether or not changes have been made.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Get the collection that represents all the parts of our application.\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// Setup our initial model.\n\t\t\tthis.model = new appModel( {\n\t\t\t\tcurrentDrawer: false,\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\n\t\t\t\tclean: true\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\n\t\t\t */\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\n\t\t\tthis.model.set( 'mobile', mobile );\n\n\t\t\t/*\n\t\t\t * Respond to requests to see if we are on mobile.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests for information about the state of our app.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests to update app settings.\n\t\t\t */\t\t\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\n\n\t\t},\n\n\t\tupdateCurrentDomain: function( model ) {\n\t\t\tthis.updateSetting( 'currentDomain', model );\n\t\t},\n\n\t\tupdateSetting: function( setting, value ) {\n\t\t\tthis.model.set( setting, value );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetSetting: function( setting ) {\n\t\t\treturn this.model.get( setting );\n\t\t},\n\n\t\tgetData: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tgetCurrentDomain: function() {\n\t\t\treturn this.model.get( 'currentDomain' );\n\t\t},\n\n\t\tupdateCurrentDrawer: function( drawerID ) {\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetCurrentDrawer: function() {\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\n\t\t},\n\n\t\tisMobile: function() {\n\t\t\treturn this.model.get( 'mobile' );\n\t\t}\n\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for click events to expand/collapse setting groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for click events on our settings group.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\n\t\t},\n\n\t\t/**\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \tgroup setting model\n\t\t * @return void\n\t\t */\n\t\ttoggleSettingGroup: function( e, model ) {\n\t\t\tif ( model.get( 'display' ) ) {\n\t\t\t\t/*\n\t\t\t\t * Make sure that none of our settings have errors\n\t\t\t\t */\n\t\t\t\tvar errors = false;\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\n\t\t\t\t\t\terrors = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errors ) {\n\t\t\t\t\tmodel.set( 'display', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodel.set( 'display', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our database with our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/updateDB',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\n\t\t\t// Respond to requests to update the database.\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\n\t\t\t/*\n\t\t\t * Register our default formContent save filter.\n\t\t\t * This converts our collection into an array of keys.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\n\t\t},\n\n\t\t/**\n\t\t * Update our database.\n\t\t * If action isn't specified, assume we're updating the preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \taction preview or publish\n\t\t * @return void\n\t\t */\n\t\tupdateDB: function( action ) {\n\t\t\t// If our app is clean, dont' update.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Default action to preview.\n\t\t\taction = action || 'preview';\n\n\t\t\t// Setup our ajax actions based on the action we're performing\n\t\t\tif ( 'preview' == action ) {\n\t\t\t\tvar jsAction = 'nf_preview_update';\n\t\t\t} else if ( 'publish' == action ) {\n\t\t\t\tvar jsAction = 'nf_save_form';\n\t\t\t}\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t/*\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\n\t\t\t * We need to unset those.\n\t\t\t * TODO: Make this more dynamic/filterable.\n\t\t\t */\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * The main content of our form is called the formContent.\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\n\t\t\t * If there aren't any filters found, we default to the field collection.\n\t\t\t * \n\t\t\t */\n\t\t\t\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\t\t\t/*\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t * \n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t *\n\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t}\n\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\n\t\t\t\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\t/*\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\n\t\t\t */\n\t\t\tformContentData = callback( formContentData );\n\t\t\t\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Get our form data\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t// Turn our formData model into an object\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\n\t\t\tdata.settings.formContentData = formContentData;\n\t\t\t/**\n\t\t\t * Prepare fields for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the field IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.fields is an array of objects like:\n\t\t\t * field.label = blah\n\t\t\t * field.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * field.settings.label = blah\n\t\t\t * field.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our fields and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.fields, function( field ) {\n\t\t\t\tvar id = field.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete field.id;\n\t\t\t\tdelete field.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our fields\n\t\t\t\tfor (var prop in field) {\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t// If our field property isn't null, then...\n                        if ( null !== field[ prop ] ) {\n                            // Set our settings.prop value.\n                            settings[prop] = field[prop];\n                        }\n                        // Delete the property from the field.\n                        delete field[ prop ];\n                    }\n\t\t\t\t}\n\n\t\t\t\tfor( var setting in settings ){\n\t\t\t\t\tif( null === settings[ setting ] ) {\n\t\t\t\t\t\tdelete settings[setting];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update our field object.\n\t\t\t\tfield.settings = settings;\n\t\t\t\tfield.id = id;\n\t\t\t} );\n\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\n\t\t\tdata.deleted_fields = removedIDs;\n\n\t\t\t/**\n\t\t\t * Prepare actions for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the action IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.actions is an array of objects like:\n\t\t\t * action.label = blah\n\t\t\t * action.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * action.settings.label = blah\n\t\t\t * action.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our actions and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.actions, function( action ) {\n\t\t\t\tvar id = action.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete action.id;\n\t\t\t\tdelete action.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our actions\n\t\t\t\tfor (var prop in action) {\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t//Removing null values\n\t\t\t\t\t    if( null !== action[ prop ] ) {\n\t\t\t\t\t\t    // Set our settings.prop value.\n\t\t\t\t\t\t    settings[ prop ] = action[ prop ];\n\t\t\t\t\t    }\n\t\t\t\t        // Delete the property from the action.\n\t\t\t\t        delete action[ prop ];\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t// Update our action object.\n\t\t\t\taction.settings = settings;\n\t\t\t\taction.id = id;\n\t\t\t} );\n\n\t\t\tfor ( var setting in data.settings ) {\n\t\t\t\tif ( null === data.settings[ setting ] ) {\n\t\t\t\t\tdelete data.settings[ setting ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\n\t\t\tdata.deleted_actions = removedIDs;\n\n\t\t\t// Turn our object into a JSON string.\n\t\t\tdata = JSON.stringify( data );\n\t\t\t// Run anything that needs to happen before we update.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\n\n\t\t\tif ( 'publish' == action ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\n\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tjQuery.post( ajaxurl, { action: jsAction, form: data, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\t\tresponse.action = action;\n\t\t\t\t\t// Run anything that needs to happen after we update.\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\n\t\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\n\t\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\n\t\t\t\t\t}\n\t\t\t\t} catch( exception ) {\n\t\t\t\t\tconsole.log( 'Something went wrong!' );\n\t\t\t\t\tconsole.log( exception );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} ).fail( function( xhr, status, error ) {\n\t\t\t\tconsole.log( action );\n\t\t\t\t// For previews, only log to the console.\n                if( 'preview' == action ) {\n                    console.log( error );\n                    return;\n                }\n                // @todo Convert alert to jBox Modal.\n\t\t\t\talert(xhr.status + ' ' + error + '\\r\\n' + 'An error on the server caused your form not to publish.\\r\\nPlease contact Ninja Forms Support with your PHP Error Logs.\\r\\nhttps://ninjaforms.com/contact');\n\t\t\t});\n\t\t},\n\n\t\tdefaultSaveFilter: function( formContentData ) {\n\t\t\treturn formContentData.pluck( 'key' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/formModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\n\t\t\t} else {\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Stores our form data and responds to requests for it.\n * Form data stores fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Instantiate Form Model\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\n\t\t\t// Set our field collection\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\n\t\t\t// Set our actions collection\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\n\t\t\t// Set our settings collection\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\n\t\t\t// Respond to requests for form data.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\n\t\t},\n\n\t\t/**\n\t\t * Return form data model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return backbone.model\n\t\t */\n\t\tgetFormModel: function() {\n\t\t\treturn this.model;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles changing our preview link when we change the 'clean' state of our app.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/previewLink',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for events that would change our preview link\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\n\t\t},\n\n\t\t/**\n\t\t * Disable our preview link before we send data to update our preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tdisablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', true );\n\t\t},\n\n\t\t/**\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  boolean \tclean app data state\n\t\t * @return void\n\t\t */\n\t\tchangePreviewNicename: function( clean ) {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\n\t\t\tif ( ! clean ) {\n\t\t\t\tvar nicename = 'Preview Changes';\n\t\t\t} else {\n\t\t\t\tvar nicename = 'Preview Form';\n\t\t\t}\n\n\t\t\tpreview.set( 'nicename', nicename );\n\t\t},\n\n\t\t/**\n\t\t * Enable our preview button.\n\t\t * This is triggered when we get a response from our preview update.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tenablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/menuButtons',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\n\t\t},\n\n\t\tpublish: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t},\n\n\t\tviewChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our change data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisabled: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our change models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel,\n\n\t\tcomparator: function( model ) {\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\n\t\t\treturn -id;\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Track settings changes across our app.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new changeCollection();\n\t\t\t// Respond to any requests to add a change directly.\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\n\t\t\t// Respond to requests for the change collection\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\n\t\t},\n\n\t\tregisterChange: function( action, model, changes, label, data ) {\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\n\t\t\t\tlabel.dashicon = 'admin-generic';\n\t\t\t}\n\t\t\tvar changeModel = new ChangeModel({\n\t\t\t\taction: action,\n\t\t\t\tmodel: model,\n\t\t\t\tchanges: changes,\n\t\t\t\tlabel: label,\n\t\t\t\tdata: data\t\t\n\t\t\t} );\n\t\t\tthis.collection.add( changeModel );\n\t\t\treturn changeModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tmaybeResetCollection: function( clean ) {\n\t\t\tif ( clean ) {\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/app/undoChanges',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\n\t\t},\n\n\t\tundoChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.sort();\n\t\t\tvar that = this;\n\t\t\t_.each( changeCollection.models, function( change ) {\n\t\t\t\tthat.undoSingle( change, true );\n\t\t\t} );\n\t\t\tchangeCollection.reset();\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t},\n\n\t\tundoSingle: function( change, undoAll ) {\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/publishResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our app channel for the updateDB response.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\n\t\t},\n\n\t\tpublishResponse: function( response ) {\n\t\t\t// If we aren't performing a publish action, bail.\n\t\t\tif ( 'publish' !== response.action ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// Check to see if we have any new ids. \n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\n\n\t\t\t\t// If we have any new fields, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\n\t\t\t\t\t\tif ( field ) {\n\t\t\t\t\t\t\tfield.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have any new actions, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\n\t\t\t\t\t\tif ( action ) {\n\t\t\t\t\t\t\taction.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have a new form id, update the model with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\tformModel.set( 'id', newID );\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\n\n\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\n\t\t\t}\n\t\t\t// Add a notice that we've published.\n//\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\n\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t}\n\t\t\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeDomain',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for both menu and submenu clicks.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\n\t\t\t// Reply to specific requests to change the domain\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\n\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent change' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventChange = {};\n\t\t},\n\n\t\tchangeAppDomain: function( e, model ) {\n\t\t\t/*\n\t\t\t * If we have disabled movement between domains, return false.\n\t\t\t */\n\t\t\tif ( this.maybePreventChange() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we are passed a model, use that model.\n\t\t\t * Otherwise, get the domain from the event target data.\n\t\t\t */ \n\t\t\tif ( 'undefined' == typeof model ) {\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\n\t\t\t}\n\t\t\t// If a drawer is open, close it.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\n\t\t\t * and trigger a radio message saying we've changed the domain.\n\t\t\t */ \n\t\t\tif ( 0 == model.get( 'url' ).length ) {\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\n\t\t\t}\n\t\t},\n\n\t\t/**\n         * Check to see if anything has registered a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventChange: function() {\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        preventChange: function( key ) {\n        \tthis.objPreventChange[ key ] = true;\n        },\n\n        /**\n         * Remove a previously registered key that is preventing our domain from changing.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        enableChange: function( key ) {\n        \tdelete this.objPreventChange[ key ];\n        },\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/pushstate',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\n\t\t},\n\n\t\tchangePushState: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\n\t\t\tvar reExp = /domain=\\\\d+/;\n\t\t\tvar url = window.location.toString();\n\t\t\tvar newUrl = url.replace( reExp, '' );\n\t\t\tconsole.log( newUrl );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\n * \n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\n * \n * Currently too much hotkey data is hard-coded here.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/hotkeys',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\n\t\t},\n\n\t\tchangeHotkeys: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\taddNewField: function() {\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\taddNewAction: function() {\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t},\n\n\t\tchangeDomainFields: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\n\t\t},\n\n\t\tchangeDomainActions: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\n\t\t},\n\n\t\tchangeDomainSettings: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\n\t\t},\n\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Change the clean state of our app when settings are changed.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cleanState',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Set an array of field model attributes to ignore.\n\t\t\t * This list will be filtered just before we ignore anything.\n\t\t\t */ \n\t\t\tthis.ignoreAttributes = [\n\t\t\t\t'editActive'\n\t\t\t];\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\n\t\t},\n\n\t\tsetAppClean: function( model ) {\n\t\t\tfor( var attr in model.changedAttributes() ) {\n\t\t\t\tvar changedAttr = attr;\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\n\t\t\t}\n\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\n\t\t\t\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/coreUndo',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\n\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\n\t\t},\n\n\t\t/**\n\t\t * Undo settings that have been changed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoChangeSetting: function( change, undoAll ) {\n\t\t\tvar fieldModel = change.get( 'model' );\n\t\t\tvar changes = change.get( 'changes' );\n\t\t\tvar attr = changes.attr;\n\t\t\tvar before = changes.before;\n\t\t\tfieldModel.set( attr, before );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoAddObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\t\t\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoDuplicateObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tobjectCollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo removing a field or an action.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoRemoveObject: function( change, undoAll ) {\n\t\t\tvar dataModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\n\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\n\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\tcollection.trigger( 'reset', collection );\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo field sorting.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoSortFields: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar fields = data.fields;\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar fieldModel = changeModel.model;\n\t\t\t\tfieldModel.set( 'order', before );\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\n\t\t\t} );\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\n\n\n\t\t\tfieldCollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoAddListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\t\tif ( changeModel !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tmodel.collection.remove( model );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoRemoveListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\t\t\tcollection.add( model );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoSortListOptions: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar collection = data.collection;\n\t\t\t\n\t\t\tvar objModels = data.objModels;\n\n\t\t\t_.each( objModels, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar optionModel = changeModel.model;\n\t\t\t\toptionModel.set( 'order', before );\n\t\t\t} );\t\t\t\t\n\n\n\t\t\tcollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\n\t\t * @return void\n\t\t */\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\n\t\t\tif ( ! undoAll ) {\n\t\t\t\t// Update preview.\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tchangeCollection.remove( change );\n\t\t\t\tif ( 0 == changeCollection.length ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneModelDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\n\t\t},\n\n\t\tcloneModelDeep: function( model ) {\n\t\t\t// Temporary value used to store any new collections.\n\t\t\tvar replace = {};\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\n\t\t\t_.each( model.attributes, function( val, key ) {\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\n\t\t\t\t\treplace[ key ] = clonedCollection;\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t// Clone our original model\n\t\t\tvar newModel = model.clone();\n\t\t\t// Overwrite any collections we created above.\n\t\t\t_.each( replace, function( val, key ) {\n\t\t\t\tnewModel.set( key, val );\n\t\t\t} );\n\n\t\t\treturn newModel;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns the appropriate child view for our settings drawer.\n *\n * This enables settings types to register custom childviews for their settings.\n * The option-repeater setting for the list field is an example.\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for field settings child views.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t},\n\n\t\t/**\n\t\t * Return the appropriate child setting view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model\tmodel \tField setting\n\t\t * @return backbone.view\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\t// Get our setting type.\n\t\t\tvar type = model.get( 'type' );\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\n\t\t\t\n\t\t\treturn settingChildView\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our model when the user changes a setting.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeSettingDefault',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to update settings.\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\n\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change our setting, update the model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar value = value || null;\n\t\t\tif ( ! value ) {\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\n\t\t\t}\n\n\t\t\tif( 'undefined' == typeof value ){\n\t\t\t    value = jQuery( e.target ).val();\n            }\n\t\t\t\n\t\t\t// Update our field model with the new setting value.\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\n\t\t\tnfRadio.channel( 'setting-' + name ).trigger( 'after:updateSetting', dataModel, settingModel );\n\t\t\t// Register our setting change with our change tracker\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\t\tchildView: itemSettingView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.collection = this.model.get( 'settings' );\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\t    \t\trenderSetting: function(){\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model that represents our setting.\n *\n * When the model is created, we trigger the init event in two radio channels.\n *\n * This lets specific types of settings modify the model before anything uses it.\n *\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsettings: false,\n\t\t\thide_merge_tags: false,\n\t\t\terror: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Send out two messages saying that we've initialized a setting model.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\n\n\t\t\t/*\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\n\t\t\t * If we're using merge tags in this setting\n\t\t\t */\n\t\t\tif( 'undefined' == typeof this.collection ) return;\n\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\n\t\t * We want to send the message on the objectType channel.\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( keyModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\n\t\t},\n\n\t\tmaybePreventUI: function() {\n\t\t\tif ( this.get( 'error' ) ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of settings for each field type.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingModel,\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options || {};\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles actions related to field settings that use a fieldset\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t// When a list type field is initialized, create an option collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\n\t\t},\n\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn fieldsetView;\n\t\t},\n\n\t\t/**\n\t\t * Instantiate settings collection when a fieldset type is initialized.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\n\t\t * @return void\n\t\t */\n\t\tcreateSettingsCollection: function( model ) {\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our toggle field.\n * When we change the toggle, the setting value will be 'on' or ''.\n * We need to change this to 1 or 0.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/toggleSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Return either 1 or 0, depending upon the toggle position.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\tvar value = 1;\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for clicks on our action item action buttons.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Main Sortable\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemControls',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.clickDelete );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\n\n\t\t\t// Listen for our drawer close and remove our active edit state\n\t\t},\n\n\t\t/**\n\t\t * Open a drawer with our action model for editing settings.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickEdit: function( e, model ) {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tvar type = nfRadio.channel( currentDomainID ).request( 'get:type' , model.get( 'type' ) );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: type.get( 'settingGroups' ) } );\n\t\t},\n\n\t\t/**\n\t\t * Delete a action model from our collection\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDelete: function( e, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\t// Add our action deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: dataModel.collection\n\t\t\t};\n\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tvar data = changeModel.get( 'data' );\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\n\t\t\t\t\t\tif ( field.model == dataModel ) {\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'data', data );\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\n\t\t\t\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDuplicate: function( e, model ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\t// Change our label.\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy' );\n\t\t\t// Update our ID to the new tmp id.\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\n\t\t\tnewModel.set( 'id', tmpID );\n\t\t\t// Add new model.\n\t\t\t// Params are: model, silent, renderTrigger, action\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\n\t\t\t\n\t\t\t// Add our action addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: model.get( 'objectType' ),\n\t\t\t\tlabel: model.get( 'label' ),\n\t\t\t\tchange: 'Duplicated',\n\t\t\t\tdashicon: 'admin-page'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\n\t\t\t\n\t\t\tmodel.trigger( 'change:label', model );\n\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Config file for our merge tags.\n *\n * this.collection represents all of our registered merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mergeTags',[\n\t'models/app/mergeTagCollection'\n\t], function(\n\tmergeTagCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\n\t\t\tvar that = this;\n\t\t\t_.each( mergeTags, function( tagSection ) {\n\t\t\t\tif ( tagSection.tags ) {\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\n\t\t\t\t} else {\n\t\t\t\t\tvar tags = '';\n\t\t\t\t}\n\n\t\t\t\tthat.tagSectionCollection.add( {\n\t\t\t\t\tid: tagSection.id,\n\t\t\t\t\tlabel: tagSection.label,\n\t\t\t\t\ttags: tags,\n\t\t\t\t\tdefault_group: tagSection.default_group\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t// TODO: Make this dynamic\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\n\t\t\t\t\tfieldTags.add( {\n\t\t\t\t\t\tid: field.get( 'id' ),\n\t\t\t\t\t\tlabel: field.get( 'label' ),\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\n\t\t\t\t\t} );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\n\t\t\tthis.currentElement = {};\n\t\t\tthis.settingModel = {};\n\t\t\tthis.open = false;\n\n\t\t\t// Unhook jBox Merge Tag stuff.\n\t\t\t// nfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\n\n\t\t\t\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\n\n\t\t\t// Listen for requests for our mergeTag collection.\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\n\n\t\t\t// When a field's ID is changed (ie from a tmpID), update the merge tag.\n            this.listenTo( nfRadio.channel( 'fieldSetting-id' ), 'update:setting', this.updateID );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\n\n\t\t\t/*\n\t\t\t * TODO: Hotkey support for adding tags.\n\t\t\t *\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\n\t\t\t*/\n\t\t},\n\n\t\t/**\n\t\t * Init merge tags within the passed view.\n\t\t * @since  3.0\n\t\t * @param  backbone.view view to be searched for merge tags.\n\t\t * @return void\n\t\t */\n\t\tinitMergeTags: function( view ) {\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Apply merge tags jQuery plugin.\n\t\t\t *\n\t\t\t * Prevent jBox from being called multiple times on the same element\n\t\t\t */\n\t\t\tthis.jBoxes = {};\n\t\t\tvar that = this;\n\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\n\t\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\tx: 'center',\n\t\t\t\t\t\t\ty: 'bottom'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcloseOnClick: 'body',\n\t\t\t\t\t\tcloseOnEsc: true,\n\t\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\t\tmaxHeight: 200,\n\n\t\t\t\t\t\tonOpen: function() {\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\n\t\t\t\t}\n\t\t    });\n\t\t},\n\n\t\tclickMergeTag: function( e, tagModel ) {\n\t\t\t/*\n\t\t\t * TODO: Make this more dynamic.\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\n\t\t\t * but another type of setting might need to do this in the future.\n\t\t\t */\n\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\n\n\t\t\t\tconsole.log( tagModel );\n\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\n\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\n\t\t\t} else {\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t}\n\t\t},\n\n\t\taddFieldTags: function( fieldModel ) {\n\t\t\t// TODO: Make this dynamic\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\n\t\t\t\t\tid: fieldModel.get( 'id' ),\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tdeleteFieldTags: function( fieldModel ) {\n\t\t\tvar fieldID = fieldModel.get( 'id' );\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\n\t\t},\n\n\t\tupdateCalcTags: function( optionModel ) {\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\n\t\t\t_.each( calcCollection.models, function( calc ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calc.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\t\t},\n\n\t\topenMergeTags: function( e ) {\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\n\t\t\t}\n\t\t},\n\n\t\treturnMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tif ( currentModel ) {\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'up' );\n\t\t\t}\n\t\t},\n\n\t\tdownMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'down' );\n\t\t\t}\n\t\t},\n\n\t\tchangeActiveTag: function( dir ) {\n\t\t\tif ( 'down' == dir ) {\n\t\t\t\tvar inc = 1;\n\t\t\t} else {\n\t\t\t\tvar inc = -1\n\t\t\t}\n\t\t\t// First, check to see if a field is currently active.\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\n\t\t\t\tcurrentModel.set( 'active', false );\n\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\n\t\t\t\tif ( nextModel ) {\n\t\t\t\t\tnextModel.set( 'active', true );\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\n\t\t\t\tconsole.log( 'system' );\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\n\t\t\t\tconsole.log( 'userinfo' );\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\n\t\t\t\t// Make sure that we have fields\n\t\t\t\tif ( 0 < this.fields.models.length ) {\n\t\t\t\t\t// Set our first field to active.\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\n\t\t\t\t} else {\n\t\t\t\t\t// Set our first system model to active.\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateCurrentElement: function( element ) {\n\t\t\tthis.currentElement = element;\n\t\t},\n\n\t\tupdateCurrentSetting: function( settingModel ) {\n\t\t\tthis.settingModel = settingModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.tagSectionCollection;\n\t\t},\n\n\t\tgetSectionModel: function( id ) {\n\t\t\treturn this.tagSectionCollection.get( id );\n\t\t},\n\n\t\tupdateOpen: function( open ) {\n\t\t\tthis.open = open;\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\n\t\t\t\tmodel.set( 'active', false );\n\t\t\t} );\n\t\t},\n\n\t\t// When a field is published, update the merge tag with the newly assigned ID (as opposed to the tmpID).\n        updateID: function( fieldModel ) {\n\n\t\t\t// Get the formatted merge tag for comparison.\n\t\t\tvar targetTag = this.getFieldKeyFormat( fieldModel.get( 'key' ) );\n\n\t\t\t// Search the field tags for the matching merge tag to be updated.\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).find( function( fieldMergeTag ){\n                return targetTag == fieldMergeTag.get( 'tag' );\n            });\n\n\t\t\t// If no matching tag is found, return early.\n\t\t\tif( 'undefined' == typeof oldTag ) return;\n\n\t\t\t// Update the merge tag with the \"published\" field ID.\n\t\t\toldTag.set( 'id', fieldModel.get( 'id' ) );\n\t\t},\n\n\t\tupdateKey: function( fieldModel ) {\n\t\t\tvar newKey = fieldModel.get( 'key' );\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\n\t\t\tif ( 'undefined' != typeof oldTag ) {\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\n\t\t\t}\n\n\t\t},\n\n\t\tgetFieldKeyFormat: function( key ) {\n\t\t\treturn '{field:' + key + '}';\n\t\t},\n\n\t\tgetFieldKeyFormatCalc: function( key ) {\n\t\t\treturn '{field:' + key + ':calc}';\n\t\t},\n\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\n            var oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\n\t\t\tvar settingName = settingModel.get( 'name' );\n\t\t\tvar oldVal = dataModel.get( settingName );\n            if(settingName == 'calculations' && 'undefined' != typeof(dataModel.get('calculations'))) {\n                var calcModel = dataModel.get( 'calculations' );\n                calcModel.each( function( model ) {\n                    var oldCalcKey = oldKey.slice( 0, (oldKey.length - 1) ) + ':calc}';\n                    var newCalcKey = newKey.slice( 0, (newKey.length - 1 ) ) + ':calc}';\n                    oldVal = model.get( 'eq' );\n                    if ( 'string' == typeof( oldVal ) ) {\n                        var re = new RegExp( oldCalcKey, 'g' );\n                        var newVal = oldVal.replace( re, newCalcKey );\n                        re = new RegExp( oldKey, 'g' );\n                        // TODO: We won't need this second replace when we no longer\n                        // have to append :calc to merge tags.\n                        newVal = newVal.replace( re, newKey );\n                        model.set( 'eq', newVal );\n                    }\n                } );\n                return false;\n            }\n\t\t\tif ( 'string' == typeof oldVal ) {\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\n\t\t\t\tdataModel.set( settingName, newVal );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagLookupCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n    var collection = Backbone.Collection.extend( {\n        model: mergeTagModel\n    } );\n    return collection;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTag',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-tag',\n\n        events: {\n            \"click\": \"insertTag\"\n        },\n\n        insertTag: function() {\n            nfRadio.channel( 'mergeTags' ).request( 'insert:tag', this.model.get( 'tag' ) );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagList',[ 'views/app/drawer/mergeTag' ], function( mergeTagView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagView,\n\n        initialize: function() {\n            nfRadio.channel( 'merge-tags' ).reply( 'update:taglist', this.sectionFilter, this );\n            nfRadio.channel( 'merge-tags' ).reply( 'filtersearch', this.searchFilter, this );\n        },\n\n        filter: function( child, index, collection ){\n            return 'fields' == child.get( 'section' );\n        },\n\n        sectionFilter: function( section ){\n            this.filter = function( child, index, collection ){\n                return section == child.get( 'section' );\n            }\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\n        },\n\n        searchFilter: function( term ){\n            this.filter = function( child, index, collection ){\n                var label = child.get( 'label' ).toLowerCase().indexOf( term.toLowerCase().replace( ':', '' ) ) >= 0;\n                var tag   = child.get( 'tag' ).toLowerCase().indexOf( term.toLowerCase() ) >= 0;\n                return label || tag;\n            }\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\n\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroup',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-section',\n        events: {\n            \"click\": \"onClick\"\n        },\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'after:filtersearch', this.removeActive );\n        },\n\n        onClick: function(){\n          this.updateTags();\n          this.setActive();\n        },\n\n        updateTags: function() {\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', this.model.get( 'id' ) );\n        },\n\n        setActive: function(){\n            this.$el.addClass( 'active' );\n            this.$el.siblings().removeClass( 'active' );\n        },\n\n        removeActive: function(){\n            this.$el.removeClass( 'active' );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroupList',[ 'views/app/drawer/mergeTagGroup' ], function( mergeTagGroupView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagGroupView,\n\n        initialize: function(){\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'open', this.render, this );\n        },\n\n        // TODO: Update filter when a new tag is added. ie Calculations.\n        filter: function( child, index, collection ){\n            return 0 < child.get( 'tags' ).length;\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagFilter',[], function() {\n    var view = Marionette.ItemView.extend({\n        template: '#tmpl-nf-merge-tag-box-filter',\n        events: {\n            \"keyup input\": \"updateFilter\",\n        },\n        updateFilter: function( event ) {\n\n            if( /* ENTER */ 13 == event.keyCode ){ // Copied from Keyup Callback.\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n            var value = this.$el.find( 'input' ).val();\n            nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagBox',[], function() {\n    var view = Marionette.LayoutView.extend({\n        el: '#merge-tags-box',\n        template: \"#tmpl-nf-merge-tag-box\",\n\n        regions: {\n            filter:   '.merge-tag-filter',\n            sections: '.merge-tag-sections',\n            tags:     '.merge-tag-list'\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Merge Tag Box\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1\n */\n\ndefine( 'controllers/app/mergeTagBox',[\n    'models/app/mergeTagModel',\n    'models/app/mergeTagLookupCollection',\n    'views/app/drawer/mergeTag',\n    'views/app/drawer/mergeTagList',\n    'views/app/drawer/mergeTagGroup',\n    'views/app/drawer/mergeTagGroupList',\n    'views/app/drawer/mergeTagFilter',\n    'views/app/drawer/mergeTagBox'\n], function(\n    MergeTagModel,\n    MergeTagLookupCollection,\n    MergeTagView,\n    MergeTagListView,\n    MergeTagGroupView,\n    MergeTagGroupListView,\n    MergeTagFilterView,\n    MergeTagBoxLayout\n) {\n    var controller = Marionette.Object.extend( {\n\n        caret: 0, // Track the caret position of the current setting's input.\n        old: '', // THe old merge tag that will be replaced.\n\n        initialize: function(){\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', function(){\n                jQuery( '.merge-tags' ).off( 'click' );\n                jQuery( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterAppStart );\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:caret', function( position ){\n               that.caret = position;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:caret', function(){\n                return that.caret;\n            });\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:old', function( value ){\n                that.old = value;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:old', function(){\n                return that.old;\n            });\n\n            nfRadio.channel( 'mergeTags' ).reply( 'insert:tag', this.insertTag.bind( this ) );\n\n            /** OPTION REPEATER */\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'add:option', function( model ){\n                var selector = '#' + model.cid + ' .has-merge-tags input.setting';\n                jQuery( selector ).on( 'focus', function( event ){\n                   that.focusCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).on( 'keyup', function( event ){\n                    that.keyupCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* CALCULATIONS */\n            this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', this.renderSetting );\n            // this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', function( settingModel, dataModel, view ){\n            //     view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            // } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options.calculations .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options.calculations .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* SUMMERNOTE */\n            this.listenTo( nfRadio.channel( 'summernote' ), 'focus', function( e, selector ) {\n                that.focusCallback( false, selector, 'rte' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keydown', function( e, selector ){\n                jQuery( selector ).closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keyup', function( e, selector ){\n                that.keyupCallback( e, selector, 'rte' );\n            } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.note-editor .merge-tags' ).off( 'click' );\n                jQuery( '.note-editor .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            jQuery( document ).on( 'keyup', function( event ){\n                if( 27 == event.keyCode ){\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    // Copied from KeyupCallback.\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).blur();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            });\n\n            /**\n             * Listen to the Field Changes (add, delete, update) and update the Merge Tags.\n             */\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'add:field',    this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'delete:field', this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fieldSetting-key' ), 'update:setting', this.afterAppStart );\n\n            /** ... and Calc updates. */\n            this.listenTo( Backbone.Radio.channel( 'calcs' ), 'update:calc', this.afterAppStart );\n\n            this.listenTo( Backbone.Radio.channel( 'app' ), 'change:currentDomain', this.afterAppStart );\n        },\n\n        afterAppStart: function() {\n\n            var currentDomain = Backbone.Radio.channel( 'app' ).request( 'get:currentDomain' );\n\n            var mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n            var mergeTags = [];\n            mergeTagCollection.each( function( section ){\n\n                section.get( 'tags' ).each( function( tag ){\n\n                    if( 'fields' == currentDomain.get( 'id' ) && '{submission:sequence}' == tag.get( 'tag' ) ) return;\n\n                    mergeTags.push({\n                        label: tag.get( 'label' ),\n                        tag:   tag.get( 'tag' ),\n                        section: section.get( 'id' )\n                    });\n                });\n            });\n            var layout = new MergeTagBoxLayout();\n            layout.render();\n            var tagCollection = new MergeTagLookupCollection( mergeTags );\n            var mergeTagListView = new MergeTagListView({\n                collection: tagCollection\n            });\n            var mergeTagGroupListView = new MergeTagGroupListView({\n                collection: mergeTagCollection\n            });\n\n            layout.getRegion('tags').show(mergeTagListView);\n            layout.getRegion('sections').show(mergeTagGroupListView);\n            layout.getRegion('filter').show(new MergeTagFilterView);\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel ){\n            if( 'undefined' == typeof settingModel.get( 'use_merge_tags' ) ) return;\n            if( ! settingModel.get( 'use_merge_tags' ) ) return;\n            var name = settingModel.get( 'name' );\n            this.listenTo( nfRadio.channel( 'setting-' + name ), 'render:setting', this.renderSetting );\n        },\n\n        renderSetting: function( settingModel, dataModel, view ){\n\n            view.$el.find( '.merge-tags' ).off( 'click' );\n            view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n\n            if( 0 == jQuery( '#merge-tags-box' ).length ) this.afterAppStart();\n\n            // Track Scrolling.\n            jQuery( '#nf-drawer' ).on( 'scroll', function(){\n               // COPIED AND MODIFIED FROM FOCUS\n                if( 0 == jQuery( '.merge-tag-focus' ).length ) return;\n\n                var rteEditor = jQuery( '.merge-tag-focus' ).closest( '.nf-setting' ).find( '.note-editor' );\n                if( 0 != rteEditor.length ){\n                    var posY = rteEditor.offset().top - jQuery(window).scrollTop();\n                    var height = rteEditor.outerHeight();\n                } else {\n                    var posY = jQuery('.merge-tag-focus').offset().top - jQuery(window).scrollTop();\n                    var height = jQuery('.merge-tag-focus').outerHeight();\n                }\n\n\t            // Find out if merge tag box will go below bottom of the page.\n\t            var tagBoxY = posY + height;\n\t            var windowHeight = window.innerHeight;\n\t            var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t            // If merge tag box will render below the bottom of the page,\n\t            // change it to render above the field\n\n\t            if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n\t\t            tagBoxY = posY - tagBoxHeight;\n\t            }\n\n                jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                var repeaterRow = jQuery( '.merge-tag-focus' ).closest( '.nf-list-options-tbody' );\n                if( 0 != repeaterRow.length ){\n                    var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', left );\n                } else {\n                    var posX = jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', posX );\n                    jQuery( '#merge-tags-box' ).css( 'width', jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).width() );\n                }\n            });\n\n            // On input focus, move the Merge Tag Box into position.\n            jQuery( view.el ).find( '.setting' ).on( 'focus', this.focusCallback );\n\n            // TODO: Maybe move to view events.\n            // On input keyup, maybe show Merge Tag Box.\n            jQuery( view.el ).find( '.setting' ).on( 'keyup', this.keyupCallback );\n        },\n\n        // TODO: Maybe move to view class.\n        beforeDrawerClose: function(){\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            // jQuery( 'body' ).append( jQuery( '#merge-tags-box' ) );\n        },\n\n        insertTag: function( tag ) {\n\n            var $input = jQuery( '.merge-tag-focus' );\n\n            if( 0 != $input.closest( '.nf-setting' ).first().find( '.note-editable' ).length ){\n                $input = $input.closest( '.nf-setting' ).first().find( '.note-editable' );\n            }\n\n            if( 1 < $input.length ){ $input = $input.first(); }\n\n            if( $input.hasClass( 'note-editable' ) ){\n                var str = $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code' );\n            } else {\n                var str = $input.val();\n            }\n\n            var find = nfRadio.channel( 'mergeTags' ).request( 'get:old' );\n            var replace = tag;\n            var caretPos = nfRadio.channel( 'mergeTags' ).request( 'get:caret' );\n\n            var patt = /{([a-zA-Z0-9]|:|_||-})*/g;\n\n            // Loop through matches to find insert/replace index range.\n            // Reference: http://codepen.io/kjohnson/pen/36c3a782644dfff40fe3c1f05f8739d9?editors=0012\n            while (match = patt.exec(str)) {\n                if (find != match[0]) continue; // This isn't the match you are looking for...\n                var string = str.slice(0, match.index) + replace + str.slice(patt.lastIndex); // Fancy replace for the specifc match, using the index/position.\n\n                if( $input.hasClass( 'note-editable' ) ){\n                    $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code', string );\n\n                    // Reposition the caret. http://stackoverflow.com/a/6249440 TODO: Determine the appropriate childNode.\n                    var el = $input;\n                    var childNode = null; // Default to first childNode.\n                    _.each( el[0].childNodes, function( node, index ){\n                        if( childNode ) return;\n                        if( ! node.nodeValue && ! node.innerHTML ) return;\n                        if( node.nodeValue ) {\n                            var value = node.nodeValue;\n                        } else if( node.innerHTML ){\n                            var value = node.innerHTML;\n                        }\n\n                        if( -1 == value.indexOf(replace) ) return; // Replace not found in this node.\n\n                        value = value.replace( /&nbsp;/g, ' ' );\n                        var position = value.indexOf(replace) + find.length;\n\n                        /*\n                         * If no caretPos, determine based on the node. ie Merge Tag Button context.\n                         * Note: We can't just check for '{', because they could just be inserting the first tag.\n                         */\n                        if( -1 == caretPos ){\n                            caretPos = value.indexOf( replace ) + 1;\n                        }\n\n                        if (caretPos == position) childNode = el[0].childNodes[index];\n                    });\n                    if( ! childNode ) childNode = el[0].childNodes[0];\n                    var offset = caretPos - find.length + replace.length;\n                    var range = document.createRange();\n                    var sel = window.getSelection();\n                    if( 0 != childNode.childNodes.length ) {\n                        try{\n                           range.setStart(childNode.childNodes[0], offset); \n                        } catch( err ) {\n                            console.log( childNode );\n                            console.log( 'error' );\n                        }\n                        \n                    } else {\n                        try {\n                            range.setStart(childNode, offset);\n                        } catch( err ) {\n                            console.log( 'error' );\n                        }\n                        \n                    }\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n\n\n                } else {\n                    $input.val(string); // Update input value with parsed string.\n                    $input.change(); // Trigger a change event after inserting the merge tag so that it saves to the model.\n                    $input.caret(caretPos - find.length + replace.length); // Update Carept Position.\n                }\n\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            $input.removeClass( 'merge-tag-focus' );\n            $input.closest( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n        },\n\n        mergeTagsButtonClick: function( e ){\n\n            var $this = jQuery( this );\n\n            if( $this.siblings().hasClass( 'merge-tag-focus' ) ){\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n\n            if( 0 !== $this.closest( '.nf-setting, .nf-table-row' ).find( '.note-tools' ).length ){\n                var $inputSetting = $this.closest( '.note-editor' ).siblings( '.setting' ).first();\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n                // Since we haven't determined the caretPos, set to -1 as a flag to determine later.\n                nfRadio.channel('mergeTags').request( 'set:caret', -1 );\n            } else {\n                var $inputSetting = $this.siblings( '.setting' ).first();\n                var text = $inputSetting.val() || '';\n                $inputSetting.val( text + '{' ).change();\n                nfRadio.channel('mergeTags').request('set:caret', text.length + 1 );\n            }\n\n            if( $this.parent().hasClass( 'note-tools' ) ){\n                // $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n            }\n\n            nfRadio.channel('mergeTags').request('set:old', '{' );\n\n            $inputSetting.addClass( 'merge-tag-focus' );\n\n            // Disable browser autocomplete.\n            var autocomplete = $this.attr( 'autocomplete' );\n            $this.attr( 'autocomplete', 'off' );\n            $this.data( 'autocomplete', autocomplete );\n\n            var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n            if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n            } else {\n                $overlayElement.addClass('merge-tag-focus-overlay');\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'display', 'block' );\n            nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n\n            jQuery( '.merge-tag-focus-overlay' ).off( 'click' );\n            jQuery( '.merge-tag-focus-overlay' ).on( 'click', function( e ) {\n                if ( jQuery( e.target ).hasClass( 'note-editor' ) ) {\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            } );\n\n            setTimeout(function(){\n                jQuery( '#merge-tags-box' ).find( '.merge-tag-filter' ).find( 'input' ).focus();\n            }, 500 );\n        },\n\n        focusCallback: function( e, target, type ){\n\n            var type = type || 'setting';\n            var $this = ( 'undefined' == typeof target ) ? jQuery( this ) : jQuery( target );\n\n            jQuery( '.merge-tag-focus' ).each(function(index, el){\n                if( this == el ) return;\n                el.removeClass( 'merge-tag-focus' );\n            });\n\n            if( 'rte' == type ) {\n                var posY = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().top - jQuery(window).scrollTop();\n                var height = $this.closest( '.nf-setting' ).find( '.note-editor' ).outerHeight();\n            } else {\n                var posY = $this.offset().top - jQuery(window).scrollTop();\n                var height = $this.outerHeight();\n            }\n\n            // Find out if merge tag box will go below bottom of the page.\n\t        var tagBoxY = posY + height;\n\t        var windowHeight = window.innerHeight;\n\t        var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t        // If merge tag box will render below the bottom of the page,\n            // change it to render above the field\n\n\t        if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n\t\t        tagBoxY = posY - tagBoxHeight;\n\t        }\n\n            jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n            var repeaterRow = $this.closest( '.nf-list-options-tbody' );\n            if( 0 != repeaterRow.length ) {\n                var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', left );\n            } else if( 'rte' == type ) {\n                var posX = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-setting' ).find( '.note-editor' ).width() );\n            }\n            else\n            {\n                var posX = jQuery( this ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-settings' ).width() );\n            }\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' != dataID ) return;\n\n            // var offset = jQuery( view.el ).find( '.setting' ).parent().outerHeight();\n            // jQuery( view.el ).find( '.setting' ).parent().append( jQuery( '#merge-tags-box' ) );\n            // jQuery( '#merge-tags-box' ).css( 'top', offset );\n        },\n\n        keyupCallback: function( event, target, type ){\n\n            var type = type || 'setting';\n\n            if( /* ENTER */ 13 == event.keyCode ){\n\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n\n                return;\n            }\n\n            // Get the value.\n            // var value = jQuery( summernote ).summernote( 'code' );\n            // Update the value.\n            // jQuery( summernote ).closest( '.nf-setting' ).find( '.note-editable' ).html( value );\n\n            if( 'undefined' != typeof target ) {\n                var $this = jQuery(target);\n            } else {\n                var $this = jQuery( this );\n            }\n\n            // TODO: Disable Browser Autocomplete\n            // $this.attr()\n\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' != dataID ) return;\n\n            // Store the current caret position.\n            if( 'rte' == type ){\n                var range = $this.summernote('createRange');\n                if( range ) {\n                    var caretPos = range.so; // or .eo?\n                } else {\n                    var caretPos = 0;\n                }\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } else {\n                var caretPos = $this.caret();\n            }\n            nfRadio.channel( 'mergeTags' ).request( 'set:caret', caretPos );\n\n            // Find merge tags.\n            if( 'rte' == type ) {\n                var mergetags = $this.summernote( 'code' ).match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            } else {\n                var mergetags = $this.val().match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            }\n\n            // Filter out closed merge tags.\n            mergetags = _.filter(mergetags, function(mergetag) {\n                return -1 == mergetag.indexOf( '}' ); // Filter out \"closed\" merge tags.\n            });\n\n            // If an open merge tag is found, show the Merge Tag Box, else hide.\n            if( 0 !== mergetags.length ) {\n\n                nfRadio.channel( 'mergeTags' ).request( 'set:old', mergetags[0] );\n\n                jQuery('#merge-tags-box').css( 'display', 'block' );\n                nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n                $this.addClass('merge-tag-focus');\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                // Disable browser autocomplete.\n                var autocomplete = $this.attr( 'autocomplete' );\n                $this.attr( 'autocomplete', 'off' );\n                $this.data( 'autocomplete', autocomplete );\n\n                var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n                if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                    $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n                } else {\n                    $overlayElement.addClass('merge-tag-focus-overlay');\n                }\n\n                $overlayElement.off( 'click' );\n                $overlayElement.on( 'click', function( event ){\n                    var elementClasses = jQuery( event.target ).attr( 'class' ) || [];\n                    if( -1 !== elementClasses.indexOf( 'merge-tag-focus-overlay' ) ){\n                        nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                        jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                        nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                        jQuery( '#merge-tags-box' ).removeClass();\n                        jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                        jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                    }\n                });\n\n                var value = mergetags[0].replace( '{', '' );\n                nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\n            } else {\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n            }\n        }\n\n    } );\n\n    return controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemSettingFill',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/confirmPublish',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\n\t\t},\n\n\t\tconfirmPublish: function() {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t// Check to see if we need to add a submit button.\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\n\t\t\t}\n\t\t\tformModel.set( 'show_publish_options', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to settings that utilise the Rich Text Editor\n *\n * @package Ninja Forms builder\n * @subpackage App - Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/rte',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\n\n\t\t\t// When an RTE setting is shown, re-render RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\n\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\n\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      }\n\n\t\t      this.currentContext = {};\n\t\t},\n\n\t\tinitSettingModel: function( settingModel ) {\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\n\t\t},\n\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\t\t\tvar mergeTags = this.mergeTags();\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\n\t\t\t];\n\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmergeTags: mergeTags,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true,\n\t\t\t\t    callbacks: {\n\t\t\t\t    \tonBlur: function( editor ) {\n\t\t\t\t    \t\tvar value = editor.getValue();\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\n\t\t\t\t    \t}\n\t\t\t\t    }\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonBlur: function( e, context ) {\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\n                        nfRadio.channel( 'summernote' ).trigger( 'blur', settingModel, dataModel, value );\n\t\t\t\t\t},\n                    onFocus: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'focus', e, this, context );\n                    },\n                    onKeydown: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keydown', e, this, context );\n                    },\n                    onKeyup: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keyup', e, this, context );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar after = value;\n\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\n\t\t},\n\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\n\t\t},\n\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: 'Insert Link',\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmergeTags: function( context ) {\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\n\t\t\treturn ui.button({\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\n\t\t\t\tcontents: mergeTagsButton({}),\n\t\t\t\ttooltip: 'Merge Tags'\n\t\t\t}).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: 'Insert Media',\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tthis.currentContext = context;\n\t\t\t\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: 'Select a file',\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tthis.currentContext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tthis.currentContext.invoke( 'editor.createLink', {\n\t\t\t\t\ttext: media.title || media.filename,\n\t\t\t\t\turl: media.url\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldSelect',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n\n            // Bind field key listener to field-select setting type.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\n\n            // Add setting change listener only in drawers with a field-select setting.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\n        },\n\n        trackKeyChanges: function( settingModel ) {\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\n\n            // Update selected field if the selected field's key changes.\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\n        },\n\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\n\n            var oldKey = keyModel._previousAttributes[ 'key' ];\n            var newKey = keyModel.get( 'key' );\n\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\n\n                dataModel.set( settingModel.get( 'name' ), newKey );\n            }\n        },\n\n        beforeRender: function( settingModel, dataModel ) {\n\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n            var fieldTypes = settingModel.get( 'field_types' );\n\n            var options = [\n                {\n                    label: '--',\n                    value: 0\n                }\n            ];\n            _.each( fieldCollection.models, function( field ){\n\n                if( dataModel.cid == field.cid ) return;\n\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\n\n                var fieldFilter = settingModel.get( 'field_filter' );\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\n                    var bail = false;\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\n                        console.log( value + \":\" + field.get( setting )  );\n                        if( value != field.get( setting ) ) bail = true;\n                    } );\n                    if( bail ) return;\n                }\n\n                var value = field.get( 'key' );\n                switch ( settingModel.get( 'field_value_format' ) ) {\n                    case 'key':\n                        value = field.get( 'key' );\n                        break;\n                    case 'merge_tag':\n                    default:\n                        value = '{field:' + field.get( 'key' ) + '}';\n                }\n\n                options.push({\n                    label: field.get( 'label' ),\n                    value: value\n                });\n            });\n\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\n                _.each( fieldTypes, function( fieldType ){\n\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\n\n                    options.push({\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\n                        value: 'addField:' + fieldType,\n                    });\n                } );\n            }\n\n            settingModel.set( 'options', options );\n        },\n\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\n\n            if( 'field-select' != model.get( 'type' ) ) return;\n\n            var name = model.get( 'name' );\n            var value = dataModel.get( name );\n\n            if( ! value ) return;\n\n            var rubble = value.split( ':' );\n\n            if( 'addField' != rubble[0] ) return;\n\n            this.openDrawer = 'addField';\n            this.filterDrawer = rubble[1];\n\n            dataModel.set( name, '' );\n\n            this.switchDomain = true;\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\n        },\n\n        SwitchToFieldsDomain: function() {\n            if( this.switchDomain ) {\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\n                this.switchDomain = null;\n            }\n        },\n\n        autoOpenDrawer: function() {\n            if( this.openDrawer ) {\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\n                this.openDrawer = null;\n            }\n        },\n\n        filterDrawerContents: function() {\n            if( this.filterDrawer ) {\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\n                this.filterDrawer = null;\n            }\n        }\n    });\n\n    return controller;\n} );\n","/**\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\n *\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\n *\n * @package Ninja Forms builder\n * @subpackage Action Settings\n * @copyright (c) 2016 WP Ninjas\n * @author Kyle B. Johnson\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n    return Marionette.Object.extend( {\n\n        /**\n         * A reference list of Field List setting models.\n         */\n        fieldListSettings: [],\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\n        },\n\n        /**\n         * Build a reference list of Field List setting models for later reference.\n         *\n         * @param settingModel\n         */\n        registerFieldListSettings: function( settingModel ){\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\n        },\n\n        /**\n         * Field List settings contain field keys in the setting names.\n         * When a field key changes, so too must the Field List setting name.\n         *\n         * @param fieldModel\n         */\n        updateFieldListSettingKeys: function( fieldModel ){\n\n            // We are only interested in field key changes.\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\n\n            var oldKey = fieldModel._previousAttributes.key;\n            var newKey = fieldModel.changed.key;\n\n            /*\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\n             *\n             * Each setting of each action model must be checked against each registered Field List setting.\n             */\n            var that = this;\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\n                _.each( actionModel.attributes, function( value, setting ) {\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\n                    _.each( that.fieldListSettings, function( prefix ) {\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\n                        actionModel.set( prefix + '-' + newKey, oldValue );\n                        actionModel.set( prefix + '-' + oldKey, 0 );\n                        lastChanged = oldKey;\n                    });\n                });\n            });\n        },\n\n        /**\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\n         *\n         * @param settingModel\n         * @returns {*}\n         */\n        getSettingChildView: function( settingModel ) {\n\n            /**\n             * Dynamically build field-list settings as needed for the view.\n             */\n\n            // Filter fields based on the field_types setting property.\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\n            });\n\n            // Map fields into setting definitions.\n            var settings = _.map( fields, function( field ) {\n                return {\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\n                    type: 'toggle',\n                    label: field.get( 'label' ),\n                    width: 'full'\n                };\n            });\n\n            settingModel.set( 'settings', new settingCollection( settings ) );\n\n            // return the child view.\n            return fieldsetView;\n        },\n\n    });\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n *\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingHTML',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\n        },\n\n        init: function( settingModel, dataModel ) {\n\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\n\n            // Listen to a setting change inside of the dataModel.\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\n        },\n\n        update: function( dataModel, changedSettingValue ) {\n\n            // Mirror the default value setting value.\n            dataModel.set( this.get( 'name' ), changedSettingValue );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingColor',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // We don't want to re-render this setting type when the data changes.\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\n            // We want to close any color pickers before we close our styling tab or drawer.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\n        },\n\n        initColorPicker: function( settingModel, dataModel, view ) {\n\n            var name = settingModel.get( 'name' );\n            var el = jQuery( view.el ).find( 'input' );\n\n            jQuery( el ).wpColorPicker( {\n                change: function( event, ui ){\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\n                }\n            } );\n        },\n\n        setRenderFalse: function() {\n            return false;\n        },\n\n        closeColorPickers: function( settingModel, dataModel, view ) {\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for the app to start.\n *\n * If the form is a new form, then highlight the Add New submenu item.\n * Otherwise, append an Edit Form submenu for context.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeMenu',[], function() {\n    var controller = Marionette.Object.extend({\n\n        editFormText: '',\n\n        initialize: function () {\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\n        },\n\n        changeMenu: function () {\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n            if ( this.isNewForm( form.id ) ) {\n                this.highlightAddNew();\n            } else {\n                this.appendEditForm();\n            }\n        },\n\n        isNewForm: function( form_id ) {\n            return isNaN( form_id );\n        },\n\n        highlightAddNew: function() {\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\n        },\n\n        /**\n         * Append 'Edit Form'\n         * When editing a form, add an 'Edit Form' submenu item to\n         *   the WordPress Admin Dashboard menu, specifically under\n         *   the Ninja Forms Menu Item and after the 'Add New' item.\n         */\n        appendEditForm: function() {\n            // Singleton check. Only add this menu item one time.\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length > 0 ) return;\n\n            var editFormLinkText, editFormLink, editFormListItem;\n\n            // Create the 'Edit Form' submenu item.\n            editFormLinkText = document.createTextNode(this.editFormText);\n            editFormLink = document.createElement(\"a\");\n            editFormLink.appendChild(editFormLinkText);\n\n            editFormListItem = document.createElement(\"li\");\n            editFormListItem.appendChild(editFormLink);\n            editFormListItem.classList.add(\"current\");\n\n            // Remove the `current` class from any existing list items.\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n\n            // Insert the 'Edit Form' item after the 'Add New' item;\n            jQuery( 'a[href=\"admin.php?page=ninja-forms#new-form\"]' ).parent().after( editFormListItem );\n        },\n\n        formPublish: function( response ) {\n            if ( 'publish' !== response.action ) return false;\n            this.changeMenu();\n        }\n    });\n\n    return controller;\n});\n\n","/**\n * When we click on a domain link, close the mobile menu.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks on our app menu.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\n\t\t},\n\n\t\tcloseMobileMenu: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Add a jBox notice to the screen.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\n\t\t\tthis.notices = {};\n\t\t},\n\n\t\taddNotice: function( key, msg, options ) {\n\n\t\t\tvar appDefaults = {\n\t\t\t\tcontent: msg,\n\t\t\t\tcolor: 'green',\n\t\t\t\tzIndex:10000000,\n\t\t\t\tconstructOnInit: true,\n\t\t\t\tstack: true,\n\t\t\t\tanimation: {\n\t\t\t\t\topen: 'flip',\n\t\t\t\t\tclose: 'flip'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar mobileDefaults = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: 'center',\n\t\t\t\t\ty: 'top'\n\t\t\t\t},\n\t\t\t\tanimation: {\n\t\t\t\t\topen:'slide:top',\n\t\t\t\t\tclose:'slide:left'\n\t\t\t\t},\n\t\t\t\tautoClose: 2000,\n\t\t\t\toffset: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 55\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar desktopDefaults = {\n\t\t\t\tattributes: {\n\t\t\t\t\tx: 'left',\n\t\t\t\t\ty: 'bottom'\n\t\t\t\t},\n\t\t\t\tautoClose: 4000\n\t\t\t};\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar defaults = mobileDefaults;\t\n\t\t\t} else {\n\t\t\t\tvar defaults = desktopDefaults;\n\t\t\t}\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\n\n\t\t\tvar options = jQuery.extend( defaults, options );\n\t\t\t// console.log( options );\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\n\t\t},\n\n\t\tcloseNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].close();\n\t\t\t}\n\t\t},\n\n\t\topenNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].open();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/unloadCheck',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\n\t\t},\n\n\t\tmaybePrompt: function( model ) {\n\t\t\t// If our app is clean, don't show a warning.\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn 'You have unsaved changes.';\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\n * for custom display of form fields. i.e. layout rows.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our formContent view filter array.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.saveFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t     * Listen for requests to add formContent filters.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddSaveFilter: function( callback, priority ) {\n\t\t\tthis.saveFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetSaveFilters: function() {\n\t\t\treturn this.saveFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles filters for our main content gutter views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our gutter view filter array.\n\t\t\t */\n\t\t\tthis.leftFilters = [];\n\t\t\tthis.rightFilters = [];\n\t\t\t/*\n\t\t     * Listen for requests to add gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our content gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\n\t\t},\n\n\t\taddLeftFilter: function( callback, priority ) {\n\t\t\tthis.leftFilters[ priority ] = callback;\n\t\t},\n\n\t\taddRightFilter: function( callback, priority ) {\n\t\t\tthis.rightFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLeftFilters: function() {\n\t\t\treturn this.leftFilters;\n\t\t},\n\n\t\tgetRightFilters: function() {\n\t\t\treturn this.rightFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\n\t\t},\n\n\t\tcloneCollectionDeep: function( collection ) {\n\t\t\tvar models = [];\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\n\t\t\t_.each( collection.models, function( model ) {\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\t\tmodels.push( newModel );\n\t\t\t} );\n\t\t\t// Create a new instance of our collection\n\t\t\treturn new collection.constructor( models, collection.options );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Tracks which keys have been pressed.\n * Currently only used by fields to see if they should duplicate or delete on click.\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackKeyDown',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tkeys: [],\n\n\t\tinitialize: function() {\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Track keydowns and store the keys pressed.\n\t\t\t */\n\t\t\t\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\n\t\t\t\tthat.keyDown( e, that );\n\t\t\t} );\n\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\n\t\t\t\tthat.keyUp( e, that );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Get the keys currently being pressed, if any\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\n\t\t},\n\n\t\tkeyDown: function( e, context ) {\n\t\t\t/*\n\t\t\t * Add our keycode to our keys array.\n\t\t\t */\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\n\t\t},\n\n\t\tkeyUp: function( e, context ) {\n\t\t\t/*\n\t\t\t * Remove our keycode from our keys array.\n\t\t\t */\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\n\t\t\t\tdelete context.keys[ e.keyCode ];\n\t\t\t}\n\t\t},\n\n\t\tgetKeyDown: function() {\n\t\t\treturn this.keys;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Initialize the perfectscroll jQuery plugin\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/perfectScroll',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tmovedPos: false,\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init the main view, init our perfectscroll\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\n\n\t\t\t/*\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\n\t\t},\n\n\t\tinitPerfectScroll: function( view ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\n\t\t\t\t\tsuppressScrollX: true\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\n\t\t},\n\n\t\tmoveRail: function() {\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\n\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\n\t\t\t\n\t\t},\n\n\t\tresetRail: function() {\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisplay: false\n\t\t},\n\n\t\tinitialize: function( options ) {\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingGroupModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Returns a new setting group collection.\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for a new setting group collection\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a new instance of the setting group collection.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return backbone.collection\n\t\t */\n\t\tgetNewSettingGroupCollection: function() {\n\t\t\treturn SettingGroupCollection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.0.30\n */\ndefine( 'controllers/app/settingMedia',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // When the media button is clicked, open the media manager.\n            this.listenTo( nfRadio.channel( 'setting-type-media' ), 'click:extra', this.clickExtra );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            var textEl = jQuery( e.target ).parent().find( '.setting' );\n\n            if ( jQuery( e.target ).hasClass( 'open-media-manager' ) ) {\n                // If the frame already exists, re-open it.\n                if ( this.meta_image_frame ) {\n                    this.meta_image_frame.open();\n                    return;\n                }\n\n                // Sets up the media library frame\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n                    title: 'Select a file',\n                    button: { text:  'insert' }\n                });\n\n                var that = this;\n\n                // Runs when an image is selected.\n                this.meta_image_frame.on('select', function(){\n                    // Grabs the attachment selection and creates a JSON representation of the model.\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n                    textEl.val( media_attachment.url ).change();\n                });\n\n                // Opens the media library frame.\n                this.meta_image_frame.open();\n            }\n        },\n    });\n\n    return controller;\n} );\n","/**\n * Model for our field type\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field type models. \n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeModel,\n\t\ttype: false,\n\n\t\tinitialize: function( models, options ) {\n\t\t\t_.each( options, function( option, key ) {\n\t\t\t\tthis[ key ] = option;\n\t\t\t}, this );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Model that represents our field type section on the add new field drawer.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tclasses: ''\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeSectionModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\n *\n * 1) Create our settings sections config\n * 2) Loops over our preloaded data and adds that to our field type collection\n *\n * Also responds to requests for data about field types\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/types',[\n\t\t'models/app/typeCollection',\n\t\t'models/fields/typeSectionCollection'\n\t],\n\tfunction(\n\t\tTypeCollection,\n\t\tSectionCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Config for our settings sections\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\n\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\n\n\t\t\t// Listen to clicks on field types\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\n\t\t},\n\n\t\tregisterSection: function( typeModel ) {\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\n\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetFieldType: function( id ) {\n        \treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the entire field type collection\n         *\n         * @since  3.0\n         * @param  string \t\t\t\tid \t[description]\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetTypeCollection: function( id ) {\n        \treturn this.collection;\n        },\n\n        /**\n         * Add a field type to our fields sortable when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addField: function( e ) {\n\t\t\tvar type = jQuery( e.target ).data( 'id' );\n\n\t\t\tif( e.shiftKey ){\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\treturn;\n\t\t\t}\n\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\ttype: type,\n\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\n\t\t\t});\n\n\t\t\tconsole.log( fieldModel );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\n\n\t\t\t// Re-Draw the Field Collection\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.sections;\n        },\n\n        /**\n         * Return our saved fields\n         *\n         * @since  3.0\n         * @return backbone.collection\n         */\n        getSavedFields: function() {\n        \tthis.sections.get( 'saved' );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles the logic for our field type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the dragging of our field staging area\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start and stop of our field staging dragging\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\n\t\t},\n\n\t\t/**\n\t\t * When the user starts dragging the staging area, we have to:\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\n\t\t * replace our helper with the stacked \"x fields\" template.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles most things related to our staging area:\n * 1) Creates a collection\n * 2) Listens for requests to CRUD items from the collection\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our staged fields collection\n\t\t\tthis.collection = new stagingCollection();\n\t\t\t// Respond to requests related to our staging area.\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\n\t\t\t// Listen to our remove staged field click event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\n\t\t\t// Listen to our event that fires just before a drawer is closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\n\t\t},\n\n\t\tgetStagingCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our staging area\n\t\t * \n\t\t * @since 3.0\n\t\t * @param string type Type of field we're adding\n\t\t * @return tmpID\n\t\t */\n\t\taddStagedField: function( type, silent ) {\n\t\t\tvar silent = silent || false;\n\t\t\t// Get our type model from the string.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\n\t\t\t// Object that will be added to our staging collection.\n\t\t\tvar data = {\n\t\t\t\tid: tmpID,\n\t\t\t\t// i.e. firstname, textbox, etc.\n\t\t\t\tslug: fieldType.get( 'type' ),\n\t\t\t\t// i.e. First Name, Textbox, etc.\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\n\t\t\t\t// i.e. calendar, envelope, etc.\n\t\t\t\ticon: fieldType.get( 'icon' )\n\t\t\t}\n\t\t\t// \n\t\t\tvar model = this.collection.add( data );\n\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * Remove a field from staging\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te     \tEvent\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\n\t\t * @return void\n\t\t */\n\t\tremoveStagedField: function( e, model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\n\t\t},\n\n\t\t/**\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tbeforeCloseDrawer: function() {\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\n\t\t\t\t// Get our field collection.\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n\t\t\t\tvar fields = [];\n\t\t\t\t// Loop through our staging collection\n\t\t\t\t_.each( this.collection.models, function( model ) {\n\t\t\t\t\t// Get a tmp ID for our new field.\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t\t\t// Create an object that can be added as a model.\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\n\t\t\t\t\t// Add our new field.\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Field',\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: fieldCollection\n\t\t\t\t\t}\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\t\n\t\t\t\t} );\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t// Empty the staging collection\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t\t// Sort our fields.\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\t\t},\n\n\t\t/**\n\t\t * Sort our staging area by the 'order' attribute.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tsortStagedFields: function() {\n\t\t\t// Get our staged fields sortable.\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t// Loop through our models\n\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t// Search our order array for this field.\n\t\t\t\tvar search = field.get( 'id' );\n\t\t\t\tvar pos = order.indexOf( search );\n\t\t\t\t// Update our staged field model with the new order.\n\t\t\t\tfield.set( 'order', pos );\n\t\t\t} );\n\t\t\t// Sort our staging collection.\n\t\t\tthis.collection.sort();\n\t\t},\n\n\t\tclearStagedFields: function() {\n\t\t\tthis.collection.reset();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our staged fields sortable.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// Listen to our sortable events\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\n\t\t},\n\n\t\t/**\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI item\n\t\t * @return void\n\t\t */\n\t\treceiveStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add an active class to our sortable when a field type item is dragged\n\t\t * \n\t\t * @since 3.0\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable when the field type item is dropped.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te  event\n\t\t * @param  Object \tui jQuery UI Element\n\t\t * @return void\n\t\t */\n\t\toverStagedFields: function( e, ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\n\t\t\t\tthis.currentHelper = ui.helper \n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).show();\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Filters our field type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our field types in the add new field drawer\n\t\t * \n\t\t * Takes a search string and finds any field types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterFieldTypes: function( search, e ) {\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n        \t\tvar filtered = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filtered array.\n        \t\t */\n        \t\t_.each( this.filterCollection( search ), function( model ) {\n        \t\t\tfiltered.push( model.get( 'id' ) );\n        \t\t} );\n\n        \t\t// Create a new Field Type Section collection with the filtered array.\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\n\t\t\t\t{ \n\t\t\t\t\tid: 'filtered',\n\t\t\t\t\tnicename: 'Filtered Fields',\n\t\t\t\t\tfieldTypes: filtered\n\t\t\t\t}\n\t\t\t\t] );\n                \n                // Declare array of fields to hide.\n                var hiddenFields = nfRadio.channel( 'app' ).request( 'update:hiddenFields' ) || [];\n\n                // Search our results of hidden fields.\n                for ( var i = filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).length -1; i >= 0; i-- ) {\n                    var target = hiddenFields.indexOf( filteredSectionCollection.models[ 0 ].get( 'fieldTypes' )[ i ] );\n                    // If we find any...\n                    if ( -1 < target ) {\n                        // Remove them from the collection.\n                        filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).splice( i, 1 );\n                    }\n                }\n\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\n        \t\t\tif ( 0 < filtered.length ) {\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our field type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search ) {\n        \tsearch = search.toLowerCase();\n        \t// Get our list of field types\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles all the actions/functions related to our main field sortable.\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/sortable',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\n\t\t\t\n\t\t\t/*\n\t\t\t * Handles all the events fired by our sortable:\n\t\t\t * receive - dropped from type button or staging\n\t\t\t * over - dragging within or over the sortable\n\t\t\t * out - leaving the sortable\n\t\t\t * stop - stopped sorting/dragging\n\t\t\t * start - started sorting/dragging\n\t\t\t * update - stopped sorting/dragging and order has changed\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\n\t\t},\n\n\t\t/**\n\t\t * Add the active class to our sortable so that its border is blue.\n\t\t * \n\t\t * @since 3.0\n\t\t * @return void\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Fires when we drop a field type button or staging onto our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\treceiveFieldsSortable: function( ui ) {\n\t\t\t/*\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\n\t\t\t */ \n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\n\t\t\t\t// Get our type string\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\t// Add a field (returns the tmp ID )\n\t\t\t\tvar tmpID = this.addField( type, false );\n\t\t\t\t/*\n\t\t\t\t * Update our helper id to the tmpID.\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\n\t\t\t\t */ \n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\t// Trigger a drop field type event.\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\n\t\t\t\tvar that = this;\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\t\t// Get our current field order.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t\t} else { // Sortable is empty\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Get the index of our droped element.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\n\t\t\t\t// Loop through each staged fields model and insert a field.\n\t\t\t\tvar tmpIDs = [];\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\n\t\t\t\t\t// Add this newly created field to our order array.\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\n\t\t\t\t} );\n\n\t\t\t\t// Remove our dropped element from our order array.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\t\t\t\torder.splice( insertedAt, 1 );\n\t\t\t\t// Sort our fields\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field.\n\t\t * Builds the object necessary to add a field to the field model collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \ttype   field type\n\t\t * @param  boolean \tsilent add silently\n\t\t * @return string \ttmpID\n\t\t */\n\t\taddField: function( type, silent ) {\n\t\t\t// Default to false\n\t\t\tsilent = silent || false;\n\t\t\t// Get our field type model\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Get our tmp ID\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t// Add our field\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toverfieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t// String type\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\n\t\t\t\t// Get our field type model.\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\t// Get our field type nicename.\n\t\t\t\tvar label = fieldType.get( 'nicename' );\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t// Get our fieldwidth.\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\n\t\t\t\tthis.currentHelper = ui.helper;\n\t\t\t\t// Update our helper label.\n\t\t\t\tjQuery( ui.helper ).html( label );\n\t\t\t\t// Remove the field type draggable classes and add sortable classes.\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-field-wrap' ).css( { 'width': fieldWidth, 'height': '50px' } );\t\t\t\t\t\t\n\t\t\t\t// Add our hover class if our sortable has been initialized.\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\n\t\t * This returns the item to its pre-over state.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutFieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t/*\n\t\t\t\t * Get our helper clone.\n\t\t\t\t * This will let us access the previous label and classes of our helper.\n\t\t\t\t */ \n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging in the sortable:\n\t\t * remove our opacity setting\n\t\t * remove our ui helper\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopFieldsSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging in the sortable:\n\t\t * add an opacity setting of 0.5\n\t\t * show our item (jQuery hides the original item by default)\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartFieldsSortable: function( ui ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\n\t\t},\n\n\t\t/**\n\t\t * Sort our fields when we change the order.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tupdateFieldsSortable: function( ui, sortable ) {\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\n\n\t\t\t\t// Add our change event to the change tracker.\n\t\t\t\tvar data = { fields: [] };\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\n\t\t\t\t\tvar newPos = field.get( 'order' );\n\t\t\t\t\t\n\t\t\t\t\tdata.fields.push( {\n\t\t\t\t\t\tmodel: field,\n\t\t\t\t\t\tattr: 'order',\n\t\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\t\tafter: newPos\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\t\tdashicon: 'sort'\n\t\t\t\t};\n\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles interactions with our field collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tadding: false,\n\t\tremoving: false,\n\t\t\n\t\tinitialize: function() {\n\t\t\t// Load our field collection from our localized form data\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\n\n\t\t\t/*\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\n\t\t\t * we should run animations in our fields collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\n\t\t},\n\n\t\tgetFieldCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tredrawFieldCollection: function() {\n\t\t\tthis.collection.trigger( 'reset', this.collection );\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\n\t\t\t\t/*\n\t\t\t\t * First we check to see if a key matches what we were sent.\n\t\t\t\t */\t\t\t\t\n\t\t\t\treturn this.collection.findWhere( { key: id } );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\n\t\t\t\t */\n\t\t\t\treturn this.collection.get( id );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \t\t\tfield data to insert\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\n\t\t */\n\t\taddField: function( data, silent, renderTrigger, action ) {\n\n\t\t\t/*\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\n\n\t\t\tsilent = silent || false;\n\t\t\taction = action || '';\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\n\t\t\t\t\tdata.id = this.getTmpFieldID();\n\t\t\t\t}\n\t\t\t\tvar model = new fieldModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\t// console.log( model );\n\n\t\t\t/*\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\n\t\t\t * \n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\n\t\t\t */\n\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\n\t\t\t}\n\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\n\t\t\tif ( renderTrigger ) {\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\n\t\t\t}\n\t\t\tif( 'duplicate' == action ){\n                nfRadio.channel( 'fields' ).trigger( 'render:duplicateField', newModel, action );\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\n\t\t\t\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Update a field setting by ID\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  int \t\tid    field id\n\t\t * @param  string \tname  setting name\n\t\t * @param  mixed \tvalue setting value\n\t\t * @return void\n\t\t */\n\t\tupdateFieldSetting: function( id, name, value ) {\n\t\t\tvar fieldModel = this.collection.get( id );\n\t\t\tfieldModel.set( name, value );\n\t\t},\n\n\t\t/**\n\t\t * Get our fields sortable EL\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\n\t\t * @return void\n\t\t */\n\t\tsortFields: function( order, ui, updateDB ) {\n\t\t\tif ( null == updateDB ) {\n\t\t\t\tupdateDB = true;\n\t\t\t}\n\t\t\t// Get our sortable element\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\n\t\t\t\t// JS ternerary for setting our order\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\n\n\t\t\t\t// Loop through all of our fields and update their order value\n\t\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t\t// Get our current position.\n\t\t\t\t\tvar oldPos = field.get( 'order' );\n\t\t\t\t\tvar id = field.get( 'id' );\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\n\t\t\t\t\t\tvar search = 'field-' + id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar search = id;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the index of our field inside our order array\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\n\t\t\t\t\tfield.set( 'order', newPos );\n\t\t\t\t} );\n\t\t\t\tthis.collection.sort();\n\n\t\t\t\tif ( updateDB ) {\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Delete a field from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteField: function( model ) {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\n\t\t\tthis.removing = true;\n\t\t\tthis.collection.remove( model );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\t\t/**\n\t\t * Return a new tmp id for our fields.\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpFieldID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t},\n\n\t\tgetAdding: function() {\n\t\t\treturn this.adding;\n\t\t},\n\n\t\tsetAdding: function( val ) {\n\t\t\tthis.adding = val;\n\t\t},\n\n\t\tgetRemoving: function() {\n\t\t\treturn this.removing;\n\t\t},\n\n\t\tsetRemoving: function( val ) {\n\t\t\tthis.removing = val;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our repeater option.\n * \n * @package Ninja App builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\terrors: {},\n            max_options: 0,\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// When we add errors to the option row, run a function.\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change the errors on our model, check to see if we should add or remove \n\t\t * the error from the setting that this option is a part of.\n\t\t *\n\t\t * Adding an error to the setting model simply disables the drawer and other\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeErrors: function( model ) {\n\t\t\t/*\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\n\t\t\t */\n\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop through our collection to see if we have any other errors.\n\t\t\t\t */\n\t\t\t\tvar errorsFound = false;\n\t\t\t\t_.each( model.collection.models, function( opt ) {\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\n\t\t\t\t\t\terrorsFound = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errorsFound ) {\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\n\t\t\t\t */\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Model that represents our list options.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: listOptionModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\t// Listen to the 'sort' event\n\t\t\tthis.on( 'sort', this.changeCollection, this );\n\t\t\t// Listen to the 'add' event\n\t\t\tthis.on( 'add', this.addOption, this );\n\t\t\tthis.settingModel = options.settingModel;\n\t\t},\n\n\t\tchangeCollection: function() {\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'sort:options', this );\n\t\t},\n\n\t\taddOption: function( model, collection ) {\n\t\t\tmodel.set( 'settingModel', this.settingModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-error',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error',\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderErrors: function() {\n\t\t\t\t    if ( 'undefined' != typeof that.errors ) {\n    \t\t\t\t\treturn that.errors[ Object.keys( errors )[0] ];\n \t\t\t\t\t} else {\n \t\t\t\t\t\treturn '';\n \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-table-row',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-default-row',\n\t\tid: function() {\n\t\t\treturn this.model.cid;\n\t\t},\n\n\t\tregions: {\n\t\t\terror: '.nf-option-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.settingModel = data.settingModel;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.collection = data.collection;\n\t\t\tthis.columns = data.columns;\n\t\t\tthis.parentView = data.parentView;\n\t\t\tthis.model.on( 'change:errors', this.renderErrors, this );\n\n\t\t\t// Removed because the re-render was breaking tag insertion for merge tags.\n\t\t\t// this.model.on( 'change', this.render, this );\n\n\t\t\tif ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\n\t\t\t\tthis.template = '#' + this.settingModel.get( 'tmpl_row' );\n\t\t\t}\n\n\t\t\tthis.hasErrors = false;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\t\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tthis.model.off( 'change:errors', this.renderErrors );\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.escape( label ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\t/*\n\t\t\t * We want to unescape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.unescape( label ), { silent: true } );\n\t\t\t}\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( this.model.get( 'new' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'input:first' ).focus();\n\t\t\t\tthis.model.set( 'new', false );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeOption',\n\t\t\t'click .nf-delete': 'deleteOption',\n\t\t\t'keyup': 'keyupOption'\n\t\t},\n\n\t\tchangeOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\n\t\t},\n\n\t\tdeleteOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\n\t\t},\n\n\t\tkeyupOption: function( e ) {\n\t\t\tthis.maybeAddOption( e );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n\t\t},\n\n\t\tmaybeAddOption: function( e ) {\n\t\t\tif ( 13 == e.keyCode && 'calculations' != this.settingModel.get( 'name' ) ) {\n\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\n\t\t\t\tjQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n\t\t\t}\n\t\t},\n\n\t\trenderErrors: function() {\n\t\t\t\n\t\t\t// if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\n\t\t\t// \treturn false;\n\t\t\t// }\n\n\t\t\t/*\n\t\t\t * We don't want to redraw the entire row, which would remove focus from the eq textarea,\n\t\t\t * so we add and remove error classes manually.\n\t\t\t */\n\t\t\tif ( 0 == Object.keys( this.model.get( 'errors' ) ) ) {\n                if ( this.hasErrors ) {\n\t\t\t\t    this.error.empty();\n\t\t\t\t    jQuery( this.el ).removeClass( 'nf-error' );\n                }\n\t\t\t} else {\n\t\t\t\tthis.hasErrors = true;\n\t\t\t\tthis.error.show( new ErrorView( { model: this.model } ) );\n\t\t\t\tjQuery( this.el ).addClass( 'nf-error' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\tgetColumns: function() {\n\t\t\t\t\treturn that.columns;\n\t\t\t\t},\n\t\t\t\trenderFieldSelect: function( dataID, value ){\n\t\t\t\t\tvar initialOption, select, emptyContainer, label;\n\n\t\t\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.label = '--';\n\n\t\t\t\t\tselect = document.createElement( 'select' );\n\t\t\t\t\tselect.classList.add( 'setting' );\n\t\t\t\t\tselect.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n\t\t\t\t\tfields.each( function( field ){\n\t\t\t\t\t\tvar option = document.createElement( 'option' );\n\t\t\t\t\t\toption.selected = ( value == field.get( 'key' ) );\n\t\t\t\t\t\toption.value = field.get( 'key' );\n\t\t\t\t\t\toption.label = field.get( 'label' );\n\t\t\t\t\t\tselect.appendChild( option );\n\t\t\t\t\t});\n\n                    label = document.createElement( 'label' );\n                    label.classList.add( 'nf-select' );\n                    label.appendChild( select );\n\n\t\t\t\t\t// Select Lists need an empty '<div></div>' for styling purposes.\n\t\t\t\t\temptyContainer = document.createElement( 'div' );\n\t\t\t\t\tlabel.appendChild( emptyContainer );\n\n\t\t\t\t\t// The template requires a string.\n\t\t\t\t\treturn label.innerHTML;\n\t\t\t\t},\n\t\t\t\trenderOptions: function( column, value ) {\n\n\t\t\t\t\tif( 'undefined' == typeof that.options.columns[ column ] ) return;\n\n\t\t\t\t\tvar select = document.createElement( 'select' );\n\t\t\t\t\t\n\t\t\t\t\t_.each( that.options.columns[ column ].options, function( option ){\n\t\t\t\t\t\tvar optionNode = document.createElement( 'option' );\n                        if ( value === option.value ) {\n                        \toptionNode.setAttribute( 'selected', 'selected' );\n                        }\n                        optionNode.setAttribute( 'value', option.value );\n                        optionNode.setAttribute( 'label', option.label );\n                        select.appendChild( optionNode );\n\t\t\t\t\t});\n\n\t\t\t\t\t// The template only needs the options.\n\t\t\t\t\treturn select.innerHTML;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-wrap',\n\t\tchildView: listOptionView,\n\t\temptyView: listEmptyView,\n\t\treorderOnSort: false,\n\n\t\tinitialize: function( data ) {\n\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\n\t\t\tthis.collection = optionCollection;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'added:option', this.maybeHideNew );\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'removed:option', this.maybeHideNew );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\n\t\t\t\thandle: '.handle',\n\t\t\t\thelper: 'clone',\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\topacity: 0.95,\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\n\t\t\t\t}\n\t\t\t} );\n            that.maybeHideNew( that.collection );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\n\t\t},\n\n\t\tonAttach: function() {\n            \n\t\t\tvar importLink = jQuery( this.el ).find( '.nf-open-import-tooltip' );\n\t\t\tvar jBox = jQuery( importLink ).jBox( 'Tooltip', {\n                title: '<h3>Please enter your options below:</h3>',\n                content: jQuery( this.el ).find( '.nf-import-options' ),\n                trigger: 'click',\n                closeOnClick: 'body',\n                closeButton: 'box',\n                offset: { x: 20, y: 0 },\n                addClass: 'import-options',\n\n                onOpen: function() {\n                \tvar that = this;\n                \tsetTimeout( function() { jQuery( that.content ).find( 'textarea' ).focus(); }, 200 );\n                }\n            } );\n\n\t\t\tjQuery( this.el ).find( '.nf-import' ).on( 'click', { view: this, jBox: jBox }, this.clickImport );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderHeaders: function() {\n\t    \t\t\tvar columns, beforeColumns, afterColumns;\n\n\t    \t\t\tbeforeColumns = document.createElement( 'div' );\n\n\t    \t\t\tcolumns = document.createElement( 'span' );\n\t    \t\t\tcolumns.appendChild( beforeColumns );\n\n\t    \t\t\t_.each( this.columns, function( col ) {\n\t    \t\t\t\tvar headerText, headerContainer;\n\n\t    \t\t\t\t// Use a fragment to support HTML in the col.header property, ie Dashicons.\n                        headerText = document.createRange().createContextualFragment( col.header );\n\t    \t\t\t\theaderContainer = document.createElement( 'div' );\n\t    \t\t\t\theaderContainer.appendChild( headerText );\n\n\t    \t\t\t\tcolumns.appendChild( headerContainer );\n\t    \t\t\t} );\n\n                    afterColumns = document.createElement( 'div' );\n                    columns.appendChild( afterColumns );\n\n\t\t\t\t\treturn columns.innerHTML;\n\t\t\t\t},\n\n\t    \t\trenderSetting: function() {\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderFieldsetClasses: function() {\n\t\t\t\t\treturn that.model.get( 'name' );\n\t\t\t\t},\n\n\t\t\t\tcurrencySymbol: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-add-new': 'clickAddOption',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n        \n        maybeHideNew: function( collection ) {\n\t\t\tif( 'undefined' == typeof collection.settingModel ) return false;\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= ( limit ) ) {\n                jQuery(this.el).find('.nf-add-new').addClass('disabled');\n            } else {\n                jQuery(this.el).find('.nf-add-new').removeClass('disabled');\n            }\n        },\n\n\t\tclickAddOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\n\t\t},\n\n\t\tclickImport: function( e ) {\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\n\t\t\t/*\n\t\t\t * Return early if we have no strings.\n\t\t\t */\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\te.data.jBox.close();\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\n\t\t\t/*\n\t\t\t * Split our value based on new lines.\n\t\t\t */\n\n\t\t\tvar lines = value.split(/\\n/);\n\t\t\tif ( _.isArray( lines ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop over \n\t\t\t\t */\n\t\t\t\t_.each( lines, function( line ) {\n\t\t\t\t\tvar row = line.split( ',' );\n\t\t\t\t\tvar label = row[0];\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( label, { separator: '-' } );\n\t\t\t\t\tvar calc = row[2] || '';\n\n\t\t\t\t\tlabel = label.trimLeft().trimRight();\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\n\t\t\t\t\t/*\n\t\t\t\t\t * Add our row to the collection\n\t\t\t\t\t */\n\t\t\t\t\tvar model = e.data.view.collection.add( { label: row[0], value: value, calc: calc } );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'field',\n\t\t\t\t\t\tlabel: row[0],\n\t\t\t\t\t\tchange: 'Option Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\t\t\tnfRadio.channel( 'option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\n\t\t\t\t}, this );\n\t\t\t\t/*\n\t\t\t\t * Set our state to unclean so that the user can publish.\n\t\t\t\t */\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * TODO: Error Handling Here\n\t\t\t\t */\n\t\t\t}\n\t\t\ttextarea.val( '' );\n\t\t\te.data.jBox.close();\n\t\t},\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles tasks associated with our option-repeater.\n * \n * Return our repeater child view.\n *\n * Also listens for changes to the options settings.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for the childView for list type fields.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t\n\t\t\t// Listen for changes to our list options.\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\n\n\t\t\t// Respond to requests related to our list options sortable.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\n\t\t\n\t\t\t/**\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\n\t\t},\n\n\t\t/**\n\t\t * Update an option value in our model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te          event\n\t\t * @param  backbone.model \tmodel      option model\n\t\t * @param  backbone.model \tdataModel\n\t\t * @return void\n\t\t */\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\n\t\t\tif ( 'selected' == name ) {\n\t\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\t\tvar value = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t}\n\t\t\t\n\t\t\tvar before = model.get( name );\n\t\t\t\n\t\t\tmodel.set( name, value );\n\t\t\t// Trigger an update on our dataModel\n\t\t\tthis.triggerDataModel( model, dataModel );\n\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t},\n\n\t\t/**\n\t\t * Add an option to our list\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\taddOption: function( collection, dataModel ) {\n\t\t\tvar modelData = {\n\t\t\t\torder: collection.length,\n\t\t\t\tnew: true,\n\t\t\t\toptions: {}\n\t\t\t};\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= limit ) {\n                return;\n            }\n\t\t\t_.each( collection.settingModel.get( 'columns' ), function( col, key ) {\n\t\t\t\tmodelData[ key ] = col.default;\n\n\t\t\t\tif( 'undefined' != typeof col.options ){\n\t\t\t\t\tmodelData.options[ key ] = col.options;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tvar model = new listOptionModel( modelData );\n\t\t\tcollection.add( model );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'added:option', collection );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Delete an option from our list\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.model \t\tmodel       list option model\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\tdeleteOption: function( model, collection, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\n\t\t\t// Add our field deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\n\t\t\t\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\n\t\t\t\t\t\t\tdataModel.model = newModel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tcollection.remove( model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'removed:option', collection );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\ttriggerDataModel: function( model, dataModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\n\t\t},\n\n\t\t/**\n\t\t * Return our list composite view to the setting collection view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tsettings model\n\t\t * @return void\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn listCompositeView;\n\t\t},\n\n\t\t/**\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\n\t\t * @param  backbone.view \tsetting  \tSetting view\n\t\t * @return void\n\t\t */\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\tvar data = {\n\t\t\t\tcollection: setting.collection,\n\t\t\t\tobjModels: []\n\t\t\t};\n\n\t\t\t_.each( newOrder, function( cid, index ) {\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\n\t\t\t\toptionModel.set( 'order', index );\n\t\t\t\tvar newPos = index;\n\n\t\t\t\tdata.objModels.push( {\n\t\t\t\t\tmodel: optionModel,\n\t\t\t\t\tattr: 'order',\n\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\tafter: newPos\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t\n\t\t\tsetting.collection.sort( { silent: true } );\n\t\t\t\n\t\t\tvar label = {\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\n\t\t},\n\n\t\t/**\n\t\t * When we stop sorting our list options, reset our item opacity.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t},\n\n\t\t/**\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Objects ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t},\n\n\t\t/**\n\t\t * Convert settings from an array/object to a collection/model\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model dataModel\n\t\t * @param  Backbone.Model settingModel\n\t\t * @return void\n\t\t */\n\t\tconvertSettings: function( dataModel, settingModel ) {\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a field currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n            _.each( fieldCollection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t\t\n\t\t\t// Responds to requests for our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\n        },\n\n        dropCreditCardField: function( fieldModel ) {\n\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\n\n                var order = fieldModel.get( 'order' );\n\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n                    var newField = {\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                        type: type,\n                        label: fieldType.get( 'nicename' ),\n                        order: order\n                    };\n\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\n                });\n            }\n\n        },\n\n        stageCreditCardField: function( model ) {\n\n            if( 'creditcard' == model.get( 'slug' ) ) {\n\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n                    nfRadio.channel('fields').request('add:stagedField', type );\n                });\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual List Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\n            \n            /*\n             * When we init our model, convert our options from an array of objects to a collection of models.\n             */\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\n        },\n\n        updateOptionLabel: function( e, model, dataModel, settingModel, optionView ) {\n\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\n\n            if( model.get( 'manual_value' ) ) return;\n\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\n\n            model.set( 'value', value );\n            model.trigger( 'change', model );\n\n            // Set focus on value input\n            jQuery( optionView.el ).find( '[data-id=\"value\"]' ).focus().select();\n        },\n\n        updateOptionValue: function( e, model, dataModel, settingModel, optionView ) {\n\n            var findWhere = _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } );\n            if( 'undefined' == typeof findWhere ) return;\n            if( 'list' != findWhere.parentType ) return;\n\n            model.set( 'manual_value', true );\n            \n            // Set focus on calc input\n            jQuery( optionView.el ).find( '[data-id=\"calc\"]' ).focus().select();\n        },\n\n        convertOptions: function( fieldModel ) {\n            /*\n             * Our options are stored in our database as objects, not collections.\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n             */ \n            var options = fieldModel.get( 'options' );\n\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\n\n            if ( false == options instanceof Backbone.Collection ) {\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\n                options.add( fieldModel.get( 'options' ) );\n                fieldModel.set( 'options', options, { silent: true } );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldPassword',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.addField );\n        },\n\n        addField: function( model ) {\n\n            if( 'password' == model.get( 'type' ) ) {\n\n                var order = model.get( 'order' );\n\n                var confirm = this.insertField( 'passwordconfirm', order + 1 );\n\n                confirm.set( 'confirm_field', model.get( 'key' ) );\n            }\n        },\n\n        insertField: function( type, order ) {\n            var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n            var newField = {\n                id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                type: type,\n                label: fieldType.get( 'nicename' ),\n                order: order\n            };\n\n            return nfRadio.channel('fields').request('add', newField );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldQuantity',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\n\t\t\t\tsettingModel.set( 'options', productFields );\n\t\t\t}\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldShipping',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\n\t\t},\n\n\t\taddMask: function( settingModel, dataModel, view ) {\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\n\t\t\t\tjQuery( this ).autoNumeric({\n\t\t\t\t\taSign: '$', // TODO: Use form setting\n\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\taDec: decimalPoint\n\t\t\t\t});\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When we add a new field, update its key.\n *\n * When we change the key, update any refs to the key.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/key',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we add a field, update its key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\n\n\t\t\t// When we edit a label, update our key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\n\t\t},\n\n\t\t/**\n\t\t * Add a key to our new field model.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param backbone.model model new field model\n\t\t * @return void\n\t\t */\n\t\tnewFieldKey: function( model ) {\n\t\t\tvar d = new Date();\n\t\t\tvar n = d.valueOf();\n\t\t\tvar key = this.slugify( model.get( 'type' ) + '_' + n );\n\n\t\t\tmodel.set( 'key', key, { silent: true } );\n\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\n\t\t\t}\n\t\t},\n\n\t\tupdateLabel: function( model ) {\n\n\t\t\t/*\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\n\t\t\t */\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\n\t\t\t\t/*\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tdelete model.changed.label;\n\t\t\t\tvar d = new Date();\n\t\t\t\tvar n = d.valueOf();\n\t\t\t\tvar key = this.slugify( model.get( 'label' ) + '_' + n );\n\t\t\t\tmodel.set( 'key', key );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, find any merge tags using the key and update them.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model model field model\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( dataModel ) {\n\t\t\tvar key = dataModel.get( 'key' );\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tkeyUp: function( e, settingModel, dataModel ) {\n\t\t\tdataModel.set( 'manual_key', true );\n\t\t\tthis.settingModel = settingModel;\n\t\t\tvar key = jQuery( e.target ).val();\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tsetError: function( key, dataModel ) {\n\t\t\tvar error = false;\n\t\t\tif ( '' == jQuery.trim( key ) ) {\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\n\t\t\t} else if ( key != key.toLowerCase() ) {\n\t\t\t\terror = 'Field keys must be lowercase.';\n\t\t\t} else if ( key != key.replace( ' ', '_' ) ) {\n\t\t\t\terror = 'Field keys must cannot use spaces. Separate with \"_\" instead.';\n\t\t\t} else if ( '_' == key.slice( -1 ) ) {\n\t\t\t\terror = 'Field keys cannot end with a \"_\"';\n\t\t\t} else if ( key != this.slugify( key ) ) {\n\t\t\t\terror = 'Invalid Format.';\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\n\t\t\t}\n\n\t\t\tif ( error ) {\n\t\t\t\tthis.settingModel.set( 'error', error );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\n\t\t\t\tthis.settingModel.set( 'error', false );\n\t\t\t}\n\t\t},\n\n\t\tkeyExists: function( key, dataModel ) {\n\t\t\tvar newKey = this.slugify( key );\n\t\t\tif ( 0 != newKey.length ) {\n\t\t\t\tkey = newKey;\n\t\t\t}\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar x = 1;\n\t\t\tvar testKey = key;\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\n\t\t\t\t\ttestKey = key + '_' + x;\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tkey = testKey;\n\n\t\t\treturn key;\n\t\t},\n\n\t\tslugify: function( string ){\n\t\t\treturn jQuery.slugify( string, { separator: '_' } )\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Creates notices for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\n\t\t},\n\n\t\taddStagedField: function( model ) {\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles mobile-specific JS for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start of our sorting.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\n\t\t\t// Listen for when we start sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\n\t\t\t// Listen for when we stop sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\n\t\t},\n\n\t\tinitWiggle: function( view ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tstartWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\n\t\t\t}\n\t\t},\n\n\t\tstopWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/savedFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tignoreAttributes: [\n\t\t\t'editActive',\n\t\t\t'order',\n\t\t\t'saved',\n\t\t\t'jBox'\n\t\t],\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\n\t\t\t// Listen to clicks on our add saved field button.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\n\t\t},\n\n\t\tupdateField: function( dataModel ) {\n\t\t\tif ( dataModel.get( 'saved' ) ) {\n\t\t\t\t\n\t\t\t\tvar modified = false;\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( changedAttributes, function( changed ) {\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\n\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\t\n\t\t\t\tif ( modified ) {\n\t\t\t\t\tdataModel.set( 'saved', false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclickAddSavedField: function( e, dataModel ) {\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\tvar fieldData = modelClone.attributes;\n\t\t\tfieldData.saved = true;\n\n\t\t\tdelete fieldData.jBox;\n\t\t\tdelete fieldData.editActive;\n\t\t\tdelete fieldData.created_at;\n\t\t\tdelete fieldData.order;\n\t\t\tdelete fieldData.id;\n\t\t\tdelete fieldData.formID;\n\t\t\tdelete fieldData.parent_id;\n\t\t\t\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\n\t\t\tvar newType = _.clone( type.attributes );\n\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\n\t\t\tconsole.log( nicename );\n\t\t\tnewType.nicename = nicename;\n\t\t\tfieldData.label = nicename;\n\t\t\tfieldData.nicename = nicename;\n\t\t\tdataModel.set( 'addSavedLoading', true );\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\n\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\tnewType.id = response.data.id;\n\t\t\t\tnewType.nicename = nicename;\n\t\t\t\tnewType.settingDefaults = fieldData;\n\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n\t\t\t\tvar newModel = typeCollection.add( newType );\n\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\n\n\t\t\t\t// dataModel.set( 'type', response.data.id );\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\n\t\t\t\tdataModel.get( 'jBox' ).close();\n\t\t\t\t// dataModel.set( 'saved', true );\n\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a datepicker setting, add our datepicker.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\n\t\t},\n\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\n\t\t\tvar dateObject = pikadayResponsive( jQuery( view.el ).find( '.setting' )[0] );\t\t\t\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\t// console.log( 'render!' );\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our action type collection\n *\n * Also responds to requests for data about action types\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Instantiate \"installed\" actions collection.\n\t\t\t */\n\t\t\tthis.installedActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'installed';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'installed',\n\t\t\t\t\tnicename: nfi18n.installed\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.availableActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'available';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'available',\n\t\t\t\t\tnicename: nfi18n.available\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\t// Search our installed actions first\n\t\t\tvar type = this.installedActions.get( id );\n\t\t\tif ( ! type ) {\n\t\t\t\ttype = this.availableActions.get( id );\n\t\t\t}\n        \treturn type;\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetInstalledActions: function() {\n        \treturn this.installedActions;\n        },\n\n        /**\n         * Return the available action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetAvailableActions: function() {\n        \treturn this.availableActions;\n        },\n\n        /**\n         * Add a field type to our staging area when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addStagedField: function( e ) {\n        \tvar type = jQuery( e.target ).data( 'id' );\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.fieldTypeSections;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form action.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Action',\n\t\t\tobjectDomain: 'actions',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\n\n\t\t\tif( 'undefined' == typeof actionType ) return;\n\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\n\t\t\tvar that = this;\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( ! that.get( key ) ) {\n\t\t\t\t\tthat.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * actions\n\t\t\t * action-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action models. \n * This is the actual action data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionModel,\n\t\tcomparator: 'order',\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addAction, this );\n\t\t\tthis.on( 'remove', this.removeAction, this );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new action property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddAction: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed action property.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveAction: function( model ) {\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles interactions with our actions collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\n\t\t\tthis.collection.tmpNum = 1;\n\n\t\t\tif ( 0 != this.collection.models.length ) {\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( this.collection.models, function( action ) {\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\n\t\t\t\t\t\tthat.collection.tmpNum++;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetAction: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\t/**\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( data, silent ) {\n\t\t\tsilent = silent || false;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tvar model = new actionModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\tthis.collection.add( model, { silent: silent } );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Delete a action from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteAction: function( model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\n\t\t/**\n\t\t * Return a new tmp id for our actions.\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a action currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - Edit Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our actions.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our actions collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n            _.each( actionCollection.models, function( action ) {\n\t\t\t\taction.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - Action Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/emailFromSetting',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'actionSetting-from_address' ), 'update:setting', this.updateFromAddress );\n        },\n\n        updateFromAddress: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var value = dataModel.get( 'from_address' ).trim();\n\n            if( '{wp:admin_email}' == value ) {\n                return settingModel.set( 'warning', false );\n            }\n\n            if( value && ( ! this.isValidEmail( value ) ) || nfAdmin.home_url_host != value.replace(/.*@/, \"\") ){\n                return settingModel.set( 'warning', nfi18n.errorInvalidEmailFromAddress );\n            }\n\n            return settingModel.set( 'warning', false );\n        },\n\n        isValidEmail: function(email) {\n            return /^.+@.+\\..+$/.test(email);\n        }\n    });\n    return controller;\n} );\n","/**\n * Handles clicks and dragging for our action types.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\n\t\t},\n\n\t\t/**\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( type ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\n\t\t\t\ttype: type.get( 'id' ),\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\n\t\t\t}\n\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Action',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/typeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our action type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type droppable.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/droppable',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\n\t\t},\n\n\t\tdropActionType: function( e, ui ) {\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our action type\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action type models. \n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionTypeModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Filters our action type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our action types in the add new action drawer\n\t\t * \n\t\t * Takes a search string and finds any action types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterActionTypes: function( search, e ) {\n\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n\n        \t\tvar filteredInstalled = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\n        \t\t */\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\n        \t\t\tfilteredInstalled.push( model );\n        \t\t} );\n\n        \t\tvar filteredAvailable = [];\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\n        \t\t\tfilteredAvailable.push( model );\n        \t\t} );\n\n        \t\t// Create a new Action Type Section collection with the filtered array.\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\n        \t\tnewInstalled.slug = 'installed';\n        \t\tnewInstalled.nicename = 'Installed';\n\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\n        \t\tnewAvailable.slug = 'available';\n        \t\tnewAvailable.nicename = 'Available';\n\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\n        \t\tif ( e.addObject ) {\n        \t\t\tif ( 0 < newInstalled.length ) {\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our action type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search, collection ) {\n        \tsearch = search.toLowerCase();\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/newsletterList',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\n        },\n\n        defaultFields: function( settingModel, dataModel ) {\n            this.maybeRenderFields( dataModel, settingModel );\n            this.maybeRenderGroups( dataModel, settingModel );\n        },\n\n        registerFieldsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\n        },\n\n        registerGroupsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\n        },\n\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\n\n            var data = {\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\n                security: nfAdmin.ajaxNonce\n            };\n\n            var that = this;\n            jQuery( e.srcElement ).addClass( 'spin' );\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\n            }).always( function() {\n                jQuery( e.srcElement ).removeClass( 'spin' );\n            });\n        },\n\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\n            settingModel.set( 'options', lists );\n            settingView.render();\n        },\n\n        maybeRenderFields: function( dataModel, settingModel ) {\n\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        maybeRenderGroups: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        updateFieldMapping: function( fields ) {\n           var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( fields, function( field ){\n\n                settings.add({\n                    name: field.value,\n                    type: 'textbox',\n                    label: field.label,\n                    width: 'full',\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n        updateInterestGroups: function( groups ) {\n            var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( groups, function( group ){\n\n                settings.add({\n                    name: group.value,\n                    type: 'toggle',\n                    label: group.label,\n                    width: 'full',\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n    });\n\n    return controller;\n} );\n\n","/**\n * Listens to field deletion, removing any merge tags that reference the field.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/deleteFieldListener',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init an action model, register a listener for field deletion.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'init:actionModel', this.registerListener );\n\t\t},\n\n\t\tregisterListener: function( actionModel ) {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.maybeUpdateSettings );\n\t\t},\n\n\t\tmaybeUpdateSettings: function( fieldModel ) {\n\t\t\tvar newObject, filteredCollection,\n\t\t\t\tfieldMergeTag = '{field:' + fieldModel.get( 'key' ) + '}';\n\t\t\t\n\t\t\t/*\n\t\t\t * Loop through our action attributes to see if the field mergetag exists in our action.\n\t\t\t *\n\t\t\t * If it does:\n\t\t\t * \t- Replace the field mergetag in strings with ''.\n\t\t\t * \t- Remove any items with the field merge tag if they are in an array.\n\t\t\t */\n\t\t\t_.each( this.attributes, function( attr, key ) {\n\t\t\t\tif ( _.isString( attr ) ) {\n\t\t\t\t\t// If our attribute is a string, replace any instances of the field merge tag with an empty string.\n\t\t\t\t\tthis.set( key, attr.replace( fieldMergeTag, '' ) );\n\t\t\t\t} else if ( _.isArray( attr ) ) {\n\t\t\t\t\t// If our attribute is an array, search the contents for field merge tag and remove items that match.\n\t\t\t\t\t_.each( attr, function( val, index ) {\n\t\t\t\t\t\tif ( _.isString( val ) ) {\n\t\t\t\t\t\t\t// If val is a string, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'string replace' );\n\t\t\t\t\t\t} else if ( _.isArray( val ) ) {\n\t\t\t\t\t\t\t// If val is an array, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'array search' );\n\t\t\t\t\t\t} else if ( _.isObject( val ) ) {\n\t\t\t\t\t\t\t// If val is a object, search it for the field mergetag.\n\t\t\t\t\t\t\tnewObject = _.mapObject( val, function( value, key ) {\n\t\t\t\t\t\t\t\tif ( _.isString( value ) ) {\n\t\t\t\t\t\t\t\t\tif ( -1 != value.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t\t\t\t\t\tattr.splice( index, 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tthis.set( key, attr );\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this );\n\t\t\t\t} else if ( attr instanceof Backbone.Collection ) {\n\t\t\t\t\t// This is a Backbone Collection, so we need to loop through the models and remove any that have an attribute containing the field merge tag.\n\t\t\t\t\tvar filteredCollection = attr.filter( function ( model ) {\n\t\t\t\t\t\t// Make sure that EVERY model attribute does NOT reference the field merge tag.\n\t\t\t\t\t    return _.every( model.attributes, function( val ) {\n\t\t\t\t\t    \t/*\n\t\t\t\t\t    \t * Currently only handles items that are one-level deep.\n\t\t\t\t\t    \t * TODO: Add support for further nesting of values.\n\t\t\t\t\t    \t */\n\t\t\t\t\t    \tif ( _.isString( val ) ) {\n\t\t\t\t\t    \t\tif ( -1 != val.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t    \t\t\treturn false;\n\t\t\t\t\t    \t\t}\n\t\t\t\t\t    \t}\n\t\t\t\t\t    \treturn true;\n\t\t\t\t\t    });;\n\t\t\t\t\t});\n\t\t\t\t\t// Update our key with the filtered collection value.\n\t\t\t\t\tthis.set( key, filteredCollection );\n\t\t\t\t}\n\t\t\t}, this );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our number fields and total fields to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'field' != settingModel.get( 'total_type' ) ) return false;\n\n\t\t\tvar fields = this.getFields( settingModel );\n\n\t\t\t/*\n\t\t\t * If the field in the payment total isn't in our field list, add it.\n\t\t\t *\n\t\t\t * Remove the merge tag stuff to get the field key.\n\t\t\t */\n\t\t\t\n\t\t\tvar field_key = dataModel.get( 'payment_total' );\n\t\t\tfield_key = field_key.replace( '{field:', '' );\n\t\t\tfield_key = field_key.replace( '}', '' );\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', field_key );\n\n\t\t\tif ( 'undefined' != typeof fieldModel ) {\n\t\t\t\tif ( 'undefined' == typeof _.findWhere( fields, { value: dataModel.get( 'payment_total' ) } ) ) {\n\t\t\t\t\tfields.push( { label: fieldModel.get( 'label' ), value: '{field:' + fieldModel.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Update our fields options.\n\t\t\t */\n\t\t\tsettingModel.set( 'options', fields );\n\t\t\t\n\t\t},\n\n\t\tgetFields: function( settingModel ) {\n\t\t\tvar returnFields = [ settingModel.get( 'default_options' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'number' == field.get( 'type' ) || 'total' == field.get( 'type' ) || 'checkbox' == field.get( 'type' ) ) {\n\t\t\t\t\treturnFields.push( { label: field.get( 'label' ), value: '{field:' + field.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturnFields = _.sortBy( returnFields, function( field ) { return field.label } );\n\n\t\t\treturn returnFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our calculations to the data model.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentCalculations',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n            if ( 'calc' == settingModel.get( 'total_type' ) ) {\n                var calcModels = nfRadio.channel( 'app' ).request( 'get:formModel' );\n                var calcs = this.getCalcs( calcModels, settingModel );\n\n                settingModel.set( 'options', calcs );\n            }\n        },\n\n        getCalcs: function( calcModels, settingModel ) {\n            var returnCalcs = [ settingModel.get( 'default_options' ) ];\n\n            // Update our dataModel with all of our product fields.\n            var calcs = calcModels.get( 'settings' ).get( 'calculations' );\n\n            _.each( calcs.models, function( calc ) {\n                returnCalcs.push( { label: calc.get( 'name' ), value: '{calc:' + calc.get( 'name' ) + '}' } );\n            } );\n\n            returnCalcs = _.sortBy( returnCalcs, function( calc ) { return calc.label } );\n\n            return returnCalcs;\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we haven't set a total_type, then set the total_type to fixed.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFixed',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n\n            if ( 'payment_total_type' != settingModel.get( 'name' ) || _.isEmpty( dataModel.get( 'payment_total' ) ) ) return false;\n\n            /*\n             * If we don't have a payment total type and we have a payment total, set our total type to the appropriate total type.\n             */\n            if ( ( 'undefined' == dataModel.get( 'payment_total_type' ) || _.isEmpty( dataModel.get( 'payment_total_type' ) ) ) ) {\n                /*\n                 * If payment_total is a field merge tag, set payment_total_type to \"field\"\n                 */\n\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) ) {\n                    dataModel.set( 'payment_total_type', 'field' );\n                } else if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total_type', 'calc' );\n                } else {\n                    dataModel.set( 'payment_total_type', 'fixed' );\n                }   \n            }\n        },\n\n    });\n\n    return controller;\n} );\n","/**\n * When we init a collect payment action, listen for calc changes\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPayment',[], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init a collect payment action model, register a listener for calc changes.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions-collectpayment' ), 'init:actionModel', this.initCollectPayment );\n\t\t\t\n\t\t\t/*\n\t\t\t * Before we render our total field, we may want to update its value.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.maybeClearTotal );\n\t\t},\n\n\t\t/**\n\t\t * When a collect payment action is init'd, register a listener for calc changes and update our data appropriately.\n\t\t * @since  3.1.7\n\t\t * @param  {backbone.model} actionModel \n\t\t * @return {void}\n\t\t */\n\t\tinitCollectPayment: function( actionModel )  {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'calcs' ), 'update:calcName', this.maybeUpdateTotal );\n        },\n\n\t\t//TODO: Add in an error that will not allow drawer to close until total type and total value is selected.\n\t\tmaybeError: function(){},\n\n\t\tmaybeUpdateTotal: function( optionModel, oldName ) {\n\t\t\t/*\n\t\t\t * We have changed a calculation. Make sure that 'calc' is our payment total type.\n\t\t\t */\n\t\t\tif ( 'calculation' != this.get( 'payment_total_type' ) ) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Check our payment_total setting for the old merge tag and replace it with the new one.\n\t\t\t */\n\t\t\tvar newVal = this.get( 'payment_total' ).replace( '{calc:' + oldName + '}', '{calc:' + optionModel.get( 'name' ) + '}' );\n\t\t\tthis.set( 'payment_total', newVal );\n\t\t},\n\n\t\tmaybeClearTotal: function( settingModel, dataModel, view ) {\n            /*\n             * If our payment_total is a merge tag, clear it when we select the \"fixed\" option.\n             */\n            if ( 'fixed' == dataModel.get( 'payment_total_type' ) ) {\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) || -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total', '' );\n                }\n            }\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our form setting type collection\n *\n * Also responds to requests for data about form setting types\n *\n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/types',[\n\t\t'models/app/typeCollection'\n\t],\n\tfunction(\n\t\tTypeCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetCollection: function() {\n        \treturn this.collection;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form settings.\n * \n * @package Ninja Forms builder\n * @subpackage Form Settings\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/advanced/settingsModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Form Setting',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.bind( 'change', this.changeSetting, this );\n\t\t\t/*\n\t\t\t * Check to see if we have any setting defaults to set.\n\t\t\t */\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\n\t\t\t_.each( formSettings.models, function( settingModel ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\n\t\t\t\t}\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\n\t\t\t}, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Handles interactions with our form settings collection.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\n\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\n\t\t},\n\n\t\tgetSettings: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tupdateSetting: function( name, value, silent ) {\n\t\t\tsilent = silent || false;\n\t\t\tthis.model.set( name, value, { silent: silent } );\n\t\t},\n\n\t\tgetSetting: function( name ) {\n\t\t\treturn this.model.get( name );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\n\t\t\t\t\t\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\n\n\t\t\t// Responds to requests for our setting collection\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from form settings currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n            _.each( collection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens for clicks on our form settings sections.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\n\t\t},\n\n\t\tclickEdit: function( e, typeModel ) {\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\n\t\t\tif ( ! preventClose ) {\n\t\t\t\ttypeModel.set( 'editActive', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Makes sure that calculations don't reference calculations with a lower order.\n *\n * For example, our first caclulation can't reference the second, but the second can reference the first.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/calculations',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\n\t\t\t/*\n\t\t\t * Same thing for when our calculation option is updated\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\n\t\t\t/*\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\n\t\t\t * references.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\n\t\t},\n\n\t\tkeyUp: function( e, optionModel ) {\n\t\t\t// Get our current value\n\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t// Check to see if we're editing a name or eq\n            var id = jQuery( e.target ).data( 'id' );\n\t\t\tif( 'name' == id ) { // We are editing the name field\n\t\t\t\t// Check to see if our name already exists.\n\t\t\t\tthis.checkName( value, optionModel );\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\t} else if( 'eq' == id ) { // We're editing the eq\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\n\t\t\t\tthis.checkEQ( value, optionModel );\n\t\t\t} else if( 'dec' == id ) { // We're editing the dec\n                // Check to see that we have a non-negative integer\n                this.checkDec( value, optionModel );\n            }\n\t\t},\n\n\t\tupdateCalc: function( optionModel ) {\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\tthis.checkDec( optionModel.get( 'dec' ), optionModel );\n\n\t\t\tBackbone.Radio.channel( 'calcs' ).trigger( 'update:calc', optionModel );\n\t\t},\n\n\t\tsortCalc: function( optionModel, setting ) {\n\t\t\tthis.checkAllCalcs( setting.collection );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if a calc name exists.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \t\t\tname        calc name to check\n\t\t * @param  backbone.model \toptionModel \n\t\t * @return void\n\t\t */\n\t\tcheckName: function( name, optionModel, silent ) {\n\t\t\tsilent = silent || true;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t// Search our calc collection for our name\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\n\n\t\t\t// If the name that was passed is the same as our current name, return false.\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\tfound = [];\n\t\t\t}\n\n\t\t\t// If our name exists, add an errors to the option model\n\t\t\tif ( 0 != found.length ) {\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\n\t\t\t} else {\n\t\t\t\tvar oldName = optionModel.get( 'name' );\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\n\t\t\t\tnfRadio.channel( 'calcs' ).trigger( 'update:calcName', optionModel, oldName );\n\t\t\t\tdelete errors.nameExists;\n\t\t\t}\n\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\teq          our equation\n\t\t * @param  backbone.model \toptionModel\n\t\t * @return void\n\t\t */\n\t\tcheckEQ: function( eq, optionModel ) {\n\t\t\t// Get any current errors on our optionModel\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t/*\n\t\t\t * We're looking for two errors:\n\t\t\t * - Calculations that are below the current one can't be processed.\n\t\t\t * - Calculations can't refer to themselves.\n\t\t\t */ \n\t\t\tvar errorSelfRef = false;\n\t\t\tvar errorFutureCalc = false;\n\t\t\t// Regex that searches for {calc:key}\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t/*\n\t\t\t * Calcs will be an array like:\n\t\t\t * ['{calc:test}'], ['{calc:another}']\n\t\t\t * \n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\n\t\t\t */\n\t\t\tif ( calcs ) {\n\t\t\t\tvar calculations = optionModel.collection;\n\t\t\t\t// Maps a function to each item in our calcs array.\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our optionModel from our calculations collection.\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\n\t\t\t\t\t\terrorSelfRef = true;\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\n\t\t\t\t\t\t// If the calc is after this one, set an error. \n\t\t\t\t\t\terrorFutureCalc = true;\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// If we didn't find any self ref errors, remove the key.\n\t\t\tif ( ! errorSelfRef ) {\n\t\t\t\tdelete errors.selfRef;\n\t\t\t}\n\n\t\t\t// If we didn't find any future calc errors, remove the key.\n\t\t\tif ( ! errorFutureCalc ) {\n\t\t\t\tdelete errors.futureCalc;\n\t\t\t}\n\n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\n\t\t},\n\n        /**\n         * Ceck to see if a dec is an integer value.\n         * \n         * @since 3.1\n         * @param string            dec         our decimal value\n         * @param backbone.model    optionModel\n         * @return void\n         */\n        checkDec: function( dec, optionModel ) {\n            // If dec isn't defined, bail...\n            if( 'undefined' === typeof(dec) ) return false;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n            /**\n             * We're looking for one error:\n             * - dec is not a non-negative integer.\n             */\n            var errorNonIntDec = false;\n            \n            // Get our target value and see if it matches what we got.\n            var checked = Math.abs( parseInt( dec.trim() ) );\n            if ( dec.trim() !== '' && checked.toString() !== dec.trim() ) {\n                errorNonIntDec = true;\n                errors.nonIntDec = 'Decimals must be a non-negative integer!';\n            }\n            \n            // If our dec value is a non-negative integer.\n            if ( ! errorNonIntDec ) {\n                delete errors.nonIntDec;\n            }\n            \n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n            \n        },\n        \n\t\tcheckAllCalcs: function( collection ) {\n\t\t\tvar that = this;\n\t\t\tcollection.models.map( function( opt ) {\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\n                that.checkDec( opt.get( 'dec' ), opt );\n\t\t\t} );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Loads all of our controllers using Require JS.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine(\n\t'controllers/loadControllers',[\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\t'controllers/app/remote',\n\t\t'controllers/app/drawer',\n\t\t'controllers/app/drawerConfig',\n\t\t'controllers/app/domainConfig',\n\t\t'controllers/app/data',\t\t\n\t\t'controllers/app/drawerToggleSettingGroup',\n\t\t'controllers/app/updateDB',\n\t\t'controllers/app/formData',\n\t\t'controllers/app/previewLink',\n\t\t'controllers/app/menuButtons',\n\t\t'controllers/app/trackChanges',\n\t\t'controllers/app/undoChanges',\n\t\t'controllers/app/publishResponse',\n\t\t'controllers/app/changeDomain',\n\t\t'controllers/app/pushstate',\n\t\t'controllers/app/hotkeys',\n\t\t'controllers/app/cleanState',\n\t\t'controllers/app/coreUndo',\n\t\t'controllers/app/cloneModelDeep',\n\t\t'controllers/app/getSettingChildView',\n\t\t'controllers/app/changeSettingDefault',\n\t\t'controllers/app/fieldset',\n\t\t'controllers/app/toggleSetting',\n\t\t'controllers/app/itemControls',\n\t\t'controllers/app/mergeTags',\n\t\t'controllers/app/mergeTagBox',\n\t\t'controllers/app/itemSettingFill',\n\t\t'controllers/app/confirmPublish',\n\t\t'controllers/app/rte',\n\t\t'controllers/app/settingFieldSelect',\n\t\t'controllers/app/settingFieldList',\n\t\t'controllers/app/settingHTML',\n\t\t'controllers/app/settingColor',\n\t\t'controllers/app/changeMenu',\n\t\t'controllers/app/mobile',\n\t\t'controllers/app/notices',\n\t\t'controllers/app/unloadCheck',\n\t\t'controllers/app/formContentFilters',\n\t\t'controllers/app/formContentGutterFilters',\n\t\t'controllers/app/cloneCollectionDeep',\n\t\t'controllers/app/trackKeyDown',\n\t\t'controllers/app/perfectScroll',\n\t\t'controllers/app/getNewSettingGroupCollection',\n\t\t'controllers/app/settingMedia',\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\t'controllers/fields/types',\n\t\t'controllers/fields/fieldTypeDrag',\n\t\t'controllers/fields/stagingDrag',\n\t\t'controllers/fields/staging',\n\t\t'controllers/fields/stagingSortable',\n\t\t'controllers/fields/filterTypes',\n\t\t'controllers/fields/sortable',\n\t\t'controllers/fields/data',\n\t\t'controllers/app/optionRepeater',\n\t\t'controllers/fields/editActive',\n\t\t'controllers/fields/fieldSettings',\n\t\t'controllers/fields/fieldCreditCard',\n\t\t'controllers/fields/fieldList',\n\t\t'controllers/fields/fieldPassword',\n\t\t'controllers/fields/fieldQuantity',\n\t\t'controllers/fields/fieldShipping',\n\t\t'controllers/fields/key',\n\t\t'controllers/fields/notices',\n\t\t'controllers/fields/mobile',\n\t\t'controllers/fields/savedFields',\n\t\t'controllers/fields/fieldDatepicker',\n\t\t'controllers/fields/fieldDisplayCalc',\n\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\t'controllers/actions/types',\n\t\t'controllers/actions/data',\n\t\t'controllers/actions/actionSettings',\n\t\t'controllers/actions/editActive',\n\t\t'controllers/actions/emailFromSetting',\n\t\t'controllers/actions/addActionTypes',\n\t\t'controllers/actions/typeDrag',\n\t\t'controllers/actions/droppable',\n\t\t'controllers/actions/filterTypes',\n\t\t'controllers/actions/newsletterList',\n\t\t'controllers/actions/deleteFieldListener',\n\t\t'controllers/actions/collectPaymentFields',\n\t\t'controllers/actions/collectPaymentCalculations',\n\t\t'controllers/actions/collectPaymentFixed',\n\t\t'controllers/actions/collectPayment',\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\t'controllers/advanced/types',\n\t\t'controllers/advanced/data',\n\t\t'controllers/advanced/formSettings',\n\t\t'controllers/advanced/editActive',\n\t\t'controllers/advanced/clickEdit',\n\t\t'controllers/advanced/calculations'\n\t],\n\tfunction(\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\tRemote,\n\t\tDrawer,\n\t\tDrawerConfig,\n\t\tDomainConfig,\n\t\tAppData,\n\t\tDrawerToggleSettingGroup,\n\t\tUpdateDB,\n\t\tFormData,\n\t\tPreviewLink,\n\t\tAppMenuButtons,\n\t\tAppTrackChanges,\n\t\tAppUndoChanges,\n\t\tAppPublishResponse,\n\t\tAppChangeDomain,\n\t\tPushstate,\n\t\tHotkeys,\n\t\tCleanState,\n\t\tCoreUndo,\n\t\tCloneModelDeep,\n\t\tDrawerSettingChildView,\n\t\tChangeSettingDefault,\n\t\tFieldset,\n\t\tToggleSetting,\n\t\tItemControls,\n\t\tMergeTags,\n\t\tMergeTagsBox,\n\t\tItemSettingFill,\n\t\tConfirmPublish,\n\t\tRTE,\n\t\tSettingFieldSelect,\n\t\tSettingFieldList,\n\t\tSettingHTML,\n\t\tSettingColor,\n\t\tChangeMenu,\n\t\tAppMobile,\n\t\tAppNotices,\n\t\tAppUnloadCheck,\n\t\tFormContentFilters,\n\t\tFormContentGutterFilters,\n\t\tCloneCollectionDeep,\n\t\tTrackKeyDown,\n\t\tPerfectScroll,\n\t\tGetNewSettingGroupCollection,\n\t\tSettingMedia,\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\tFieldTypes,\n\t\tFieldTypeDrag,\n\t\tFieldStagingDrag,\n\t\tStagedFieldsData,\n\t\tStagedFieldsSortable,\n\t\tDrawerFilterFieldTypes,\n\t\tMainContentFieldsSortable,\n\t\tFieldData,\n\t\tOptionRepeater,\n\t\tFieldsEditActive,\n\t\tFieldSettings,\n\t\tFieldCreditCard,\n\t\tFieldList,\n\t\tFieldPassword,\n\t\tFieldQuantity,\n\t\tFieldShipping,\n\t\tFieldKey,\n\t\tNotices,\n\t\tFieldsMobile,\n\t\tSavedFields,\n\t\tFieldDatepicker,\n\t\tFieldDisplayCalc,\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\tActionTypes,\n\t\tActionData,\n\t\tActionSettings,\n\t\tActionEditActive,\n\t\tActionEmailFromSetting,\n\t\tActionAddTypes,\n\t\tActionTypeDrag,\n\t\tActionDroppable,\n\t\tActionFilterTypes,\n\t\tActionNewsletterList,\n\t\tActionDeleteFieldListener,\n\t\tActionCollectPaymentFields,\n\t\tActionCollectPaymentCalculations,\n\t\tActionCollectPaymentFixed,\n\t\tActionCollectPayment,\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\tSettingTypes,\n\t\tSettingData,\n\t\tFormSettings,\n\t\tSettingsEditActive,\n\t\tSettingsClickEdit,\n\t\tAdvancedCalculations\n\t\t\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\t\t\t\t/*\n\t\t\t\t * Application controllers\n\t\t\t\t */\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew FormContentGutterFilters();\n\t\t\t\tnew Hotkeys();\n\t\t\t\tnew Remote();\n\t\t\t\tnew Drawer();\n\t\t\t\tnew DrawerConfig();\n\t\t\t\tnew DomainConfig();\n\t\t\t\tnew DrawerToggleSettingGroup();\n\t\t\t\tnew PreviewLink();\n\t\t\t\tnew AppMenuButtons();\n\t\t\t\tnew AppTrackChanges();\n\t\t\t\tnew AppUndoChanges();\n\t\t\t\tnew AppPublishResponse();\n\t\t\t\tnew AppChangeDomain();\n\t\t\t\tnew CleanState();\n\t\t\t\tnew CoreUndo();\n\t\t\t\tnew CloneModelDeep();\n\t\t\t\tnew ItemControls();\n\t\t\t\tnew ConfirmPublish();\n\t\t\t\tnew RTE();\n\t\t\t\tnew SettingFieldSelect();\n\t\t\t\tnew SettingFieldList();\n\t\t\t\tnew SettingHTML();\n\t\t\t\tnew SettingColor();\n\t\t\t\tnew SettingMedia();\n\t\t\t\tnew ChangeMenu();\n\t\t\t\tnew AppMobile();\n\t\t\t\tnew AppNotices();\n\t\t\t\tnew AppUnloadCheck();\n\t\t\t\tnew UpdateDB();\n\t\t\t\tnew CloneCollectionDeep();\n\t\t\t\tnew TrackKeyDown();\n\t\t\t\tnew PerfectScroll();\n\t\t\t\tnew GetNewSettingGroupCollection();\n\t\t\t\t// new Pushstate();\n\t\t\t\t/*\n\t\t\t\t * Fields domain controllers\n\t\t\t\t * \n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\n\t\t\t\t */\n\t\t\t\tnew Fieldset();\n\t\t\t\tnew OptionRepeater();\n\n\t\t\t\tnew FieldTypes();\n\t\t\t\tnew FieldTypeDrag();\n\t\t\t\tnew FieldStagingDrag();\n\t\t\t\tnew StagedFieldsData();\n\t\t\t\tnew StagedFieldsSortable();\n\t\t\t\tnew DrawerFilterFieldTypes();\n\t\t\t\tnew MainContentFieldsSortable();\n\t\t\t\tnew ChangeSettingDefault();\n\t\t\t\tnew ToggleSetting();\n\t\t\t\tnew DrawerSettingChildView();\n\t\t\t\tnew FieldsEditActive();\n\t\t\t\tnew FieldSettings();\n\t\t\t\tnew FieldCreditCard();\n\t\t\t\tnew FieldList();\n\t\t\t\tnew FieldPassword;\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldShipping();\n\t\t\t\tnew FieldKey();\n\t\t\t\tnew Notices();\n\t\t\t\tnew FieldsMobile();\n\t\t\t\tnew SavedFields();\n\t\t\t\tnew FieldDatepicker();\n\t\t\t\tnew FieldDisplayCalc();\n\t\t\t\t/*\n\t\t\t\t * TODO: Actions domain controllers\n\t\t\t\t */\n\t\t\t\tnew ActionNewsletterList();\n\t\t\t\tnew ActionDeleteFieldListener();\n\t\t\t\tnew ActionCollectPaymentCalculations();\n\t\t\t\tnew ActionCollectPayment();\t\t\t\t\n\t\t\t\tnew ActionTypes();\n\t\t\t\tnew ActionData();\n\t\t\t\tnew ActionSettings();\n\t\t\t\tnew ActionEditActive();\n\t\t\t\tnew ActionEmailFromSetting();\n\t\t\t\tnew ActionAddTypes();\n\t\t\t\tnew ActionTypeDrag();\n\t\t\t\tnew ActionDroppable();\n\t\t\t\tnew ActionFilterTypes();\n\t\t\t\tnew ActionCollectPaymentFields();\n\t\t\t\tnew ActionCollectPaymentFixed();\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Settings domain controllers\n\t\t\t\t */\n\t\t\t\tnew SettingTypes();\n\t\t\t\tnew FormSettings();\n\t\t\t\tnew AdvancedCalculations();\n\t\t\t\tnew SettingData();\n\t\t\t\tnew SettingsEditActive();\n\t\t\t\tnew SettingsClickEdit();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\n\t\t\t\t * AppData() was after FormData();\n\t\t\t\t */\n\t\t\t\tnew AppData();\n\t\t\t\tnew FieldData();\n\t\t\t\tnew FormData();\n\t\t\t\tnew MergeTags();\n\t\t\t\tnew MergeTagsBox();\n\t\t\t\tnew ItemSettingFill();\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/fields/fieldItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-field',\n\t\tdoingShortcut: false,\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:required', this.render, this );\n\t\t\tthis.model.on( 'change:id', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:required', this.render );\n\t\t\tthis.model.off( 'change:id', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t\tjQuery( this.el ).disableSelection();\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderClasses: function() {\n\t    \t\t\tvar classes = 'nf-field-wrap';\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t    \t\t},\n\t    \t\trenderRequired: function() {\n\t    \t\t\tif ( 1 == this.required ) {\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\t    \t\tgetFieldID: function() {\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\n\t\t\t\t\t\treturn 'field-' + this.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderIcon: function() {\n\t    \t\t\tvar type, icon;\n\n\t\t\t\t\ttype = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\n\n\t\t\t\t\ticon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'fa', 'fa-' + type.get( 'icon' ) );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'mousedown': 'maybeShortcut',\n\t\t\t'click': 'maybeClickEdit',\n\t\t\t'singletap': 'maybeTapEdit',\n\t\t\t'swipeleft': 'swipeLeft',\n\t\t\t'swiperight': 'swipeRight',\n\t\t\t'tapend': 'tapend'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( this.doingShortcut ) {\n\t\t\t\tthis.doingShortcut = false;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ':focus' ).blur();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tmaybeShortcut: function( e ) {\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\n\t\t\t/*\n\t\t\t * If the shift key isn't held down, return.\n\t\t\t */\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we are pressing D, delete this field.\n\t\t\t */\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\treturn false;\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tmaybeTapEdit: function( e ) {\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tswipeLeft: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\n\t\t},\n\n\t\tswipeRight: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\n\t\t},\n\n\t\ttapend: function( e, touch ) {\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t},\n\n\t\tremove: function(){\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\n\t\t\t\tthis.$el.hide( 'clip', function(){\n\t\t\t\t\tjQuery( this ).remove();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.$el.remove();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our form title.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/formTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-header-form-title',\n\n\t\tinitialize: function() {\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change:title', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderTitle: function(){\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t    \t\t\treturn _.escape( formData.get( 'settings' ).get( 'title' ) );\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\t\t\n\t\t\t// Reply to requests for our empty content view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\n\t\t\n\t\t\t// Reply to requests for our form title view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetMainContentEmpty: function() {\n\t\t\treturn mainContentEmptyView;\n\t\t},\n\n\t\tgetFormTitle: function() {\n\t\t\treturn FormTitleView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","var nfRadio = Backbone.Radio;\n\njQuery( document ).ready( function( $ ) {\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\n\n\t\tvar NinjaForms = Marionette.Application.extend( {\n\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Trigger an event before we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\n\t\t\t\t// Load our controllers.\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\t// Trigger an event after we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\n\n\t\t\t\t// Trigger an event before we load un-instantiated views\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\n\t\t\t\tvar loadViews = new LoadViews();\n\t\t\t\t// Trigger an event after we load un-instantiated views.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\n\t\t\tonStart: function() {\n\t\t\t\tvar builderView = new BuilderView();\n\t\t\t\t// Trigger our after start event.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\n\n\t\t\t\t/*\n\t\t\t\t * If we're on the new forms builder, open the add fields drawer.\n\t\t\t\t */\n\t\t\t\tif ( 0 == nfAdmin.formID ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\n\t} );\n} );\ndefine(\"main\", function(){});\n\n"]}