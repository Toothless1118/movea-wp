{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","models/fieldErrorModel.js","models/fieldErrorCollection.js","models/fieldModel.js","models/fieldCollection.js","models/formErrorModel.js","models/formErrorCollection.js","models/formModel.js","models/formCollection.js","controllers/formData.js","controllers/fieldError.js","controllers/changeField.js","controllers/changeEmail.js","controllers/fieldCheckbox.js","controllers/fieldCheckboxList.js","controllers/fieldRadio.js","controllers/fieldNumber.js","controllers/mirrorField.js","controllers/confirmField.js","controllers/updateFieldModel.js","controllers/submitButton.js","controllers/submitDebug.js","controllers/getFormErrors.js","controllers/validateRequired.js","controllers/submitError.js","controllers/actionRedirect.js","controllers/actionSuccess.js","controllers/fieldSelect.js","controllers/coreSubmitResponse.js","controllers/fieldProduct.js","controllers/fieldTotal.js","controllers/fieldQuantity.js","models/calcModel.js","models/calcCollection.js","controllers/calculations.js","controllers/fieldDate.js","controllers/fieldRecaptcha.js","controllers/fieldHTML.js","controllers/helpText.js","controllers/fieldTextareaRTE.js","controllers/fieldStarRating.js","controllers/fieldTerms.js","controllers/formContentFilters.js","views/fieldItem.js","views/beforeField.js","views/fieldErrorItem.js","views/fieldErrorCollection.js","views/inputLimit.js","views/afterField.js","views/fieldLayout.js","controllers/loadViews.js","controllers/formErrors.js","controllers/submit.js","views/fieldCollection.js","controllers/defaultFilters.js","controllers/uniqueFieldError.js","controllers/loadControllers.js","views/beforeForm.js","views/formErrorItem.js","views/formErrorCollection.js","views/honeyPot.js","views/afterFormContent.js","views/beforeFormContent.js","views/formLayout.js","views/afterForm.js","views/mainLayout.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Backbone","Model","extend","errorModel","Collection","model","fieldErrorCollection","defaults","placeholder","label_pos","classes","reRender","mirror_field","confirm_field","clean","disabled","visible","invalid","initialize","this","set","collection","options","formModel","get","listenTo","nfRadio","channel","resetModel","bind","changeModel","changeValue","trigger","formLoaded","beforeSubmit","addWrapperClass","cl","removeWrapperClass","setInvalid","fieldModel","comparator","models","on","fieldCollection","validateFields","_","each","showFields","invoke","hideFields","FieldCollection","ErrorCollection","beforeForm","afterForm","beforeFields","afterFields","wrapper_class","element_class","hp","fieldErrors","extra","setting","formContentData","formContentLoadFilters","request","sortedArray","without","first","reply","getFieldByKey","addError","removeError","getExtra","addExtra","removeExtra","getForm","key","findWhere","msg","add","errors","remove","extraData","FormModel","FormCollection","Marionette","nfForms","getForms","getField","form","fieldErrorModel","getError","targetID","targetError","changeField","blurField","el","val","radioChannel","emailReg","errorID","onChangeModelValue","emailKeyup","onBlurField","fieldID","emailChange","changeEmailErrorMsg","keyCode","registerRenderClasses","validateRequired","validateModelData","beforeUpdateField","getCalcValue","addClass","closest","find","removeClass","checked","calcValue","customClasses","customLabelClasses","maybeChecked","default_value","register","renderOptions","renderOtherText","selected","filter","opt","savedVal","Array","isArray","html","valueFound","option","isSelected","template","show_other","data","currentValue","calc_value","tmp_opt","Number","calc","parent","optionArray","valueIndex","clone","changeModelValue","updateCheckedClass","attr","maybeMinDefault","validateMinMax","min","$el","parseFloat","max","step","fieldNumberNumMinError","fieldNumberNumMaxError","testValue","Math","round","testStep","fieldNumberIncrementBy","listeningModel","registerMirror","targetModel","registerConfirm","confirmKeyup","confirmModel","formModal","registerConfirmListeners","confirmID","confirmFieldErrorMsg","compareValue","confirmValue","updateField","submitButton","bound","registerHandlers","click","resetLabel","maybeEnable","maybeDisable","processingLabel","size","response","submitDebug","textStatus","jqXHR","formID","debug","debugMessages","document","createElement","message","messageText","createTextNode","appendChild","console","log","getFormErrors","error","field","validateKeyup","customReqValidation","defaultReqValidation","maskPlaceholder","trim","valid","maybeError","validateRequiredField","submitErrors","fields","slug","last","style","show","actionRedirect","halt","redirect","window","location","actions","actionSubmit","success_message","form_id","top_of_success_message","offset","top","bottom_of_success_message","outerHeight","bottom_of_screen","scrollTop","height","top_of_screen","animate","renderOtherAttributes","label","type","otherAttributes","multi_size","settings","clear_complete","reset","hide_complete","renderProductQuantity","renderProduct","product_type","product_use_quantity","that","totalModel","productTotals","registerShipping","onFormLoaded","onChangeProduct","onChangeQuantity","shippingModel","shippingCost","fieldModels","productFields","quantityFields","productID","product","productPrice","updateTotal","productQuantity","newTotal","productField","quantity","toFixed","registerQuantity","changeCalc","targetCalcModel","CalcModel","dec","toString","parseInt","getCalc","CalcCollection","calcs","displayFields","registerCalcs","resetCalcs","nfFrontEnd","use_merge_tags","calculations","fieldType","initDisplayField","updateDisplayFields","init","calcCollection","calcModel","setupCalc","eq","eqValues","match","RegExp","updateCalcFields","replaceKey","mexp","eval","isNumeric","tag","reTag","calcTag","reCalcTag","replaceAllKeys","re","calcName","spans","spanVar","tmpCalcTag","applyLocaleFormatting","number","splitNumber","nfi18n","thousands_sep","formattedNumber","decimal_point","initDatepicker","view","dateFormat","convertDateFormat","dateObject","pikadayResponsive","format","outputFormat","pikadayOptions","yearRange","getYearRange","minDate","getMinDate","maxDate","getMaxDate","firstDay","startOfWeek","setDate","moment","yearRangeStart","yearRangeEnd","Date","initRecaptcha","resetRecaptcha","updateResponse","recaptchaID","grecaptcha","htmlFields","trackedMergeTags","Radio","setupFieldMergeTagTracking","mergeTags","mergeTag","fieldKey","updateFieldMergeTags","htmlFieldModel","initHelpText","jBox","theme","content","initTextareaRTEs","clickExtra","meta_image_frame","currentContext","summernote","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","caret","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","linkButton","context","mediaButton","toolbar","userSettings","uid","buttons","codemirror","lineNumbers","prettifyHtml","callbacks","onChange","linkMenu","next","replaceWith","class","innerHTML","ui","linkDropdown","buttonGroup","button","className","contents","tooltip","fieldTextareaRTEInsertLink","clickLinkButton","toggle","dropdown","children","render","fieldTextareaRTEInsertMedia","openMediaManager","open","wp","media","frames","title","fieldTextareaRTESelectAFile","text","media_attachment","state","toJSON","insertMedia","range","target","focus","textEl","urlEl","isNewWindowEl","hasClass","url","isNewWindow","filename","initRating","renderRatings","rating","number_of_stars","num","htmlFragment","createRange","createContextualFragment","keyUpExtra","currentTarget","addOption","new_option","viewFilters","loadFilters","addViewFilter","addLoadFilter","getViewFilters","getLoadFilters","priority","ItemView","tagName","toggleAriaInvalid","JSON","stringify","onRender","unwrap","setElement","mask","isInteger","isFinite","floor","currencySymbol","autoNumericOptions","digitGroupSeparator","decimalCharacter","autoN_el","AutoNumeric","templateHelpers","renderElement","tmpl","element_templates","renderLabel","renderLabelClasses","renderPlaceholder","customPlaceholder","renderWrapClass","wrapClass","parentType","old_classname","customWrapClass","renderClasses","maybeDisabled","disable_input","maybeDisableAutocomplete","disable_browser_autocomplete","maybeInputLimit","input_limit_type","input_limit","getHelpText","help_text","maybeRenderHelp","check_text_par","shouldRenderHelpText","icon","classList","setAttribute","outerHTML","renderDescText","desc_text","check","checkText","descriptionText","fieldDescription","renderCurrencyFormatting","replacedDecimal","replacedThousands","currency_symbol","events","change .nf-element","keyup .nf-element","click .nf-element","click .extra","blur .nf-element","fieldChange","fieldKeyup","fieldClick","extraClick","fieldBlur","onAttach","fieldErrorItem","CollectionView","childView","updateCount","count","regex","words","wordCount","charCount","limit","currentCount","InputLimitView","changeError","errorEl","errorCollectionView","inputLimitEl","inputLimitView","fieldItem","beforeField","afterField","LayoutView","regions","getTemplate","renderContainerClass","containerClass","desc_pos","container_class","fieldItemView","fieldLayoutView","getFieldItem","getFieldLayout","errorMsg","formErrorsCorrectErrors","omit","registerSubmitHandler","submit","validate","blockingFormErrors","fieldDataDefaults","formData","action","security","ajaxNonce","ajax","adminAjax","cache","success","errorThrown","parseJSON","responseText","fieldLayout","FieldCollectionView","registerDefaultDataFilter","defaultFormContentLoad","defaultFormContentView","currentFieldCollection","resetFields","FormData","FieldError","ChangeField","ChangeEmail","FieldCheckbox","FieldCheckboxList","FieldRadio","FieldNumber","MirrorField","ConfirmField","UpdateFieldModel","SubmitButton","SubmitDebug","GetFormErrors","ValidateRequired","SubmitError","ActionRedirect","ActionSuccess","FieldSelect","CoreSubmitResponse","FieldProduct","FieldTotal","FieldQuantity","Calculations","FieldDate","FieldRecaptcha","FieldHTML","HelpText","FieldTextareaRTE","FieldStarRating","FieldTerms","FormContentFilters","LoadViews","FormErrors","Submit","DefaultFilters","UniqueFieldError","formErrorItem","keyup .nf-field-hp","change .nf-field-hp","honeypotHoneypotError","HoneyPot","onShow","renderFieldsMarkedRequired","required","fieldsMarkedRequired","AfterFormContent","BeforeFormContent","beforeFormContent","formContent","afterFormContent","getEl","hide","formContentViewFilters","formContentView","BeforeForm","FormLayout","AfterForm","responseMsg","formLayout","originalVal","fn","prev","result","change","ready","$","formCollection","LoadControllers","mainLayout","empty","Application","forms","Renderer","urlParameters","object","compact","search","item","nf_resume","restart","onStart","layoutView","evaluate","interpolate","escape","variable","start"],"mappings":"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CA,4BACA,gCACA,yBACA,0BACA,0BACA,2BACA,+BACA,2BACA,0BACA,4BACA,+BACA,0BACA,6BACA,4BACA,0BACA,iCACA,2BACA,yBACA,4BACA,2BACA,wBACA,6BACA,wBACA,uBACA,+BACA,8BACA,yBACA,iCACA,wBACA,yBACA,qBACA,6BACA,gCAEA,SACAyqB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GA+DA,MA7DA7hB,YAAAjH,OAAA8B,QACAgB,WAAA,WAKA,GAAA4lB,GACA,GAAAC,GACA,GAAAC,GAKA,GAAA9B,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAW,GACA,GAAAE,GACA,GAAAC,GACA,GAAAC,GACA,GAAAG,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAK,GAIA,GAAAnC,GACA,GAAAC,GACA,GAAAC,GAEA,GAAAK,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GAEA,GAAAE,GACA,GAAAI,GAEA,GAAAY,GAKA,GAAAX,GACA,GAAAxB,QAQAzqB,EAAA,sBAAA,WCvIA,MANAgL,YAAA0X,SAAA7c,QACA8c,QAAA,aACAxU,SAAA,2BAMAnO,EAAA,yBAAA,WCEA,MAXAgL,YAAA0X,SAAA7c,QACA8c,QAAA,aACAxU,SAAA,sBAEA4U,SAAA,iBASA/iB,EAAA,6BAAA,uBAAA,SAAA8sB,GCRA,MALA9hB,YAAAic,eAAAphB,QACA8c,QAAA,YACAuE,UAAA4F,MAKA9sB,EAAA,oBAAA,WCgBA,MAvBAgL,YAAA0X,SAAA7c,QACA8c,QAAA,aACAxU,SAAA,mBAEAiY,QAC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","file":"front-end.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","define( 'models/fieldErrorModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","define( 'models/fieldErrorCollection',['models/fieldErrorModel'], function( errorModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: errorModel\n\t} );\n\treturn collection;\n} );\n","define( 'models/fieldModel',['models/fieldErrorCollection'], function( fieldErrorCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tplaceholder: '',\n\t\t\tvalue: '',\n\t\t\tlabel_pos: '',\n\t\t\tclasses: 'ninja-forms-field',\n\t\t\treRender: false,\n\t\t\tmirror_field: false,\n\t\t\tconfirm_field: false,\n\t\t\tclean: true,\n\t\t\tdisabled: '',\n\t\t\tvisible: true,\n\t\t\tinvalid: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.set( 'formID', this.collection.options.formModel.get( 'id' ) );\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'reset', this.resetModel );\n\n    \t\tthis.bind( 'change', this.changeModel, this );\n    \t\tthis.bind( 'change:value', this.changeValue, this );\n    \t\tthis.set( 'errors', new fieldErrorCollection() );\n\n    \t\t/*\n\t\t\t * Trigger an init event on two channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:model', this );\n\n\t\t\tif( 'undefined' != this.get( 'parentType' ) ){\n\t\t\t\tnfRadio.channel( this.get( 'parentType' ) ).trigger( 'init:model', this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When we load our form, fire another event for this field.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'loaded', this.formLoaded );\n\t\t\n\t\t\t/*\n\t\t\t * Before we submit our form, send out a message so that this field can be modified if necessary.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'before:submit', this.beforeSubmit );\n\t\t},\n\n\t\tchangeModel: function() {\n\t\t\tnfRadio.channel( 'field-' + this.get( 'id' ) ).trigger( 'change:model', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'change:model', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:model', this );\n\t\t},\n\n\t\tchangeValue: function() {\n\t\t\tnfRadio.channel( 'field-' + this.get( 'id' ) ).trigger( 'change:modelValue', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'change:modelValue', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:modelValue', this );\n\t\t},\n\n\t\taddWrapperClass: function( cl ) {\n\t\t\tthis.set( 'addWrapperClass', cl );\n\t\t},\n\n\t\tremoveWrapperClass: function( cl ) {\n\t\t\tthis.set( 'removeWrapperClass', cl );\n\t\t},\n\n\t\tsetInvalid: function( invalid ) {\n\t\t\tthis.set( 'invalid', invalid );\n\t\t},\n\n\t\tformLoaded: function() {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'formLoaded', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'formLoaded', this );\n\t\t},\n\n\t\tbeforeSubmit: function( formModel ) {\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'before:submit', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'before:submit', this );\n\t\t}\n\n\t} );\n\n\treturn model;\n} );\n\n","define( 'models/fieldCollection',['models/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options;\n            this.on( 'reset', function( fieldCollection ){\n                nfRadio.channel( 'fields' ).trigger( 'reset:collection', fieldCollection );\n            }, this );\n\t\t},\n\n\t\tvalidateFields: function() {\n\t\t\t_.each( this.models, function( fieldModel ) {\n\t\t\t\t// added here for help with multi-part part validation\n\t\t\t\tfieldModel.set( 'clean', false );\n\t\t\t\tnfRadio.channel( 'submit' ).trigger( 'validate:field', fieldModel );\n\t\t\t}, this );\n\t\t},\n\n\t\tshowFields: function() {\n\t\t\tthis.invoke( 'set', { visible: true } );\n            this.invoke( function() {\n                this.trigger( 'change:value', this );\n            });\n\t\t},\n\n\t\thideFields: function() {\n\t\t\tthis.invoke( 'set', { visible: false } );\n            this.invoke( function() {\n                this.trigger( 'change:value', this );\n            });\n\t\t}\n\t} );\n\treturn collection;\n} );\n\n","define( 'models/formErrorModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","define( 'models/formErrorCollection',['models/formErrorModel'], function( errorModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: errorModel\n\t} );\n\treturn collection;\n} );\n","define( 'models/formModel',[\n\t'models/fieldCollection',\n\t'models/formErrorCollection'\n\t], function(\n\t\tFieldCollection,\n\t\tErrorCollection\n\t) {\n\tvar model = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tbeforeForm: '',\n\t\t\tafterForm: '',\n\t\t\tbeforeFields: '',\n\t\t\tafterFields: '',\n\t\t\twrapper_class: '',\n\t\t\telement_class: '',\n\t\t\thp: '',\n\t\t\tfieldErrors: {},\n\t\t\textra: {}\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Loop over settings and map to attributes\n\t\t\t_.each( this.get( 'settings' ), function( value, setting ) {\n\t\t\t\tthis.set( setting, value );\n\t\t\t}, this );\n\n\t\t\tthis.set( 'loadedFields', this.get( 'fields' ) );\n\t\t\tthis.set( 'fields', new FieldCollection( this.get( 'fields' ), { formModel: this } ) );\n\t\t\tthis.set( 'errors', new ErrorCollection() );\n\n\t\t\t/*\n\t\t\t * Send out a radio message so that anyone who wants to filter our content data can register their filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'form' ).trigger( 'before:filterData', this );\n\n\t\t\t/*\n\t\t\t * Set our formContentData to our form setting 'formContentData'\n\t\t\t */\n\t\t\tvar formContentData = this.get( 'formContentData' );\n\n\t\t\t/*\n\t\t\t * The formContentData variable used to be fieldContentsData.\n\t\t\t * If we don't have a 'formContentData' setting, check to see if we have an old 'fieldContentsData'.\n\t\t\t * \n\t\t\t * TODO: This is for backwards compatibility and should be removed eventually. \n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = this.get( 'fieldContentsData' );\n\t\t\t}\n\t\t\t\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\tformContentData = callback( formContentData, this, this );\n\t\t\t\n\t\t\tthis.set( 'formContentData', formContentData );\n\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'init:model', this );\n\n\t\t\t// Fields\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:fieldByKey', this.getFieldByKey, this );\n\n\t\t\t// Form Errors\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'add:error',    this.addError, this    );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'remove:error', this.removeError, this );\n\n\t\t\t// Extra Data\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:extra',    this.getExtra,    this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'add:extra',    this.addExtra,    this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'remove:extra', this.removeExtra, this );\n\t\t\n\t\t\t// Respond to requests to get this model.\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:form', \t this.getForm, \t   this );\n\n\t\t\tnfRadio.channel( 'form' ).trigger( 'loaded', this );\n\t\t\tnfRadio.channel( 'form' ).trigger( 'after:loaded', this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'loaded', \t this );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Fields\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\tgetFieldByKey: function( key ) {\n\t\t\treturn this.get( 'fields' ).findWhere( { key: key } );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Form Errors\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\taddError: function( id, msg ) {\n\t\t\tvar errors = this.get( 'errors' );\n\t\t\terrors.add( { id: id, msg: msg } );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'add:error', this, id, msg );\n\t\t},\n\n\t\tremoveError: function( id ) {\n\t\t\tvar errors = this.get( 'errors' );\n\t\t\tvar errorModel = errors.get( id );\n\t\t\terrors.remove( errorModel );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'remove:error', this, id );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Extra Data\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\tgetExtra: function( key ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\tif( 'undefined' == typeof key ) return extraData;\n\t\t\treturn extraData[ key ];\n\t\t},\n\n\t\taddExtra: function( key, value ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\textraData[ key ] = value;\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'add:extra', this, key, value );\n\t\t},\n\n\t\tremoveExtra: function( key ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\tdelete extraData[ key ];\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'remove:extra', this, key );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Get this form\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\t\tgetForm: function() {\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\treturn model;\n} );\n","define( 'models/formCollection',['models/formModel'], function( formModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: formModel\n\t} );\n\treturn collection;\n} );\n","/*\n * Handles setting up our form.\n *\n * Holds a collection of our fields.\n * Replies to requests for field data.\n * Updates field models.\n */\ndefine('controllers/formData',['models/formModel', 'models/formCollection', 'models/fieldCollection', 'models/formErrorCollection'], function( FormModel, FormCollection, FieldCollection, ErrorCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Setup our field collections.\n\t\t\t */\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Initialize our form collection (incase we have multiple forms on the page)\n\t\t\t */\n\t\t\tthis.collection = new FormCollection( nfForms );\n\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'loaded', this.collection );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'forms:loaded', this.collection );\n\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:form', this.getForm, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:forms', this.getForms, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t},\n\n\t\tgetForm: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tgetForms: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tvar model = false;\n\t\t\t\n\t\t\t_.each( this.collection.models, function( form ) {\n\t\t\t\tif ( ! model ) {\n\t\t\t\t\tmodel = form.get( 'fields' ).get( id );\t\n\t\t\t\t}\t\t\t\n\t\t\t} );\n\t\t\treturn model;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldError',['models/fieldErrorModel'], function( fieldErrorModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add:error', this.addError );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:error', this.removeError );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:error', this.getError );\n\t\t},\n\n\t\taddError: function( targetID, id, msg ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\n\t\t\tif( 'undefined' == typeof model ) return;\n\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\terrors.add( { 'id': id, 'msg' : msg } );\n\t\t\tmodel.set( 'errors', errors );\n\t\t\tmodel.trigger( 'change:errors', model );\n\t\t\tmodel.set( 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:error', model, id, msg );\n\t\t},\n\n\t\tremoveError: function( targetID, id ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\n\t\t\tif( 'undefined' == typeof model ) return;\n\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\tvar targetError = errors.get( id );\n\t\t\tif ( 'undefined' != typeof targetError ) {\n\t\t\t\terrors.remove( targetError );\n\t\t\t\tmodel.set( 'errors', errors );\n\t\t\t\tmodel.trigger( 'change:errors', model );\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:error', model, id );\n\t\t\t}\n\t\t},\n\n\t\tgetError: function( targetID, id ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\tvar targetError = errors.get( id );\n\t\t\tif ( 'undefined' != targetError ) {\n\t\t\t\treturn targetError;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Controller responsible for replying to a Radio request stating that a field has been changed.\n *\n * This controller sends out a message to the field-specific channel, the field type channel,\n * and the public fields channel so that the data model can be updated.\n */\n\ndefine('controllers/changeField',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Reply to our request for changing a field.\n\t\t\t */\n\t\t\tnfRadio.channel( 'nfAdmin' ).reply( 'change:field', this.changeField );\n\n\t\t\t/*\n\t\t\t * If we blur our field, set the model attribute of 'clean' to false.\n\t\t\t * 'clean' tracks whether or not the user has every interacted with this element.\n\t\t\t * Some validation, like required, uses this to decide whether or not to add an error.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.blurField );\n\t\t},\n\n\t\tchangeField: function( el, model ) {\n\t\t\t// Get our current value.\n\t\t\tvar value = nfRadio.channel( model.get( 'type' ) ).request( 'before:updateField', el, model );\n\t\t\tvalue = ( 'undefined' != typeof value ) ? value : nfRadio.channel( model.get( 'parentType' ) ).request( 'before:updateField', el, model );\n\t\t\tvalue = ( 'undefined' != typeof value ) ? value : jQuery( el ).val();\n\n\t\t\t// Set our 'isUpdated' flag to false.\n\t\t\tmodel.set( 'isUpdated', false );\n\n\t\t\t// Set our 'clean' flag to false.\n\t\t\tmodel.set( 'clean', false );\n\n\t\t\t/*\n\t\t\t * Send out a message saying that we've changed a field.\n\t\t\t * The first channel is field id/key specific.\n\t\t\t * The second channel is the field type, i.e. text, email, radio\n\t\t\t * The third channel is a generic 'field' channel.\n\t\t\t *\n\t\t\t * If the submitted value you wish to store in the data model isn't the same as the value received above,\n\t\t\t * you can set that model in the actions below and set the 'isUpdated' model attribute to true.\n\t\t\t * i.e. model.set( 'isUpdated', true );\n\t\t\t */\n\t\t\tnfRadio.channel( 'field-' + model.get( 'id' ) ).trigger( 'change:field', el, model );\n\t\t\tnfRadio.channel( model.get( 'type' ) ).trigger( 'change:field', el, model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:field', el, model );\n\n\t\t\t/*\n\t\t\t * Send a request out on our nfAdmin channel to update our field model.\n\t\t\t * If the field model has a 'isUpdated' property of false, nothing will be updated.\n\t\t\t */\n\t\t\tnfRadio.channel( 'nfAdmin' ).request( 'update:field', model, value );\n\t\t},\n\n\t\tblurField: function( el, model ) {\n\t\t\t// Set our 'clean' flag to false.\n\t\t\tmodel.set( 'clean', false );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/changeEmail',[], function() {\n\tvar radioChannel = nfRadio.channel( 'email' );\n\t// var emailReg = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\tvar emailReg = /^.+@.+\\..+/i;\n\tvar errorID = 'invalid-email';\n\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'change:modelValue', this.onChangeModelValue );\n\t\t\tthis.listenTo( radioChannel, 'keyup:field', this.emailKeyup );\n\t\t\tthis.listenTo( radioChannel, 'blur:field', this.onBlurField );\n\t\t},\n\n\t\tonChangeModelValue: function( model ) {\n\t\t\tvar value = model.get( 'value' );\n\t\t\tvar fieldID = model.get( 'id' );\n\t\t\tthis.emailChange( value, fieldID );\n\t\t},\n\n\t\tonBlurField: function( el, model ) {\n\t\t\tvar value = jQuery( el ).val();\n\t\t\tvar fieldID = model.get( 'id' );\n\t\t\tthis.emailChange( value, fieldID );\n\t\t},\n\n\t\temailChange: function( value, fieldID ) {\n\t\t\tif ( 0 < value.length ) {\n\t\t\t\tif( emailReg.test( value ) ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t\t} else {\n\t\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', fieldID, errorID, formModel.get( 'settings' ).changeEmailErrorMsg );\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a user types inside of an email field, track their keypresses and add the appropriate class.\n\t\t * If the value validates as an email, add a class of nf-pass\n\t\t * If the value does not validate as email, add a class of nf-fail\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  {object} el    Element that triggered the keyup event.\n\t\t * @param  {object} model Model connected to the element that triggered the event\n\t\t * @return {void}\n\t\t */\n\t\temailKeyup: function( el, model, keyCode ) {\n\t\t\t\n\t\t\t/*\n\t\t\t * If we pressed the 'tab' key to get to this field, return false.\n\t\t\t */\n\t\t\tif ( 9 == keyCode ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Get the current value from our element.\n\t\t\t */\n\t\t\tvar value = jQuery( el ).val();\n\n\t\t\t/*\n\t\t\t * Get our current ID\n\t\t\t */\n\t\t\tvar fieldID = model.get( 'id' );\n\n\t\t\t/*\n\t\t\t * Check our value to see if it is a valid email.\n\t\t\t */\n\t\t\n\t\t\t\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t} else if ( ! emailReg.test( value ) && ! model.get( 'clean' ) ) {\n\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', fieldID, errorID, formModel.get( 'settings' ).changeEmailErrorMsg );\n\n\t\t\t\tmodel.removeWrapperClass( 'nf-pass' );\n\t\t\t} else if ( emailReg.test( value ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t\t/*\n\t\t\t\t * Add nf-pass class to the wrapper.\n\t\t\t\t */\n\t\t\t\tmodel.addWrapperClass( 'nf-pass' );\n\t\t\t\tmodel.set( 'clean', false );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldCheckbox',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init our checkbox model, register our renderClasses() function\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'checkbox' ), 'init:model', this.registerRenderClasses );\n\n\t\t\tnfRadio.channel( 'checkbox' ).reply( 'validate:required', this.validateRequired );\n\t\t\tnfRadio.channel( 'checkbox' ).reply( 'validate:modelData', this.validateModelData );\n            nfRadio.channel( 'checkbox' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'checkbox' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t},\n\n\t\tbeforeUpdateField: function( el, model ) {\n\t\t\tvar checked = jQuery( el ).prop( 'checked' );\n\t\t\tif ( checked ) {\n\t\t\t\tvar value = 1;\n\t\t\t\tjQuery( el ).addClass( 'nf-checked' );\n\t\t\t\tjQuery( el ).closest( '.field-wrap' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t\tjQuery( el ).removeClass( 'nf-checked' );\n\t\t\t\tjQuery( el ).closest( '.field-wrap' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).removeClass( 'nf-checked-label' );\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\n\t\tvalidateRequired: function( el, model ) {\n\t\t\treturn el[0].checked;\n\t\t},\n\n\t\tvalidateModelData: function( model ) {\n\t\t\treturn model.get( 'value' ) != 0;\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\tif ( 1 == fieldModel.get( 'value' ) ) {\n\t\t\t\tcalcValue = fieldModel.get( 'checked_calc_value' );\n\t\t\t} else {\n\t\t\t\tcalcValue = fieldModel.get( 'unchecked_calc_value' );\n\t\t\t}\n\n\t\t\treturn calcValue;\n\t\t},\n\n\t\tregisterRenderClasses: function( model ) {\n\t\t\tif ( 'checked' == model.get( 'default_value' ) ) {\n\t\t\t\tmodel.set( 'value', 1 );\n\t\t\t} else {\n\t\t\t\tmodel.set( 'value', 0 );\n\t\t\t}\n\t\t\tmodel.set( 'customClasses', this.customClasses );\n\t\t\tmodel.set( 'customLabelClasses', this.customLabelClasses );\n\t\t\tmodel.set( 'maybeChecked', this.maybeChecked );\n\t\t},\n\n\t\tcustomClasses: function( classes ) {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\tclasses += ' nf-checked';\n\t\t\t} else {\n\t\t\t\tclasses.replace( 'nf-checked', '' );\n\t\t\t}\n\t\t\treturn classes;\n\t\t},\n\n\t\tcustomLabelClasses: function( classes ) {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\tclasses += ' nf-checked-label';\n\t\t\t} else {\n\t\t\t\tclasses.replace( 'nf-checked-label', '' );\n\t\t\t}\n\t\t\treturn classes;\n\t\t},\n\n\t\tmaybeChecked: function() {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\treturn ' checked';\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldCheckboxList',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'listcheckbox' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'terms' ), 'init:model', this.register );\n            nfRadio.channel( 'listcheckbox' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'terms' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'listcheckbox' ).reply( 'get:calcValue', this.getCalcValue, this );\n            nfRadio.channel( 'terms' ).reply( 'get:calcValue', this.getCalcValue, this );\n        },\n\n        register: function( model ) {\n            model.set( 'renderOptions', this.renderOptions );\n            model.set( 'renderOtherText', this.renderOtherText );\n            model.set( 'selected', [] );\n\n            /*\n             * When we init a model, we need to set our 'value' to the selected option's value.\n             * This is the list equivalent of a 'default value'.\n             */ \n            if ( 0 != model.get( 'options' ).length ) {\n                var selected = _.filter( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n                selected = _.map( selected, function( opt ) { return opt.value } );\n            }\n\n            /*\n            * This part is re-worked to take into account custom user-meta\n            * values for fields.\n             */\n\t        var savedVal = model.get( 'value' );\n\t        if( 'undefined' !== typeof savedVal && Array.isArray( savedVal ) ) {\n\t\t        model.set( 'value', savedVal );\n\t        } else if ( 'undefined' != typeof selected ) {\n\t\t        model.set( 'value', selected );\n\t        }\n        },\n\n        renderOptions: function() {\n            var html = '';\n\n            if ( '' == this.value || ( Array.isArray( this.value ) && 0 < this.value.length )\n                || 0 < this.value.length ) {\n                var valueFound = true;\n            } else {\n                var valueFound = false;\n            }\n\n            _.each( this.options, function( option, index ) {\n                if( Array.isArray( this.value ) ) {\n                \tif( Array.isArray( this.value[ 0 ] ) && -1 !== _.indexOf( this.value[ 0 ], option.value ) ) {\n                \t\tvalueFound = true;\n\t                }\n                    else if( _.indexOf( this.value, option.value ) ) {\n                        valueFound = true;\n\t                }\n                }\n\n                if ( option.value == this.value ) {\n                    valueFound = true;\n                }\n\n                /*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n                option.fieldID = this.id;\n                option.classes = this.classes;\n                option.index = index;\n\n                var selected = false;\n\t\t\t\t/*\n\t\t\t\t* This part has been re-worked to account for values passed in\n\t\t\t\t* via custom user-meta ( a la User Mgmt add-on)\n\t\t\t\t */\n\t            if( Array.isArray( this.value ) && 0 < this.value.length ) {\n\t            \tif ( -1 !== _.indexOf( this.value[ 0 ].split( ',' ), option.value )\n\t\t                || -1 !== _.indexOf( this.value, option.value ) ) {\n\t\t\t            selected = true;\n\t            \t}\n\t            } else if ( ! _.isArray( this.value ) && option.value == this.value ) {\n\t\t            selected = true;\n\t            } else if ( ( 1 == option.selected && this.clean ) && 'undefined' === typeof this.value ) {\n\t\t            selected = true;\n\t            }\n\n\n                // else if( ( option.selected && \"0\" != option.selected ) && this.clean ){\n\t            //     isSelected = true;\n\t            // } else {\n\t            //     var testValues = _.map( this.value, function( value ) {\n\t            //         return value.toString();\n\t            //     } );\n\t            //\n\t            //     option.isSelected = ( -1 != testValues.indexOf( option.value.toString() ) );\n\t            // }\n\t            option.selected = selected;\n\t            option.isSelected = selected;\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-option' );\n                html += template( option );\n            }, this );\n\n            if ( 1 == this.show_other ) {\n                if ( 'nf-other' == this.value ) {\n                    valueFound = false;\n                }\n                var data = {\n                    fieldID: this.id,\n                    classes: this.classes,\n                    currentValue: this.value,\n                    renderOtherText: this.renderOtherText,\n                    valueFound: valueFound\n                };\n\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-other' );\n                html += template( data );\n\n            }\n\n            return html;\n        },\n\n        renderOtherText: function() {\n            if ( 'nf-other' == this.currentValue || ! this.valueFound ) {\n                if ( 'nf-other' == this.currentValue ) {\n                    this.currentValue = '';\n                }\n                var data = {\n                    fieldID: this.fieldID,\n                    classes: this.classes,\n                    currentValue: this.currentValue\n                };\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-other-text' );\n                return template( data );\n            }\n        },\n\n        getCalcValue: function( fieldModel ) {\n            var calc_value = 0;\n            var options = fieldModel.get( 'options' );\n            if ( 0 != options.length ) {\n                _.each( fieldModel.get( 'value' ), function( val ) {\n                    var tmp_opt = _.find( options, function( opt ) { return opt.value == val } );\n                    calc_value = Number( calc_value ) + Number( tmp_opt.calc );\n                } );\n            }\n            return calc_value;\n        },\n\n        beforeUpdateField: function( el, model ) {\n            var selected = model.get( 'value' ) || [];\n            if ( typeof selected == 'string' ) selected = [ selected ];\n\n            var value = jQuery( el ).val();\n            var checked = jQuery( el ).prop( 'checked' );\n            if ( checked ) {\n                selected.push( value );\n                jQuery( el ).addClass( 'nf-checked' );\n                jQuery( el ).parent().find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n            } else {\n                jQuery( el ).removeClass( 'nf-checked' );\n                jQuery( el ).parent().find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).removeClass( 'nf-checked-label' );\n                var i = selected.indexOf( value );\n                if( -1 != i ){\n                    selected.splice( i, 1 );\n                } else if ( Array.isArray( selected ) ) {\n                \tvar optionArray = selected[0].split( ',' );\n                \tvar valueIndex = optionArray.indexOf( value );\n                \tif( -1 !== valueIndex) {\n                \t\toptionArray.splice( valueIndex, 1 );\n\t                }\n                \tselected = optionArray.join( ',' );\n                }\n            }\n\n            // if ( 1 == model.get( 'show_other' ) ) {\n            //     model.set( 'reRender', true );\n            // }\n\n            return _.clone( selected );\n        }\n    });\n\n    return controller;\n} );\n","define('controllers/fieldRadio',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'change:modelValue', this.changeModelValue );\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'init:model', this.register );\n\t\t\tnfRadio.channel( 'listradio' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'change:field', this.updateCheckedClass, this );\n\t\t},\n\n\t\tregister: function( model ) {\n\t\t\tmodel.set( 'renderOptions', this.renderOptions );\n\t\t\tmodel.set( 'renderOtherText', this.renderOtherText );\n\t\t\t/*\n\t\t\t * When we init a model, we need to set our 'value' to the selected option's value.\n\t\t\t * This is the list equivalent of a 'default value'.\n\t\t\t */ \n\t\t\tif ( 0 != model.get( 'options' ).length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t */\n\t\t\t\tvar selected = _.find( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\n\t\t\t\tif ( 'undefined' != typeof selected ) {\n\t\t\t\t\tmodel.set( 'value', selected.value );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tchangeModelValue: function( model ) {\n\t\t\tif ( 1 == model.get( 'show_other' ) ) {\n\t\t\t\t// model.set( 'reRender', true );\n\t\t\t\tmodel.trigger( 'reRender');\n\t\t\t}\n\t\t},\n\n\t\trenderOptions: function() {\n\t\t\tvar html = '';\n\t\t\tif ( '' == this.value ) {\n\t\t\t\tvar valueFound = true;\n\t\t\t} else {\n\t\t\t\tvar valueFound = false;\n\t\t\t}\n\t\t\t\n\t\t\t_.each( this.options, function( option, index ) {\n\t\t\t\tif ( option.value == this.value ) {\n\t\t\t\t\tvalueFound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n                option.selected = false;\n\t\t\t\toption.fieldID = this.id;\n\t\t\t\toption.classes = this.classes;\n\t\t\t\toption.currentValue = this.value;\n\t\t\t\toption.index = index;\n\n\t\t\t\t/*\n\t\t\t\t * If we haven't edited this field yet, use the default checked\n\t\t\t\t */\n\t\t\t\tif ( this.clean && 1 == this.selected ) {\n\t\t\t\t\toption.selected = true;\n\t\t\t\t} else if ( this.value == option.value ) {\n\t\t\t\t\toption.selected = true;\n\t\t\t\t} else {\n\t\t\t\t\toption.selected = false;\n\t\t\t\t}\n\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-option' );\n\n\t\t\t\thtml += template( option );\n\t\t\t}, this );\n\n\t\t\tif ( 1 == this.show_other ) {\n\t\t\t\tif ( 'nf-other' == this.value ) {\n\t\t\t\t\tvalueFound = false;\n\t\t\t\t}\n\t\t\t\tvar data = {\n\t\t\t\t\tfieldID: this.id,\n\t\t\t\t\tclasses: this.classes,\n\t\t\t\t\tcurrentValue: this.value,\n\t\t\t\t\trenderOtherText: this.renderOtherText,\n\t\t\t\t\tvalueFound: valueFound\n\t\t\t\t};\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-other' );\n\t\t\t\thtml += template( data );\n\t\t\t}\n\n\t\t\treturn html;\n\t\t},\n\n\t\trenderOtherText: function() {\n\t\t\tif ( 'nf-other' == this.currentValue || ! this.valueFound ) {\n\t\t\t\tif ( 'nf-other' == this.currentValue ) {\n\t\t\t\t\tthis.currentValue = '';\n\t\t\t\t}\n\t\t\t\tvar data = {\n\t\t\t\t\tfieldID: this.fieldID,\n\t\t\t\t\tclasses: this.classes,\n\t\t\t\t\tcurrentValue: this.currentValue\n\t\t\t\t};\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-other-text' );\n\t\t\t\treturn template( data );\n\t\t\t}\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\t\n            /*\n             * Default to 0, in case we have no selection.\n             */\n            var calc_value = 0;\n            \n\t\t\tif ( 0 != fieldModel.get( 'options' ).length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t */\n\t\t\t\tvar selected = _.find( fieldModel.get( 'options' ), function( opt ) { return fieldModel.get( 'value' ) == opt.value } );\n\t\t\t\tif ( 'undefined' !== typeof selected ) {\n                    calc_value = selected.calc;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn calc_value;\n\t\t},\n\n\t\tupdateCheckedClass: function( el, model ) {\n\t\t\tjQuery( '[name=\"' + jQuery( el ).attr( 'name' ) + '\"]' ).removeClass( 'nf-checked' );\n\t\t\tjQuery( el ).closest( 'ul' ).find( 'label' ).removeClass( 'nf-checked-label' );\n\t\t\tjQuery( el ).addClass( 'nf-checked' );\n\t\t\tjQuery( el ).closest( 'li' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n\n\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldNumber',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'number' ), 'init:model', this.maybeMinDefault );\n            this.listenTo( nfRadio.channel( 'number' ), 'keyup:field', this.validateMinMax );\n        },\n\n        maybeMinDefault: function( model ) {\n\n            if( '' == model.get( 'value' ) ){\n                var min = model.get( 'num_min' );\n                model.set( 'value', min );\n            }\n        },\n\n        validateMinMax: function( el, model ) {\n            var $el = jQuery( el );\n            var value = parseFloat( $el.val() );\n            var min = $el.attr( 'min' );\n            var max = $el.attr( 'max' );\n            var step = parseFloat( $el.attr( 'step' ) );\n\n            if( min && value < min ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-min', formModel.get( 'settings' ).fieldNumberNumMinError );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-min' );\n            }\n\n            if ( max && value > max ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-max', formModel.get( 'settings' ).fieldNumberNumMaxError );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-max' );\n            }\n\n            var testValue = Math.round( parseFloat( value ) * 1000000000 );\n            var testStep = Math.round( parseFloat( step ) * 1000000000  );\n\n            if( value && 0 !== testValue % testStep ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-step', formModel.get( 'settings' ).fieldNumberIncrementBy + step );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-step' );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","define( 'controllers/mirrorField',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\n\tvar controller = Marionette.Object.extend( {\n\t\tlisteningModel: '',\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'init:model', this.registerMirror );\n\t\t},\n\n\t\tregisterMirror: function( model ) {\n\t\t\tif ( model.get( 'mirror_field' ) ) {\n\t\t\t\tthis.listeningModel = model;\n\t\t\t\tvar targetID = model.get( 'mirror_field' );\n\t\t\t\tthis.listenTo( nfRadio.channel( 'field-' + targetID ), 'change:modelValue', this.changeValue );\n\t\t\t}\n\t\t},\n\n\t\tchangeValue: function( targetModel ) {\n\t\t\tthis.listeningModel.set( 'value', targetModel.get( 'value' ) );\n\t\t\t// this.listeningModel.set( 'reRender', true );\n\t\t\tthis.listeningModel.trigger( 'reRender' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/confirmField',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\tvar errorID = 'confirm-mismatch';\n\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'init:model', this.registerConfirm );\n\t\t\tthis.listenTo( radioChannel, 'keyup:field', this.confirmKeyup );\n\t\t},\n\n\t\tregisterConfirm: function( confirmModel ) {\n\t\t\tif ( ! confirmModel.get( 'confirm_field' ) ) return;\n\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'loaded', function( formModal ){\n\t\t\t\tthis.registerConfirmListeners( confirmModel );\n\t\t\t});\n\t\t},\n\n\t\tregisterConfirmListeners: function( confirmModel ) {\n\t\t\t\n\t\t\tvar targetModel = nfRadio.channel( 'form-' + confirmModel.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\n\t\t\t//TODO: Add better handling for password confirm fields on the front end.\n\t\t\tif( 'undefined' == typeof targetModel ) return;\n\n\t\t\ttargetModel.set( 'confirm_with', confirmModel.get( 'id' ) );\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + targetModel.get( 'id' ) ), 'change:modelValue', this.changeValue );\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + confirmModel.get( 'id' ) ), 'change:modelValue', this.changeValue );\n\t\t},\n\n\t\tchangeValue: function( model ) {\n\t\t\tif ( 'undefined' == typeof model.get( 'confirm_with' ) ) {\n\t\t\t\tvar confirmModel = model;\n\t\t\t\tvar targetModel = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\t\t\t} else {\n\t\t\t\tvar targetModel = model;\n\t\t\t\tvar confirmModel = radioChannel.request( 'get:field', targetModel.get( 'confirm_with' ) );\n\t\t\t}\n\t\t\tvar targetID = targetModel.get( 'id' );\n\t\t\tvar confirmID = confirmModel.get( 'id' );\n\n\t\t\tif ( '' == confirmModel.get( 'value' ) || confirmModel.get( 'value' ) == targetModel.get( 'value' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t} else {\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', confirmID );\n\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', confirmID, errorID, formModel.get( 'settings' ).confirmFieldErrorMsg );\n\t\t\t}\n\t\t},\n\t\t\n\t\tconfirmKeyup: function( el, model, keyCode ) {\n\n\t\t\tvar currentValue = jQuery( el ).val();\n\t\t\tif ( model.get( 'confirm_field' ) ) {\n\t\t\t\tvar confirmModel = model;\n\t\t\t\tvar confirmID = model.get( 'id' );\n\t\t\t\tvar targetModel = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\t\t\t\tvar compareValue = targetModel.get( 'value' );\n\t\t\t\tvar confirmValue = currentValue;\n\t\t\t} else if ( model.get( 'confirm_with' ) ) {\n\t\t\t\tvar confirmModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'confirm_with' ) );\n\t\t\t\tvar confirmID = confirmModel.get( 'id' );\n\t\t\t\tvar confirmValue = confirmModel.get( 'value' );\n\t\t\t\tvar compareValue = confirmValue;\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof confirmModel ) {\n\t\t\t\tif ( '' == confirmValue ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t\t} else if ( currentValue == compareValue ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t\t} else {\n\t\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', confirmID );\n\t\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', confirmID, errorID, formModel.get( 'settings' ).confirmFieldErrorMsg );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/updateFieldModel',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'nfAdmin' ).reply( 'update:field', this.updateField );\n\t\t},\n\n\t\tupdateField: function( model, value ) {\n\t\t\tif ( ! model.get( 'isUpdated' ) ) {\n\t\t\t\tmodel.set( 'value', value );\n\t\t\t\tmodel.set( 'isUpdated', true );\n\t\t\t\t/*\n\t\t\t\t * If we're working with an array, it won't trigger a change event on the value attribute.\n\t\t\t\t * Instead, we have to manually trigger a change event.\n\t\t\t\t */ \n\t\t\t\tif ( _.isArray( value ) ) {\n\t\t\t\t\tmodel.trigger( 'change:value', model );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/submitButton',['controllers/submitButton'], function( submitButton ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tbound: {},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'submit' ), 'init:model', this.registerHandlers );\n\t\t},\n\n\t\tregisterHandlers: function( fieldModel ) {\n\t\t\tif ( 'undefined' != typeof this.bound[ fieldModel.get( 'id' ) ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + fieldModel.get( 'id' ) ), 'click:field', this.click, this );\n\t\t\t/*\n\t\t\t * Register an interest in the 'before:submit' event of our form.\n\t\t\t */\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'before:submit', this.beforeSubmit, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'submit:failed', this.resetLabel, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'submit:response', this.resetLabel, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'enable:submit', this.maybeEnable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'disable:submit', this.maybeDisable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'processingLabel', this.processingLabel, fieldModel );\n\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'fields' ), 'add:error', this.maybeDisable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'fields' ), 'remove:error', this.maybeEnable, fieldModel );\n\t\t\t\n\t\t\tthis.bound[ fieldModel.get( 'id') ] = true;\n\t\t},\n\n\t\tclick: function( e, fieldModel ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'submit', formModel );\n\t\t},\n\n\t\tbeforeSubmit: function() {\n\t\t\tthis.set( 'disabled', true );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'formID' ) ).trigger( 'processingLabel', this );\n\t\t},\n\n\t\tmaybeDisable: function( fieldModel ) {\n\n\t\t\tif( 'undefined' != typeof fieldModel && fieldModel.get( 'formID' ) != this.get( 'formID' ) ) return;\n\n\t\t\tthis.set( 'disabled', true );\n\t\t\tthis.trigger( 'reRender' );\n\t\t},\n\n\t\tmaybeEnable: function( fieldModel ) {\n\t\t\t/*\n\t\t\t * If the field reporting the error is not on the same form as the submit button, return false;\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof fieldModel && fieldModel.get( 'formID' ) != this.get( 'formID' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', this.get( 'formID' ) );\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' ) ) ) {\n\t\t\t\tthis.set( 'disabled', false );\n\t\t\t\tthis.trigger( 'reRender' );\n\t\t\t}\n\t\t},\n\n\t\tprocessingLabel: function() {\n\t\t\tif ( this.get( 'label' ) == this.get( 'processing_label' ) ) return false;\n\n\t\t\tthis.set( 'oldLabel', this.get( 'label' ) );\n\t\t\tthis.set( 'label', this.get( 'processing_label' ) );\n\t\t\tthis.trigger( 'reRender' );\n\t\t},\n\n\t\tresetLabel: function( response ) {\n\t\t\tif ( 'undefined' != typeof this.get( 'oldLabel' ) ) {\n\t\t\t\tthis.set( 'label', this.get( 'oldLabel' ) );\n\t\t\t}\n\t\t\tthis.set( 'disabled', false );\n\t\t\tthis.trigger( 'reRender' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/submitDebug',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.submitDebug );\n        },\n\n        submitDebug: function( response, textStatus, jqXHR, formID ) {\n\n            if( 'undefined' == typeof response.debug ) return;\n\n            /* Form Debug Messages */\n            if( 'undefined' != typeof response.debug.form ) {\n                var debugMessages = document.createElement( 'span' );\n                _.each(response.debug.form, function (message, index) {\n                    var messageText = document.createTextNode( message );\n                    debugMessages.appendChild( messageText );\n                    debugMessages.appendChild(\n                        document.createElement( 'br' )\n                    );\n                });\n                jQuery('.nf-debug-msg').html( debugMessages );\n            }\n\n            /* Console Debug Messages */\n            if( 'undefined' != typeof response.debug.console ) {\n                var style = '';\n                console.log( '%c%s', style, 'NINJA SUPPORT' );\n                _.each(response.debug.console, function (message, index) {\n                    console.log( message );\n                });\n                console.log( '%c%s', style, 'END NINJA SUPPORT' );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n\n","define('controllers/getFormErrors',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function( model ) {\n\t\t\tnfRadio.channel( 'form' ).reply( 'get:errors', this.getFormErrors );\n\t\t},\n\n\t\tgetFormErrors: function( formID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\n\t\t\tvar errors = false;\n\t\t\t\n\t\t\tif ( formModel ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have any errors on our form model.\n\t\t\t\t */\n\t\t\t\tif ( 0 !== formModel.get( 'errors' ).length ) {\n\t\t\t\t\t_.each( formModel.get( 'errors' ).models, function( error ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ error.get( 'id' ) ] = error.get( 'msg' );\n\t\t\t\t\t} );\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t_.each( formModel.get( 'fields' ).models, function( field ) {\n\t\t\t\t\tif ( field.get( 'type' ) != 'submit' && field.get( 'errors' ).length > 0 ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ field.get( 'id' ) ] = field.get( 'errors' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t});\n\n\treturn controller;\n} );\n","define('controllers/validateRequired',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.validateRequired );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:field', this.validateRequired );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'keyup:field', this.validateKeyup );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.validateModelData );\n\t\t\tthis.listenTo( nfRadio.channel( 'submit' ), 'validate:field', this.validateModelData );\n\t\t},\n\t\t\n\t\tvalidateKeyup: function( el, model, keyCode ) {\n\t\t\tif ( 1 != model.get( 'required' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! model.get( 'clean' ) ) {\n\t\t\t\tthis.validateRequired( el, model );\n\t\t\t}\n\t\t},\n\n\t\tvalidateRequired: function( el, model ) {\n\t\t\tif ( 1 != model.get( 'required' ) || ! model.get( 'visible' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar currentValue = jQuery( el ).val();\n\t\t\tvar customReqValidation = nfRadio.channel( model.get( 'type' ) ).request( 'validate:required', el, model );\n\t\t\tvar defaultReqValidation = true;\n\n\t\t\tvar maskPlaceholder = model.get( 'mask' );\n\t\t\tif ( maskPlaceholder ) {\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /9/g, '_' );\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /a/g, '_' );\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /\\*/g, '_' );\n\t\t\t}\n\n            // If the field has a mask...\n            // AND that mask is equal to the current value...            \n            if ( maskPlaceholder && currentValue === maskPlaceholder ) {\n                // If we have a pre-existing error...\n                if ( 0 < model.get( 'errors' ).length ) {\n                    // Persist that error.\n                    defaultReqValidation = false;\n                }\n            }\n            // If our value is an empty string...\n            if ( ! jQuery.trim( currentValue ) ) {\n                // Throw an error.\n                defaultReqValidation = false;\n            }\n\n\t\t\tif ( 'undefined' !== typeof customReqValidation ) {\n\t\t\t\tvar valid = customReqValidation;\n\t\t\t} else {\n\t\t\t\tvar valid = defaultReqValidation;\n\t\t\t}\n\n\t\t\tthis.maybeError( valid, model );\n\t\t},\n\n\t\tvalidateModelData: function( model ) {\n\n\t\t\tif ( 1 != model.get( 'required' ) || ! model.get( 'visible' ) || model.get( 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we already have a required error on this model, return false\n\t\t\t */\n\t\t\tif ( model.get( 'errors' ).get( 'required-error' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tcurrentValue = model.get( 'value' );\n\n\t\t\tvar defaultReqValidation = true;\n\n\t\t\tif ( ! jQuery.trim( currentValue ) ) {\n\t\t\t\tdefaultReqValidation = false;\n\t\t\t}\n\n\t\t\tvar customReqValidation = nfRadio.channel( model.get( 'type' ) ).request( 'validate:modelData', model );\n\t\t\tif ( 'undefined' !== typeof customReqValidation ) {\n\t\t\t\tvar valid = customReqValidation;\n\t\t\t} else {\n\t\t\t\tvar valid = defaultReqValidation;\n\t\t\t}\n\n\t\t\tthis.maybeError( valid, model );\n\n\t\t},\n\n\t\tmaybeError: function( valid, model ) {\n\t\t\tif ( ! valid ) {\n\n\t\t\t\tvar formModel  = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:form' );\n\n\t\t\t\tif( 'undefined' != typeof formModel ) {\n\t\t\t\t\tnfRadio.channel('fields').request('add:error', model.get('id'), 'required-error', formModel.get('settings').validateRequiredField);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'required-error' );\n\t\t\t}\t\t\t\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/submitError',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.submitErrors );\n\t\t},\n\n\t\tsubmitErrors: function( response, textStatus, jqXHR, formID ) {\n\n\t\t\tif ( _.size( response.errors.fields ) > 0 ) {\n\t\t\t\t_.each( response.errors.fields, function( data, fieldID ) {\n                    if ( typeof( data ) === 'object' ) {\n                        nfRadio.channel( 'fields' ).request( 'add:error', fieldID, data.slug, data.message );\n                    } else {\n                        nfRadio.channel( 'fields' ).request( 'add:error', fieldID, 'required-error', data );\n                    }\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( _.size( response.errors.form ) > 0 ) {\n\t\t\t\t_.each( response.errors.form, function( msg, errorID ) {\n\t\t\t\t\tnfRadio.channel( 'form-' + formID ).request( 'remove:error', errorID );\n\t\t\t\t\tnfRadio.channel( 'form-' + formID ).request( 'add:error', errorID, msg );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( 'undefined' != typeof response.errors.last ) {\n\t\t\t\tif( 'undefined' != typeof response.errors.last.message ) {\n\t\t\t\t\tvar style = 'background: rgba( 255, 207, 115, .5 ); color: #FFA700; display: block;';\n\t\t\t\t\tconsole.log( '%c NINJA FORMS SUPPORT: SERVER ERROR', style );\n\t\t\t\t\tconsole.log( response.errors.last.message );\n\t\t\t\t\tconsole.log( '%c END SERVER ERROR MESSAGE', style );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t */\n\t\t\t/*\n\t\t\t * Re-show any hidden fields during a form submission re-start.\n\t\t\t */\n\t\t\tjQuery( '#nf-form-' + formID + '-cont .nf-field-container' ).show();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/actionRedirect',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionRedirect );\n\t\t},\n\n\t\tactionRedirect: function( response ) {\n\n\t\t\tif ( 'undefined' != typeof response.data.halt && 'undefined' != typeof response.data.halt.redirect && '' != response.data.halt.redirect ) {\n\t\t\t\twindow.location = response.data.halt.redirect;\n\t\t\t}\n\n\t\t\tif ( _.size( response.errors ) == 0 && 'undefined' != typeof response.data.actions ) {\n\n\t\t\t\tif ( 'undefined' != typeof response.data.actions.redirect && '' != response.data.actions.redirect ) {\n\t\t\t\t\twindow.location = response.data.actions.redirect;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/actionSuccess',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionSubmit );\n\t\t},\n\n\t\tactionSubmit: function( response ) {\n\t\t\tif ( _.size( response.errors ) == 0 && 'undefined' != typeof response.data.actions ) {\n\t\t\t\tif ( 'undefined' != typeof response.data.actions.success_message && '' != response.data.actions.success_message ) {\n\t\t\t\t\tvar form_id = response.data.form_id;\n\t\t\t\t\tvar success_message = jQuery( '#nf-form-' + form_id + '-cont .nf-response-msg' );\n\t\t\t\t\t\n\t\t\t\t\tsuccess_message.html( response.data.actions.success_message ).show();\n\t\t\t\t\t\n\t\t\t\t\t//Let's check if the success message is already fully visible in the viewport without scrolling\n\t\t\t\t\tvar top_of_success_message = success_message.offset().top;\n\t\t\t\t\tvar bottom_of_success_message = success_message.offset().top + success_message.outerHeight();\n\t\t\t\t\tvar bottom_of_screen = jQuery(window).scrollTop() + jQuery(window).height();\n\t\t\t\t\tvar top_of_screen = jQuery(window).scrollTop();\n\n\t\t\t\t\tvar the_element_is_visible = ((bottom_of_screen > bottom_of_success_message) && (top_of_screen < top_of_success_message));\n\n\t\t\t\t\tif(!the_element_is_visible){\n\t\t\t\t\t\t//The element isn't visible, so let's scroll to the success message as in the previous release, but with a short animation\n\t\t\t\t\t\tjQuery('html, body').animate({\n\t\t\t\t\t\t\tscrollTop: ( success_message.offset().top - 50 )\n\t\t\t\t\t\t}, 300 );\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldSelect',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:model', function( model ){\n\t\t\t\tif( 'list' == model.get( 'parentType' ) ) this.register( model );\n\t\t\t}, this );\n\n\t\t\tnfRadio.channel( 'listselect' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t\tnfRadio.channel( 'listmultiselect' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t},\n\n\t\tregister: function( model ) {\n\t\t\tmodel.set( 'renderOptions', this.renderOptions );\n\t\t\tmodel.set( 'renderOtherAttributes', this.renderOtherAttributes );\n\t\t\t/*\n\t\t\t * When we init a model, we need to set our 'value' to the selected option's value.\n\t\t\t * This is the list equivalent of a 'default value'.\n\t\t\t */ \n\t\t\tif ( 0 != model.get( 'options' ).length ) {\n\t\t\t\t//Check to see if there is a value set for the field\n\t\t\t\tvar savedVal = model.get( 'value' );\n\n\t\t\t\t/*\n\t\t\t\t * Check to see if this is a multi-select list.\n\t\t\t\t */\n\t\t\t\tif ( 'listmultiselect' == model.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We're using a multi-select, so we need to check out any selected options and add them together.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.filter( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\t\t\t\t\tselected = _.map( selected, function( opt ) { return opt.value } );\n\t\t\t\t\tvar value = selected;\n\t\t\t\t} else if ( 'listradio' !== model.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.find( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't have a selected value, so use our first option.\n\t\t\t\t\t */\n\t\t\t\t\tif ( 'undefined' == typeof selected ) {\n\t\t\t\t\t\tselected = _.first( model.get( 'options' ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof selected\n\t\t\t\t\t\t&& 'undefined' != typeof selected.value ) {\n\t\t\t\t\t\tvar value = selected.value;\n\t\t\t\t\t} else if ( 'undefined' != typeof selected ) {\n\t\t\t\t\t\tvar value = selected.label;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\n\t\t\t\t/*\n\t            * This part is re-worked to take into account custom user-meta\n\t            * values for fields.\n\t             */\n\t\t\t\tif( 'undefined' !== typeof savedVal && '' !== savedVal\n\t\t\t\t\t&& Array.isArray( savedVal ) ) {\n\t\t\t\t\tmodel.set( 'value', savedVal );\n\t\t\t\t} else if ( 'undefined' != typeof selected ) {\n\t\t\t\t\tmodel.set( 'value', value );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trenderOptions: function() {\n\t\t\tvar html = '';\n\n\t\t\t_.each( this.options, function( option ) {\n\t\t\t\t/*\n\t\t\t\t* This part has been re-worked to account for values passed in\n\t\t\t\t* via custom user-meta ( a la User Mgmt add-on)\n\t\t\t\t */\n\t\t\t\tif ( _.isArray( this.value ) ) {\n                    // If we have a multiselect list...\n                    // AND it has selected values...\n\t\t\t\t\tif( 'listmultiselect' === this.type && 0 < this.value.length &&\n\t\t\t\t\t\t-1 != _.indexOf( this.value[ 0 ].split( ',' ), option.value ) ) {\n\t\t\t\t\t\tvar selected = true;\n\t\t\t\t\t} else if( -1 != _.indexOf( this.value, option.value ) ) {\n\t\t\t\t\t\tvar selected = true;\n\t\t\t\t\t}\n\t\t\t\t} else if ( ! _.isArray( this.value ) && option.value == this.value ) {\n\t\t\t\t\tvar selected = true;\n\t\t\t\t} else if ( ( 1 == option.selected && this.clean )\n\t\t\t\t\t&& 'undefined' === typeof this.value ) {\n\t\t\t\t\tvar selected = true;\n\t\t\t\t} else {\n\t\t\t\t\tvar selected = false;\n\t\t\t\t}\n\n\t\t\t\t/*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n\t\t\t\toption.selected = selected;\n\t\t\t\toption.fieldID = this.id;\n\t\t\t\toption.classes = this.classes;\n\t\t\t\toption.currentValue = this.value;\n\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listselect-option' );\n\t\t\t\thtml += template( option );\n\t\t\t}, this );\n\n\t\t\treturn html;\n\t\t},\n\n\t\trenderOtherAttributes: function() {\n\t\t\tvar otherAttributes = '';\n\n\t\t\tif( 'listmultiselect' == this.type ){\n\t\t\t\totherAttributes = otherAttributes + ' multiple';\n\n\t\t\t\tvar multiSize = this.multi_size || 5;\n\t\t\t\totherAttributes = otherAttributes + ' size=\"' + multiSize + '\"';\n\t\t\t}\n\n\t\t\treturn otherAttributes;\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\tvar calc_value = 0;\n\t\t\tvar options = fieldModel.get( 'options' );\n\t\t\tif ( 0 != options.length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if this is a multi-select list.\n\t\t\t\t */\n\t\t\t\tif ( 'listmultiselect' == fieldModel.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We're using a multi-select, so we need to check out any selected options and add them together.\n\t\t\t\t\t */\n\t\t\t\t\t_.each( fieldModel.get( 'value' ), function( val ) {\n\t\t\t\t\t\tvar tmp_opt = _.find( options, function( opt ) { return opt.value == val } );\n\t\t\t\t\t\tcalc_value += tmp_opt.calc;\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t/*\n\t\t\t\t\t * We are using a single select, so our selected option is in the 'value' attribute.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.find( options, function( opt ) { return fieldModel.get( 'value' ) == opt.value } );\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't have a selected value, so use our first option.\n\t\t\t\t\t */\n\t\t\t\t\tif ( 'undefined' == typeof selected ) {\n\t\t\t\t\t\tselected = fieldModel.get( 'options' )[0];\n\t\t\t\t\t}\t\t\n\t\t\t\t\tcalc_value  = selected.calc;\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn calc_value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/coreSubmitResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionSubmit );\n\t\t},\n\n\t\tactionSubmit: function( response ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', response.data.form_id );\n\t\t\t/*\n\t\t\t * If we have errors, don't hide or clear.\n\t\t\t */\n\t\t\tif ( 0 != _.size( response.errors ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( 1 == response.data.settings.clear_complete ) {\n\t\t\t\t// nfRadio.channel( 'form-' + response.data.form_id ).trigger( 'reset' );\n\t\t\t\tformModel.get( 'fields' ).reset( formModel.get( 'loadedFields' ) );\n\t\t\t}\n\n\t\t\tif ( 1 == response.data.settings.hide_complete ) {\n\t\t\t\t/**\n\t\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t\t */\n\t\t\t\tformModel.trigger( 'hide' );\n\t\t\t\t// jQuery( '.nf-fields' ).hide();\n\t\t\t\t// jQuery( '.nf-form-title' ).hide();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldProduct',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'product' ), 'init:model', this.register );\n            nfRadio.channel( 'product' ).reply( 'get:calcValue', this.getCalcValue, this );\n        },\n\n        register: function( model ) {\n            model.set( 'renderProductQuantity', this.renderProductQuantity );\n            model.set( 'renderProduct', this.renderProduct );\n            model.set( 'renderOptions', this.renderOptions );\n        },\n\n        renderProduct: function(){\n            switch( this.product_type ) {\n                case 'user':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-textbox' );\n                    return template( this );\n                    break;\n                case 'hidden':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-hidden' );\n                    return template( this );\n                    break;\n\n                case 'dropdown':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-dropdown' );\n                    return template( this );\n                    break;\n                default:\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-single' );\n                    return template( this );\n            }\n        },\n\n        renderProductQuantity: function(){\n            if ( 1 == this.product_use_quantity ) {\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-quantity' );\n                return template( this );\n            }\n        },\n\n        renderOptions: function() {\n            var that = this;\n            var html = '';\n            _.each( this.options, function( option ) {\n                if ( 1 == option.selected ) {\n                    var selected = true;\n                } else {\n                    var selected = false;\n                }\n\n                option.selected = selected;\n                option.fieldID = that.id;\n                option.classes = that.classes;\n                option.currentValue = that.value;\n\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-' + that.product_type + '-option' );\n                html += template( option );\n            } );\n\n            return html;\n        },\n\n        getCalcValue: function( fieldModel ) {\n\n            var product_price = fieldModel.get( 'product_price' );\n            var product_quantity = fieldModel.get( 'value' );\n\n            return product_price * product_quantity;\n        }\n    });\n\n    return controller;\n} );\n\n","define('controllers/fieldTotal',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        totalModel: {},\n\n        productTotals: {},\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'total' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'shipping' ), 'init:model', this.registerShipping );\n        },\n\n        register: function( totalModel ){\n            this.totalModel = totalModel;\n\n            var formID = totalModel.get( 'formID' );\n            this.listenTo( nfRadio.channel( 'form-' + formID ), 'loaded', this.onFormLoaded );\n\n            this.listenTo( nfRadio.channel( 'product' ), 'change:modelValue', this.onChangeProduct );\n            this.listenTo( nfRadio.channel( 'quantity' ), 'change:modelValue', this.onChangeQuantity );\n        },\n\n        registerShipping: function( shippingModel ){\n            this.shippingCost = shippingModel.get( 'shipping_cost' );\n        },\n\n        onFormLoaded: function( formModel ){\n\n            var fieldModels = formModel.get( 'fields' ).models;\n\n            var productFields = {};\n            var quantityFields = {};\n\n            for( var model in fieldModels ){\n\n                var field = fieldModels[ model ];\n                var fieldID = field.get( 'id' );\n\n                // TODO: Maybe use switch\n                if( 'product' == field.get( 'type' ) ){\n                    productFields[ fieldID ] = field;\n                } else if( 'quantity' == field.get( 'type' ) ){\n                    var productID = field.get( 'product_assignment' );\n                    quantityFields[ productID ] = field;\n                }\n            }\n\n            for( var productID in productFields ){\n\n                var product = productFields[ productID ];\n\n                var productPrice = Number( product.get( 'product_price' ) );\n\n                if( quantityFields[ productID ] ){\n\n                    productPrice *= quantityFields[ productID ].get( 'value' );\n\n                } else if( 1 == product.get( 'product_use_quantity' ) ){\n\n                    productPrice *= product.get( 'value' );\n\n                }\n\n                this.productTotals[ productID ] = productPrice;\n            }\n\n            this.updateTotal();\n        },\n\n        onChangeProduct: function( model ){\n            var productID = model.get( 'id' );\n            var productPrice = Number( model.get( 'product_price' ) );\n            var productQuantity = Number( model.get( 'value' ) );\n            var newTotal = productQuantity * productPrice;\n            this.productTotals[ productID ] = newTotal;\n\n            this.updateTotal();\n        },\n\n        onChangeQuantity: function( model ){\n            var productID = model.get( 'product_assignment' );\n            var productField = nfRadio.channel( 'fields' ).request( 'get:field', productID );\n            var productPrice = Number( productField.get( 'product_price' ) );\n\n            var quantity = Number( model.get( 'value' ) );\n\n            var newTotal = quantity * productPrice;\n\n            this.productTotals[ productID ] = newTotal;\n\n            this.updateTotal();\n        },\n\n        updateTotal: function(){\n\n            var newTotal = 0;\n\n            for( var product in this.productTotals ){\n                newTotal += Number( this.productTotals[ product ] );\n            }\n\n            if( newTotal && this.shippingCost ) {\n                // Only add shipping if there is a cost.\n                newTotal += Number(this.shippingCost);\n            }\n\n            this.totalModel.set( 'value', newTotal.toFixed( 2 ) );\n            this.totalModel.trigger( 'reRender' );\n        }\n    });\n\n    return controller;\n});\n","define('controllers/fieldQuantity',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'quantity' ), 'init:model', this.registerQuantity );\n        },\n\n        registerQuantity: function( model ){\n            var productID = model.get( 'product_assignment' );\n            var product = nfRadio.channel( 'fields' ).request( 'get:field', productID );\n\n            if( product ) {\n                product.set('product_use_quantity', 0);\n            }\n        },\n\n    });\n\n    return controller;\n});\n","/**\n * Model that represents a calculation.\n *\n * On init, we trigger a radio message so that controllers can do things when a calc model inits.\n */\ndefine( 'models/calcModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\t// Set our form id\n\t\t\tthis.set( 'formID', this.collection.options.formModel.get( 'id' ) );\n\t\t\t// Set our initial fields object to empty. This will hold our key/value pairs.\n\t\t\tthis.set( 'fields', {} );\n\t\t\t// Trigger a radio message to let controllers know we've inited this model.\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'init:model', this );\n\t\t\t// When we change the value of this calculation, send out a radio message\n\t\t\tthis.on( 'change:value', this.changeValue, this );\n\t\t},\n\n\t\t/**\n\t\t * Trigger a radio message when a field present in our calculation changes\n\t\t *\n\t\t * The listener that triggers/calls this function is in controllers/calculations\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeField: function( fieldModel ) {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:field', this, fieldModel );\n\t\t},\n\n\t\tchangeCalc: function( targetCalcModel ) {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:calc', this, targetCalcModel );\n\t\t},\n\n\t\tchangeValue: function() {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:value', this );\n\t\t}\n\t} );\n\n\treturn model;\n} );\n\n","define( 'models/calcCollection',['models/calcModel'], function( CalcModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: CalcModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options;\n            _.each( models, function( model ) {\n            \tif( 'undefined' == typeof model.dec ) return;\n                if ( '' === model.dec.toString().trim() ) model.dec = 2;\n                model.dec = parseInt( model.dec );\n            } );\n\t\t\t/*\n\t\t\t * Respond to requests for our calc model\n\t\t\t */\n\t\t\tnfRadio.channel( 'form-' + options.formModel.get( 'id' ) ).reply( 'get:calc', this.getCalc, this );\n\t\t},\n\n\t\tgetCalc: function( key ) {\n\t\t\treturn this.findWhere( { name: key } );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Controller responsible for keeping up with calculations.\n */\ndefine('controllers/calculations',['models/calcCollection'], function( CalcCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.calcs = {};\n\t\t\tthis.displayFields = {};\n\t\t\t// When our form initialises, check to see if there are any calculations that need to be tracked.\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'loaded', this.registerCalcs );\n            \n            // When our collection gets reset, reset calculation tracking as well.\n            this.listenTo( nfRadio.channel( 'fields' ), 'reset:collection', this.resetCalcs );\n\n\t\t\t// When a calc model is initialised, run a setup function.\n\t\t\t// this.listenTo( nfRadio.channel( 'calc' ), 'init:model', this.setupCalc );\n\n\t\t\t// When a field referenced by a calc model changes, update our calc.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:field', this.changeField );\n\n\t\t\t// When a calculation referenced by a calc model changes, update our calc.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:calc', this.changeCalc );\n\n\t\t\t/*\n\t\t\t * Listen to our field model init for fields that want to display calc values.\n\t\t\t * If that field has a calc merge tag, replace it with the default calc value.\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t_.each( nfFrontEnd.use_merge_tags.calculations, function( fieldType ) {\n\t\t\t\tthat.listenTo( nfRadio.channel( 'fields-' + fieldType ), 'init:model', that.initDisplayField );\n\t\t\t} );\n\t\t\t\n\t\t\t// When we change our calc value, update any display fields.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:value', this.updateDisplayFields );\n\n\t\t\t// Set an init variable so that we only call reRender on the display field on change, not on init.\n\t\t\tthis.init = {};\n\t\t},\n        \n        /**\n         * Passthrough function to reset tracking of calculations when the fieldCollection is reset.\n         * \n         * @since 3.2\n         * @param backbone.collection fieldCollection\n         * @return void\n         */\n        resetCalcs: function( fieldCollection ) {\n            if( 'undefined' != typeof( fieldCollection.options.formModel ) ) {\n                this.registerCalcs( fieldCollection.options.formModel );  \n            }\n        },\n\n\t\t/**\n\t\t * When our form loads, create a collection out of any calculations.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model formModel\n\t\t * @return void\n\t\t */\n\t\tregisterCalcs: function( formModel ) {\n\t\t\tvar calcCollection = new CalcCollection( formModel.get( 'settings' ).calculations, { formModel: formModel } );\n\t\t\tthis.calcs[ formModel.get( 'id' ) ] = calcCollection;\n\t\t\tvar that = this;\n\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\t/*\n\t\t\t\t * We set a property on our init variable for the calc model we're looping over.\n\t\t\t\t * This property is set to true so that when we make changes to the calc model on the next line\n\t\t\t\t * the field view doesn't try to redraw itself.\n\t\t\t\t * If we don't do this, the 'reRender' attribute of the model will be set before the view is initialized,\n\t\t\t\t * which means that setting 'reRender' to true will never re-render the view.\n\t\t\t\t */\n\t\t\t\tthat.init[ calcModel.get( 'name' ) ] = true;\n\t\t\t\t// Setup our calculation models with initial values and register listeners for calc-related fields.\n\t\t\t\tthat.setupCalc( calcModel );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * When a calculation model is instantiated from the registerCalcs function:\n\t\t *\n\t\t * Use a regex to get an array of the field keys\n\t\t * Setup an initial key/values array\n\t\t * Check for any references to other calculations\n\t\t * Set the initial value of our calculation\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model calcModel\n\t\t * @return void\n\t\t */\n\t\tsetupCalc: function( calcModel ) {\n\t\t\t// Setup our that var so we can access 'this' context in our loop.\n\t\t\tvar that = this;\n\t\t\t// Get our equation\n\t\t\tvar eq = calcModel.get( 'eq' );\n\t\t\t// We want to keep our original eq intact, so we use a different var for string replacment.\n\t\t\tvar eqValues = eq;\n            // Store the name for debugging later.\n            var calcName = calcModel.get( 'name' );\n\n\t\t\t/* TODO:\n\t\t\t * It might be possible to refactor these two if statements.\n\t\t\t * The difficulty is that each has a different method of retreiving the specific data model.\n\t\t\t */\n\t\t\t// Check to see if we have any field merge tags in our equation.\n\t\t\tvar fields = eq.match( new RegExp( /{field:(.*?)}/g ) );\n\t\t\tif ( fields ) {\n\t\t\t\t/*\n\t\t\t\t * fields is now an array of field keys that looks like:\n\t\t\t\t * ['{field:key'], ['{field:key'], etc.\n\t\t\t\t *\n\t\t\t\t * We need to run a function with each of our field keys to setup our field key array and hook up our field change listner.\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\tfields = fields.map( function( field ) {\n\t\t\t\t\t// field will be {field:key}\n\t\t\t\t\tvar key = field.replace( ':calc}', '' ).replace( '}', '' ).replace( '{field:', '' );\n\n\t\t\t\t\t// Get our field model\n\t\t\t\t\tfieldModel = nfRadio.channel( 'form-' + calcModel.get( 'formID' ) ).request( 'get:fieldByKey', key );\n\n                    if( 'undefined' == typeof fieldModel ) return;\n\n                    fieldModel.set( 'clean', false );\n\n\t\t\t\t\t// Register a listener in our field model for value changes.\n\t\t\t\t\tfieldModel.on( 'change:value', calcModel.changeField, calcModel );\n\t\t\t\t\t// Get our calc value from our field model.\n\t\t\t\t\tvar calcValue = that.getCalcValue( fieldModel );\n\t\t\t\t\t// Add this field to our internal key/value object.\n\t\t\t\t\tthat.updateCalcFields( calcModel, key, calcValue );\n\t\t\t\t\t// Update the string tracking our merged eq with the calc value.\n\t\t\t\t\teqValues = that.replaceKey( 'field', key, calcValue, eqValues );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Check to see if we have any calc merge tags in our equation.\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t/*\n\t\t\t\t * calcs is now an array of calc keys that looks like:\n\t\t\t\t * ['{calc:key'], ['{calc:key'], etc.\n\t\t\t\t *\n\t\t\t\t * We need to run a function with each of our calc keys to setup our calc key array and hook up our calc change listner.\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our calc model\n\t\t\t\t\tvar targetCalcModel = calcModel.collection.findWhere( { name: name } );\n\n\t\t\t\t\tif( 'undefined' == typeof targetCalcModel ) return;\n\n\t\t\t\t\t// Listen for changes on our calcluation, since we need to update our calc when it changes.\n\t\t\t\t\ttargetCalcModel.on( 'change:value', calcModel.changeCalc, calcModel );\n\t\t\t\t\t// // Get our calc value from our calc model.\n\t\t\t\t\tvar calcValue = targetCalcModel.get( 'value' );\n\t\t\t\t\t// Update the string tracking our merged eq with the calc value.\n\t\t\t\t\teqValues = that.replaceKey( 'calc', name, calcValue, eqValues );\n\t\t\t\t} );\n\n\t\t\t}\n\n            // Scrub unmerged tags (ie deleted/nox-existent fields/calcs, etc).\n            eqValues = eqValues.replace( /{([a-zA-Z0-9]|:|_|-)*}/g, 0 );\n\n            // Scrub line breaks.\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n\t\t\t// Evaluate the equation and update the value of this model.\n\t\t\ttry {\n\t\t\t\tcalcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n\t\t\t} catch( e ) {\n                //console.log( calcName );\n\t\t\t\tconsole.log( e );\n\t\t\t}\n            \n            // If for whatever reason, we got NaN, reset that to 0.\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\n\t\t\t// Debugging console statement.\n\t\t\t// console.log( eqValues + ' = ' + calcModel.get( 'value' ) );\n\t\t},\n\n\t\t/**\n\t\t * Update an item in our key/value pair that represents our fields and calc values.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tcalcModel\n\t\t * @param  string \t\t\tkey\n\t\t * @param  string \t\t\tcalcValue\n\t\t * @return void\n\t\t */\n\t\tupdateCalcFields: function( calcModel, key, calcValue ) {\n\t\t\tvar fields = calcModel.get( 'fields' );\n\t\t\tfields[ key ] = calcValue;\n\t\t\tcalcModel.set( 'fields', fields );\n\t\t},\n\n\t\t/**\n\t\t * Get a calc value from a field model.\n\t\t *\n\t\t * Sends a request to see if there's a special calc value\n\t\t * Uses the value of the field if there is not.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model fieldModel\n\t\t * @return value\n\t\t */\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\t/*\n\t\t\t * Send out a request on the field type and parent type channel asking if they need to modify the calc value.\n\t\t\t * This is helpful for fields like lists that can have a different calc_value than selected value.\n\t\t\t */\n\t\t\tvar value = nfRadio.channel( fieldModel.get( 'type' ) ).request( 'get:calcValue', fieldModel );\n\n\t\t\t// If value is 'undefined', then we got no response. Set value to field model value.\n\t\t\tif ( 'undefined' == typeof value ) {\n\t\t\t\tif ( jQuery.isNumeric( fieldModel.get( 'value' ) ) ) {\n\t\t\t\t\tvalue = fieldModel.get( 'value' );\n\t\t\t\t} else {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! fieldModel.get( 'visible' ) ) {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\n\t\t\treturn ( jQuery.isNumeric( value ) ) ? value : 0;\n\t\t},\n\n\t\t/**\n\t\t * Replace instances of key with calcValue. This is used to replace one key at a time.\n\t\t *\n\t\t * If no eq is passed, use calcModel eq.\n\t\t *\n\t\t * Returns a string with instances of key replaced with calcValue.\n\t\t * \n\t\t * @since  version\n\t\t * @param  string \tkey       \n\t\t * @param  string \tcalcValue \n\t\t * @param  string \teq        \n\t\t * @return string \teq      \n\t\t */\n\t\treplaceKey: function( type, key, calcValue, eq ) {\n\t\t\teq = eq || calcModel.get( 'eq' );\n\n\t\t\ttag = '{' + type + ':' + key + '}';\n\t\t\tvar reTag = new RegExp( tag, 'g' );\n\n\t\t\tcalcTag = '{' + type + ':' + key + ':calc}';\n\t\t\tvar reCalcTag = new RegExp( calcTag, 'g' );\n\n\t\t\teq = eq.replace( reTag, calcValue );\n\t\t\teq = eq.replace( reCalcTag, calcValue );\n\n\t\t\treturn eq;\n\t\t},\n\n\t\t/**\n\t\t * Takes a calcModel and returns a string eq with all keys replaced by their appropriate calcValues.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tcalcModel\n\t\t * @return string\t\t\teq\n\t\t */\n\t\treplaceAllKeys: function( calcModel ) {\n\t\t\tvar eq = calcModel.get( 'eq' );\n\t\t\tvar that = this;\n\t\t\t_.each( calcModel.get( 'fields' ), function( value, key ) {\n\t\t\t\teq = that.replaceKey( 'field', key, value, eq );\n\t\t\t} );\n\n\t\t\t// If we have any calc merge tags, replace those as well.\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t_.each( calcs, function( calc ) {\n\t\t\t\t\t// calc will be {calc:key}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\tvar targetCalcModel = calcModel.collection.findWhere( { name: name } );\n                    if( 'undefined' == typeof targetCalcModel ) return;\n\t\t\t\t\tvar re = new RegExp( calc, 'g' );\n\t\t\t\t\teq = eq.replace( re, targetCalcModel.get( 'value' ) );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn eq;\n\t\t},\n\n\t\t/**\n\t\t * Function that's called when a field within the calculation changes.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model calcModel\n\t\t * @param  backbone.model fieldModel\n\t\t * @return void\n\t\t */\n\t\tchangeField: function( calcModel, fieldModel ) {\n\t\t\tvar key = fieldModel.get( 'key' );\n\t\t\tvar value = this.getCalcValue( fieldModel );\n\t\t\tthis.updateCalcFields( calcModel, key, value );\n\t\t\tvar eqValues = this.replaceAllKeys( calcModel );\n\n            // Scrub unmerged tags (ie deleted/nox-existent fields/calcs, etc).\n            eqValues = eqValues.replace( /{([a-zA-Z0-9]|:|_|-)*}/g, '0' );\n\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n            try {\n\t\t\t     calcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n            } catch( e ) {\n                console.log( e );\n            }\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\n\t\t\t// Debugging console statement.\n\t\t\t// console.log( eqValues + ' = ' + calcModel.get( 'value' ) );\t\t\n\t\t},\n\n\t\tinitDisplayField: function( fieldModel ) {\n\n\t\t\tif( ! fieldModel.get( 'default' ) || 'string' != typeof fieldModel.get( 'default' ) ) return;\n\n\t\t\tvar calcs = fieldModel.get( 'default' ).match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t_.each( calcs, function( calcName ) {\n\t\t\t\t\tcalcName = calcName.replace( '{calc:', '' ).replace( '}', '' ).replace( ':2', '' );\n\t\t\t\t\tthis.displayFields[ calcName ] = this.displayFields[ calcName ] || [];\n\t\t\t\t\tthis.displayFields[ calcName ].push( fieldModel );\n\t\t\t\t}, this );\n\t\t\t}\n\t\t},\n\n\t\tupdateDisplayFields: function( calcModel ) {\n\t\t\tvar that = this;\n\t\t\tif ( 'undefined' != typeof this.displayFields[ calcModel.get( 'name' ) ] ) {\n\t\t\t\t_.each( this.displayFields[ calcModel.get( 'name' ) ], function( fieldModel ) {\n\n\t\t\t\t\tvar value = '';\n\n\t\t\t\t\t/**\n\t\t\t\t\t * if we have a html field, we want to use the actual\n\t\t\t\t\t * value and re-evaluate\n\t\t\t\t    **/\n\t\t\t\t\tif( \"html\" === fieldModel.get( 'type' ) ) {\n\t\t\t\t\t\tvalue = fieldModel.get( 'value' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if not a html field, use default to re-evaluate\n\t\t\t\t\t\tvalue = fieldModel.get( 'default' );\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t This is a fix for the issue of the merge tags being\n\t\t\t\t\t display'd\n\t\t\t\t\t */\n\n\t\t\t\t\t// Find spans with calc data-key values\n\t\t\t\t\tvar spans = value.match( new RegExp( /<span data-key=\"calc:(.*?)<\\/span>/g ));\n\t\t\t\t\t_.each( spans, function( spanVar ) {\n\t\t\t\t\t\t// transform the span back into a merge tag\n\t\t\t\t\t\tvar tmpCalcTag = \"{\" + spanVar.replace(\"<span\" +\n\t\t\t\t\t\t\t\" data-key=\\\"\", \"\" ).replace( /\">(.*?)<\\/span>/, \"\" ) + \"}\";\n\n\t\t\t\t\t\tvalue = value.replace( spanVar, tmpCalcTag );\n\t\t\t\t\t} );\n\t\t\t\t\tvar calcs = value.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t\t\t_.each( calcs, function( calc ) {\n//\t\t\t\t\t\tvar rounding = false;\n\t\t\t\t\t\t// calc will be {calc:key} or {calc:key:2}\n\t\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' ).replace( ':2', '' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * TODO: Bandaid for rounding calculations to two decimal places when displaying the merge tag.\n\t\t\t\t\t\t * Checks to see if we have a :2. If we do, remove it and set our rounding variable to true.\n\t\t\t\t\t\t */\n//\t\t\t\t\t\tif ( -1 != name.indexOf( ':2' ) ) {\n//\t\t\t\t\t\t\trounding = true;\n//\t\t\t\t\t\t\tname = name.replace( ':2', '' );\n//\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar calcModel = that.calcs[ fieldModel.get( 'formID' ) ].findWhere( { name: name } );\n\t\t\t\t\t\tvar re = new RegExp( calc, 'g' );\n\t\t\t\t\t\tvar calcValue = calcModel.get( 'value' ) ;\n//\t\t\t\t\t\tif ( rounding ) {\n//\t\t\t\t\t\t\tcalcValue = calcValue.toFixed( 2 );\n//\t\t\t\t\t\t\trounding = false;\n//\t\t\t\t\t\t}\n                        if( 'undefined' != typeof( calcValue ) ) {\n                            calcValue = that.applyLocaleFormatting( calcValue );\n                        }\n                        /*\n                         * We replace the merge tag with the value\n\t\t\t\t\t\t * surrounded by a span so that we can still find it\n\t\t\t\t\t\t * and not affect itself or other field merge tags\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * Unless this isn't a html field, then we just set\n\t\t\t\t\t\t  * value to calcValue\n\t\t\t\t\t\t*/\n                        if( \"html\" === fieldModel.get( 'type' ) ) {\n\t                        value = value.replace(re, \"<span data-key=\\\"calc:\" + name + \"\\\">\"\n\t\t                        + calcValue + \"</span>\");\n                        } else {\n                        \tvalue = calcValue;\n                        }\n\t\t\t\t\t} );\n\t\t\t\t\tfieldModel.set( 'value', value );\n\t\t\t\t\tif ( ! that.init[ calcModel.get( 'name' ) ] ) {\n\t\t\t\t\t\t// fieldModel.set( 'reRender', true );\n\t\t\t\t\t\tfieldModel.trigger( 'reRender' );\n\t\t\t\t\t}\n\t\t\t\t\tthat.init[ calcModel.get( 'name' ) ] = false;\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tgetCalc: function( name, formID ) {\n\t\t\treturn this.calcs[ formID ].findWhere( { name: name } );\n\t\t},\n\n\t\tchangeCalc: function( calcModel, targetCalcModel ) {\n\t\t\tvar eqValues = this.replaceAllKeys( calcModel );\n\t\t\teqValues = eqValues.replace( '[', '' ).replace( ']', '' );\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n            try {\n\t\t\t     calcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n            } catch( e ) {\n                console.log( e );\n            }\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\t\t},\n        \n        /**\n         * Function to apply Locale Formatting to Calculations\n         * @since Version 3.1\n         * @param Str number\n         * \n         * @return Str\n         */\n        applyLocaleFormatting: function( number ) {\n            \n            // Split our string on the decimal to preserve context.\n            var splitNumber = number.split('.');\n            // If we have more than one element (if we had a decimal point)...\n            if ( splitNumber.length > 1 ) {\n                // Update the thousands and remerge the array.\n                splitNumber[ 0 ] = splitNumber[ 0 ].replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n                var formattedNumber = splitNumber.join( nfi18n.decimal_point );\n            }\n            // Otherwise (we had no decimal point)...\n            else {\n                // Update the thousands.\n                var formattedNumber = number.replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n            }\n            return formattedNumber;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldDate',[], function() {\n    var controller = Marionette.Object.extend({\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'date' ), 'render:view', this.initDatepicker );\n        },\n\n        initDatepicker: function ( view ) {\n\n            var dateFormat = view.model.get( 'date_format' );\n\n            // For \"default\" date format, convert PHP format to JS compatible format.\n            if( '' == dateFormat || 'default' == dateFormat ){\n                dateFormat = this.convertDateFormat( nfi18n.dateFormat );\n            }\n\n            var el = jQuery( view.el ).find( '.nf-element' )[0];\n            var dateObject = pikadayResponsive( el, {\n                format: dateFormat,\n                outputFormat: dateFormat,\n                classes: jQuery( el ).attr( \"class\" ),\n                placeholder: view.model.get( 'placeholder' ),\n                pikadayOptions: {\n                    yearRange:  this.getYearRange( view.model ),\n                    minDate: this.getMinDate( view.model ),\n                    maxDate: this.getMaxDate( view.model ),\n                    firstDay: parseInt( nfi18n.startOfWeek )\n                }\n            } );\n            if ( 1 == view.model.get( 'date_default' ) ) {\n               dateObject.setDate( moment() );\n            }\n\n            nfRadio.channel( 'pikaday' ).trigger( 'init', dateObject, view.model );\n        },\n\n        getYearRange: function( fieldModel ) {\n            var yearRange      = 10;\n            var yearRangeStart = fieldModel.get( 'year_range_start' );\n            var yearRangeEnd   = fieldModel.get( 'year_range_end'   );\n\n            if( yearRangeStart && yearRangeEnd ){\n                return [ yearRangeStart, yearRangeEnd ];\n            } else if( yearRangeStart ) {\n                yearRangeEnd = yearRangeStart + yearRange;\n                return [ yearRangeStart, yearRangeEnd ];\n            } else if( yearRangeEnd ) {\n                yearRangeStart = yearRangeEnd - yearRange;\n                return [ yearRangeStart, yearRangeEnd ];\n            }\n\n            return yearRange;\n        },\n\n        getMinDate: function( fieldModel ) {\n            var minDate = null;\n            var yearRangeStart = fieldModel.get( 'year_range_start' );\n\n            if( yearRangeStart ) {\n                return new Date( yearRangeStart, 0, 1 );\n            }\n\n            return minDate;\n        },\n\n        getMaxDate: function( fieldModel ) {\n            var maxDate = null;\n            var yearRangeEnd   = fieldModel.get( 'year_range_end' );\n\n            if( yearRangeEnd ) {\n                return new Date( yearRangeEnd, 11, 31 );\n            }\n\n            return maxDate;\n        },\n        \n        convertDateFormat: function( dateFormat ) {\n            // http://php.net/manual/en/function.date.php\n            // https://github.com/dbushell/Pikaday/blob/master/README.md#formatting\n            // Note: Be careful not to add overriding replacements. Order is important here.\n\n            /** Day */\n            dateFormat = dateFormat.replace( 'D', 'ddd' ); // @todo Ordering issue?\n            dateFormat = dateFormat.replace( 'd', 'DD' );\n            dateFormat = dateFormat.replace( 'l', 'dddd' );\n            dateFormat = dateFormat.replace( 'j', 'D' );\n            dateFormat = dateFormat.replace( 'N', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'S', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'w', 'd' );\n            dateFormat = dateFormat.replace( 'z', '' ); // Not Supported\n\n            /** Week */\n            dateFormat = dateFormat.replace( 'W', 'W' );\n\n            /** Month */\n            dateFormat = dateFormat.replace( 'M', 'MMM' ); // \"M\" before \"F\" or \"m\" to avoid overriding.\n            dateFormat = dateFormat.replace( 'F', 'MMMM' );\n            dateFormat = dateFormat.replace( 'm', 'MM' );\n            dateFormat = dateFormat.replace( 'n', 'M' );\n            dateFormat = dateFormat.replace( 't', '' );  // Not Supported\n\n            // Year\n            dateFormat = dateFormat.replace( 'L', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'o', 'YYYY' );\n            dateFormat = dateFormat.replace( 'Y', 'YYYY' );\n            dateFormat = dateFormat.replace( 'y', 'YY' );\n\n            // Time - Not supported\n            dateFormat = dateFormat.replace( 'a', '' );\n            dateFormat = dateFormat.replace( 'A', '' );\n            dateFormat = dateFormat.replace( 'B', '' );\n            dateFormat = dateFormat.replace( 'g', '' );\n            dateFormat = dateFormat.replace( 'G', '' );\n            dateFormat = dateFormat.replace( 'h', '' );\n            dateFormat = dateFormat.replace( 'H', '' );\n            dateFormat = dateFormat.replace( 'i', '' );\n            dateFormat = dateFormat.replace( 's', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n            dateFormat = dateFormat.replace( 'v', '' );\n\n            // Timezone - Not supported\n            dateFormat = dateFormat.replace( 'e', '' );\n            dateFormat = dateFormat.replace( 'I', '' );\n            dateFormat = dateFormat.replace( 'O', '' );\n            dateFormat = dateFormat.replace( 'P', '' );\n            dateFormat = dateFormat.replace( 'T', '' );\n            dateFormat = dateFormat.replace( 'Z', '' );\n\n            // Full Date/Time - Not Supported\n            dateFormat = dateFormat.replace( 'c', '' );\n            dateFormat = dateFormat.replace( 'r', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n\n            return dateFormat;\n        }\n    });\n\n    return controller;\n});\n\n","define('controllers/fieldRecaptcha',[], function() {\n    var controller = Marionette.Object.extend({\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'recaptcha' ), 'init:model',      this.initRecaptcha  );\n            this.listenTo( nfRadio.channel( 'forms' ),     'submit:response', this.resetRecaptcha );\n        },\n\n       \tinitRecaptcha: function ( model ) {\n       \t\tnfRadio.channel( 'recaptcha' ).reply( 'update:response', this.updateResponse, this, model.id );\n        },\n\n        updateResponse: function( response, fieldID ) {\n        \tvar model = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\tmodel.set( 'value', response );\n            nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'required-error' );\n        },\n\n        resetRecaptcha: function() {\n\t\t\tvar recaptchaID = 0;\n\t\t\tjQuery( '.g-recaptcha' ).each( function() {\n\t\t\t\ttry {\n\t\t\t\t\tgrecaptcha.reset( recaptchaID );\n\t\t\t\t} catch( e ){\n\t\t\t\t\tconsole.log( 'Notice: Error trying to reset grecaptcha.' );\n\t\t\t\t}\n\t\t\t\trecaptchaID++;\n\t\t\t} );\n        }\n    });\n\n    return controller;\n} );\n","define('controllers/fieldHTML',[], function() {\n    var controller = Marionette.Object.extend({\n\n        htmlFields: [],\n        trackedMergeTags: [],\n\n        initialize: function () {\n            this.listenTo( Backbone.Radio.channel( 'fields-html' ), 'init:model', this.setupFieldMergeTagTracking );\n        },\n\n        setupFieldMergeTagTracking: function( fieldModel ) {\n            this.htmlFields.push( fieldModel );\n\n            var formID = fieldModel.get( 'formID' );\n\n            this.listenTo( nfRadio.channel( 'form-' + formID ), 'init:model', function( formModel ){\n\n                var mergeTags = fieldModel.get( 'default' ).match( new RegExp( /{field:(.*?)}/g ) );\n                if ( ! mergeTags ) return;\n\n                _.each( mergeTags, function( mergeTag ) {\n                    var fieldKey = mergeTag.replace( '{field:', '' ).replace( '}', '' );\n                    var fieldModel = formModel.get( 'fields' ).findWhere({ key: fieldKey });\n                    if( 'undefined' == typeof fieldModel ) return;\n\n                    this.trackedMergeTags.push( fieldModel );\n                    this.listenTo( nfRadio.channel( 'field-' + fieldModel.get( 'id' ) ), 'change:modelValue', this.updateFieldMergeTags );\n                }, this );\n\n                // Let's get this party started!\n                this.updateFieldMergeTags();\n            }, this );\n        },\n\n        updateFieldMergeTags: function( fieldModel ) {\n            _.each( this.htmlFields, function( htmlFieldModel ){\n                var value = htmlFieldModel.get( 'value' );\n               _.each( this.trackedMergeTags, function( fieldModel ){\n\n                   /* Search the value for any spans with mergetag data-key\n                   * values\n                   */\n                   var spans = value.match( new RegExp( /<span data-key=\"field:(.*?)<\\/span>/g ) );\n\t               _.each( spans, function( spanVar ) {\n\t                   /* See if the span string contains the current\n                       * fieldModel's key. If so replace the span with a\n                       * merge tag for evaluation.\n                       */\n                       if( -1 < spanVar.indexOf( \"data-key=\\\"field:\" + fieldModel.get( 'key' ) ) ) {\n\t                       value = value.replace( spanVar, \"{field:\" + fieldModel.get( 'key' ) + \"}\" );\n                       }\n\t               } );\n\n                    var mergeTag = '{field:' + fieldModel.get( 'key' ) + '}';\n\t               /* We replace the merge tag with the value\n\t               * surrounded by a span so that we can still find it\n\t               * and not affect itself or other field merge tags\n\t               */\n                    value = value.replace( mergeTag, \"<span data-key=\\\"field:\"\n                        + fieldModel.get( 'key' ) + \"\\\">\"\n                        + fieldModel.get( 'value' ) + \"</span>\" );\n               }, this ) ;\n               htmlFieldModel.set( 'value', value );\n               htmlFieldModel.trigger( 'reRender' );\n            }, this );\n        }\n\n    });\n\n    return controller;\n});\n\n","/**\n * When a form is loaded, enable any help text that appears on the page.\n */\ndefine('controllers/helpText',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'render:view', this.initHelpText );\n\n\t\t\tnfRadio.channel( 'form' ).reply( 'init:help', this.initHelpText );\n\t\t},\n\n\t\tinitHelpText: function( view ) {\n\t\t\tjQuery( view.el ).find( '.nf-help' ).each( function() {\n\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\tcontent: jQuery( this ).data( 'text' )\n\t\t\t\t});\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When a form is loaded, enable any rtes in textareas.\n */\ndefine('controllers/fieldTextareaRTE',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'textarea' ), 'render:view', this.initTextareaRTEs );\n\t\t\tthis.listenTo( nfRadio.channel( 'textarea' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tthis.currentContext = {};\n\n\t\t\tif( 'undefined' == typeof jQuery.summernote ) return;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      };\n\n\t\t},\n\n\t\tinitTextareaRTEs: function( view ) {\n\t\t\tif ( 1 != view.model.get( 'textarea_rte' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t];\n\n\t\t\tif ( 1 == view.model.get( 'textarea_media' ) && 0 != userSettings.uid ) {\n\t\t\t\ttoolbar.push( [ 'tools', [ 'mediaButton' ] ] );\n\t\t\t}\n\n\t\t\tjQuery( view.el ).find( '.nf-element' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonChange: function( e ) {\n\t\t\t\t\t\tview.model.set( 'value', jQuery( this ).summernote( 'code' ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar linkMenu = jQuery( view.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: nfi18n.fieldTextareaRTEInsertLink,\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: nfi18n.fieldTextareaRTEInsertMedia,\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: nfi18n.fieldTextareaRTESelectAFile,\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tcontext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tcontext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tcontext.invoke( 'editor.createLink', { text: media.filename, url: media.url } );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldStarRating',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n        \tthis.listenTo( nfRadio.channel( 'starrating' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'starrating' ), 'render:view', this.initRating );\n        },\n\n        register: function( model ) {\n\t\t\tmodel.set( 'renderRatings', this.renderRatings );\n\t\t},\n\n        initRating: function( view ){\n            jQuery( view.el ).find( '.starrating' ).rating();\n\n        },\n\n        renderRatings: function() {\n        \tvar html = document.createElement( 'span' );\n        \t// changed from 'default' to 'number_of_stars'\n        \tfor (var i = 0; i <= this.number_of_stars - 1; i++) {\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-starrating-star' );\n                var num = i + 1;\n                var checked = '';\n\n                // Check to see if current 'star' matches the default value\n\t\t        if ( this.value == num ) {\n\t\t        \tchecked = 'checked';\n\t\t        }\n                var htmlFragment = template( { id: this.id, classes: this.classes, num: num, checked: checked } );\n                html.appendChild(\n                    document.createRange().createContextualFragment( htmlFragment )\n                );\n        \t}\n        \treturn html.innerHTML;\n        }\n\n    });\n\n    return controller;\n});\n\n","define('controllers/fieldTerms',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'terms' ), 'init:model', this.register );\n        },\n\n        register: function( model ) {\n            // nfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:extra', e, this.model );\n            this.listenTo( nfRadio.channel( 'field-' + model.get( 'id' ) ), 'click:extra', this.clickExtra );\n            this.listenTo( nfRadio.channel( 'field-' + model.get( 'id' ) ), 'keyup:field', this.keyUpExtra );\n        },\n        \n        clickExtra: function( e, model ) {\n            var el = jQuery( e.currentTarget );\n            var value = el.parent().find( '.extra-value' ).val();\n            this.addOption( model, value );\n        },\n\n        keyUpExtra: function( el, model, keyCode ) {\n            if( 13 != keyCode ) return;\n            this.addOption( model, el.val() );\n        },\n\n        addOption: function( model, value ) {\n            if( ! value ) return;\n            var options = model.get( 'options' );\n            var new_option = {\n                label: value,\n                value: value,\n                selected: 0,\n            };\n            options.push( new_option );\n\n            var selected = model.get( 'value' );\n            selected.push( value );\n\n            // model.set( 'reRender', true );\n            model.trigger( 'reRender' );\n        }\n        \n    });\n\n    return controller;\n} );\n","/**\n * Before we display our form content, ask if anyone wants to give us a different view.\n * Before we do anything with the data, pass it through any loading filters.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our fieldContent view and load filter arrays.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t\t * Listen for requests to add new formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t * TODO: Remove eventually.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/fieldItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\n\t\tinitialize: function() {\n    \t\tthis.listenTo( this.model, 'reRender', this.render, this );\n    \t\tthis.listenTo( this.model, 'change:addWrapperClass', this.addWrapperClass, this );\n    \t\tthis.listenTo( this.model, 'change:removeWrapperClass', this.removeWrapperClass, this );\n    \t\tthis.listenTo( this.model, 'change:invalid', this.toggleAriaInvalid, this );\n\n    \t\tthis.template = '#tmpl-nf-field-' + this.model.get( 'wrap_template' );\n\t\t},\n\n\t\ttest: function( model ) {\n\t\t\tconsole.log( 'firing from trigger 1' );\n\t\t},\n\n\t\taddWrapperClass: function() {\n\t\t\tvar cl = this.model.get( 'addWrapperClass' );\n\t\t\tif ( '' != cl ) {\n\t\t\t\tjQuery( this.el ).addClass( cl );\n\t\t\t\tthis.model.set( 'addWrapperClass', '' );\n\t\t\t}\n\t\t},\n\n\t\tremoveWrapperClass: function() {\n\t\t\tvar cl = this.model.get( 'removeWrapperClass' );\n\t\t\tif ( '' != cl ) {\n\t\t\t\tjQuery( this.el ).removeClass( cl );\n\t\t\t\tthis.model.set( 'removeWrapperClass', '' );\n\t\t\t}\n\t\t},\n\n\t\ttoggleAriaInvalid: function() {\n\t\t\tvar invalid = this.model.get( 'invalid' );\n\t\t\tjQuery( '[aria-invalid]', this.el ).attr( 'aria-invalid', JSON.stringify( invalid ) );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t   \t\t/*\n    \t\t * If we have an input mask, init that mask.\n    \t\t * TODO: Move this to a controller so that the logic isn't in the view.\n    \t\t */\n    \t\tif ( 'undefined' != typeof this.model.get( 'mask' ) && '' != jQuery.trim( this.model.get( 'mask' ) ) ) {\n    \t\t\tif ( 'custom' == this.model.get( 'mask') ) {\n    \t\t\t\tvar mask = this.model.get( 'custom_mask' );\n    \t\t\t} else {\n    \t\t\t\tvar mask = this.model.get( 'mask' );\n    \t\t\t}\n\n\t\t\t\t/* POLYFILL */ Number.isInteger = Number.isInteger || function(value) { return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value; };\n    \t\t\tif ( Number.isInteger( mask ) ) {\n    \t\t\t\tmask = mask.toString();\n    \t\t\t}\n\n\t\t\t\tif ( 'currency' == mask ) {\n\t\t\t\t\tvar form = nfRadio.channel( 'app' ).request( 'get:form', this.model.get( 'formID' ) );\n\n\t\t\t\t\tvar thousands_sep = form.get( 'thousands_sep' );\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: if we have a &nbsp; , replace it with a string with a space.\n\t\t\t\t\t */\n\t\t\t\t\tif ( '&nbsp;' == thousands_sep ) {\n\t\t\t\t\t\tthousands_sep = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tvar currencySymbol = jQuery( '<div/>' ).html( form.get( 'currencySymbol' ) ).text();\n\t\t\t\t\tthousands_sep = jQuery( '<div/>' ).html( thousands_sep ).text();\n\t\t\t\t\tvar decimal_point = jQuery( '<div/>' ).html( form.get( 'decimal_point' ) ).text();\n\t\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Currently, these options use the plugin-wide defaults for locale.\n\t\t\t\t\t * When per-form locales are implemented, these will need to be revisited.\n\t\t\t\t\t */\n\t\t\t\t\tvar autoNumericOptions = {\n\t\t\t\t\t    digitGroupSeparator        : thousands_sep,\n\t\t\t\t\t    decimalCharacter           : decimal_point,\n\t\t\t\t\t    currencySymbol             : currencySymbol\n\t\t\t\t\t};\n\n\t\t\t\t\t// Initialization\n\t\t\t\t\tvar autoN_el = jQuery(jQuery( this.el ).find( '.nf-element' )[ 0 ]);\n\t\t\t\t\tnew AutoNumeric( jQuery( this.el ).find( '.nf-element' )[ 0 ], autoNumericOptions );\n\t\t\t\t\t// update the value for the model so it gets saved to\n\t\t\t\t\t// the database properly\n\t\t\t\t\tvar context = this;\n\t\t\t\t\tautoN_el.on( 'change', function( e ) {\n\t\t\t\t\t\tcontext.model.set( 'value', e.target.value );\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tjQuery( this.el ).find( '.nf-element' ).mask( mask );\n\t\t\t\t} \t\t\t\n\t   \t\t}\n\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'render:view', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:view', this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t\t\t\trenderElement: function(){\n\t\t\t\t\tvar tmpl = _.find( this.element_templates, function( tmpl ) {\n\t\t\t\t\t\tif ( 0 < jQuery( '#tmpl-nf-field-' + tmpl ).length ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-' + tmpl );\n\t\t\t\t\treturn template( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-label' );\n\t\t\t\t\treturn template( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function () {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.customLabelClasses ) {\n\t\t\t\t\t\tclasses = this.customLabelClasses( classes );\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderPlaceholder: function() {\n\t\t\t\t\tvar placeholder = this.placeholder;\n\n\t\t\t\t\tif ( 'undefined' != typeof this.customPlaceholder ) {\n\t\t\t\t\t\tplaceholder = this.customPlaceholder( placeholder );\n\t\t\t\t\t}\n\n\t\t\t\t\tif( '' != jQuery.trim( placeholder ) ) {\n\t\t\t\t\t\treturn 'placeholder=\"' + placeholder + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderWrapClass: function() {\n\t\t\t\t\tvar wrapClass = 'field-wrap ' + this.type + '-wrap';\n\n\t\t\t\t\t// Check if type and parentType are different. If, so\n\t\t\t\t\t// then add appropriate parentType wrap class\n\t\t\t\t\tif ( this.type !== this.parentType ) {\n\t\t\t\t\t\twrapClass = wrapClass + ' ' + this.parentType + '-wrap';\n\t\t\t\t\t}\n\t\t\t\t\t// If we have an old_classname defined, output wrap class for backward compatibility\n\t\t\t\t\tif ( 'undefined' != typeof this.old_classname && 0 < jQuery.trim( this.old_classname ).length ) {\n\t\t\t\t\t\twrapClass += ' ' + this.old_classname + '-wrap';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof customWrapClass ) {\n\t\t\t\t\t\twrapClass = customWrapClass( wrapClass );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn wrapClass;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses = classes.replace( 'nf-error', '' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof this.element_class && 0 < jQuery.trim( this.element_class ).length ) {\n\t\t\t\t\t\tclasses += ' ' + this.element_class;\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * If we have a function for adding extra classes, add those.\n\t\t\t\t\t */\n\n\t\t\t\t\tif ( 'undefined' != typeof this.customClasses ) {\n\t\t\t\t\t\tclasses = this.customClasses( classes );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\tmaybeDisabled: function() {\n\t\t\t\t\tif ( 1 == this.disable_input ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tmaybeDisableAutocomplete: function() {\n\t\t\t\t\tif ( 1 == this.disable_browser_autocomplete ) {\n\t\t\t\t\t\treturn 'autocomplete=\"off\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tmaybeInputLimit: function() {\n\t\t\t\t\tif ( 'characters' == this.input_limit_type && '' != jQuery.trim( this.input_limit ) ) {\n\t\t\t\t\t\treturn 'maxlength=\"' + this.input_limit + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tgetHelpText: function() {\n\t\t\t\t\t// this.help_text = jQuery( this.help_text ).html();\n\t\t\t\t\t// return ( 'undefined' != typeof this.help_text ) ? this.help_text.replace(/\"/g, \"&quot;\") : '';\n\t\t\t\t\treturn ( 'undefined' != typeof this.help_text ) ? this.help_text : '';\n\t\t\t\t},\n\n\t\t\t\tmaybeRenderHelp: function() {\n\n\t\t\t\t\t// use jQuery().text() to make sure help_text has actual\n\t\t\t\t\t// text and not just HTML tags.\n\t\t\t\t\tvar check_text_par = document.createElement( 'p' );\n                    check_text_par.innerHTML = this.help_text;\n\n                    var shouldRenderHelpText = false;\n                    // Check for text or image tags\n\t\t\t\t\tif ( 0 != jQuery.trim( jQuery( check_text_par ).text() ).length\n\t\t\t\t\t\t|| 0 < jQuery( check_text_par ).find('img').length ) {\n                    \tshouldRenderHelpText = true;\n                    }\n\n\t\t\t\t\tif ( 'undefined' != typeof this.help_text && shouldRenderHelpText ) {\n\t\t\t\t\t\tvar icon = document.createElement( 'span' );\n\t\t\t\t\t\ticon.classList.add( 'fa', 'fa-info-circle', 'nf-help' );\n\t\t\t\t\t\ticon.setAttribute( 'data-text', this.getHelpText() );\n\t\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderDescText: function() {\n\t\t\t\t\tif ( 'undefined' == typeof this.desc_text ) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tvar check, checkText;\n\t\t\t\t\tcheckText = document.createTextNode( this.desc_text );\n\t\t\t\t\tcheck = document.createElement( 'p' );\n\t\t\t\t\tcheck.appendChild( checkText );\n\t\t\t\t\tif ( 0 != jQuery.trim( jQuery( check ).text() ).length ) {\n\t\t\t\t\t\tvar descriptionText, fieldDescription;\n                        descriptionText  = document.createRange().createContextualFragment( this.desc_text );\n                        fieldDescription  = document.createElement( 'div' );\n\t\t\t\t\t\tfieldDescription.classList.add( 'nf-field-description' );\n\t\t\t\t\t\tfieldDescription.appendChild( descriptionText );\n\t\t\t\t\t\treturn fieldDescription.outerHTML;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderCurrencyFormatting: function( number ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Our number will have a . as a decimal point. We want to replace that with our locale decimal, nfi18n.decimal_point.\n\t\t\t\t\t */\n\t\t\t\t\tvar replacedDecimal = number.toString().replace( '.', '||' );\n\t\t\t\t\t/*\n\t\t\t\t\t * Add thousands separator. Our original number var won't have thousands separators.\n\t\t\t\t\t */\n\t\t\t\t\tvar replacedThousands = replacedDecimal.replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n\t\t\t\t\tvar formattedNumber = replacedThousands.replace( '||', nfi18n.decimal_point );\n\n\t\t\t\t\tvar form = nfRadio.channel( 'app' ).request( 'get:form', that.model.get( 'formID' ) );\n\t\t\t\t\tvar currency_symbol = form.get( 'settings' ).currency_symbol;\n\t\t\t\t\treturn currency_symbol + formattedNumber;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .nf-element': 'fieldChange',\n\t\t\t'keyup .nf-element': 'fieldKeyup',\n\t\t\t'click .nf-element': 'fieldClick',\n\t\t\t'click .extra': 'extraClick',\n\t\t\t'blur .nf-element': 'fieldBlur'\n\t\t},\n\n\t\tfieldChange: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tvar response = nfRadio.channel( 'nfAdmin' ).request( 'change:field', el, this.model );\n\t\t},\n\n\t\tfieldKeyup: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tvar keyCode = e.keyCode;\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t},\n\n\t\tfieldClick: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:field', el, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'click:field', el, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'click:field', el, this.model );\n\t\t},\n\n\t\textraClick: function( e ) {\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:extra', e, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'click:extra', e, this.model );\n\t\t},\n\n\t\tfieldBlur: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'blur:field', el, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'blur:field', el, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'blur:field', el, this.model );\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'attach:view', this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/beforeField',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-before'\n    });\n\n    return view;\n} );\n","define( 'views/fieldErrorItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'nf-section',\n\t\ttemplate: '#tmpl-nf-field-error',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/fieldErrorCollection',['views/fieldErrorItem'], function( fieldErrorItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: \"nf-errors\",\n\t\tchildView: fieldErrorItem,\n\n\t\tinitialize: function( options ) {\n\t\t\tthis.fieldModel = options.fieldModel;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( 0 == this.fieldModel.get( 'errors' ).models.length ) {\n                this.fieldModel.removeWrapperClass( 'nf-error' );\n                this.fieldModel.removeWrapperClass( 'nf-fail' );\n                this.fieldModel.addWrapperClass( 'nf-pass' );\n                this.fieldModel.setInvalid( false );\n            } else {\n                this.fieldModel.removeWrapperClass( 'nf-pass' );\n                this.fieldModel.addWrapperClass( 'nf-fail' );\n                this.fieldModel.addWrapperClass( 'nf-error' );\n                this.fieldModel.setInvalid( true );\n            }\n\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/inputLimit',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-input-limit',\n\n        initialize: function() {\n        \tthis.listenTo( nfRadio.channel( 'field-' + this.model.get( 'id' ) ), 'keyup:field', this.updateCount );\n        \tthis.count = this.model.get( 'input_limit' );\n        \tthis.render();\n        },\n\n        updateCount: function( el, model ) {\n            var value = jQuery( el ).val();\n            var regex = /\\s+/gi;\n            var words = value.trim().replace(regex, ' ').split(' ');\n            var wordCount = words.length;\n            var charCount = value.length;\n\n            if ( 'characters' == this.model.get( 'input_limit_type' ) ) {\n                jQuery( el ).attr( 'maxlength', this.model.get( 'input_limit' ) );\n                this.count = this.model.get( 'input_limit' ) - charCount;\n            } else {\n                this.count = this.model.get( 'input_limit' ) - wordCount;\n                var limit = this.model.get( 'input_limit' );\n                if( wordCount > limit ){\n                    jQuery( el ).val( words.slice( 0, limit).join( ' ' ) );\n                }\n            }\n\n        \tthis.render();\n        },\n\n        templateHelpers: function() {\n        \tvar that = this;\n        \treturn {\n        \t\tcurrentCount: function() {\n        \t\t\treturn that.count;\n        \t\t}\n        \t}\n        }\n\n    });\n\n    return view;\n} );\n","define( 'views/afterField',['views/fieldErrorCollection', 'views/inputLimit'], function( fieldErrorCollection, InputLimitView ) {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-after',\n\n        initialize: function() {\n    \t\tthis.model.on( 'change:errors', this.changeError, this );\n        },\n\n        onRender: function() {\n        \t/*\n        \t * If we have an error, render our error view.\n        \t * TODO: Perhaps move to a controller?\n        \t */\n        \tvar errorEl = jQuery( this.el ).children( '.nf-error-wrap' );\n    \t\tthis.errorCollectionView = new fieldErrorCollection( { el: errorEl, collection: this.model.get( 'errors' ), fieldModel: this.model } );\n            if ( 0 < this.model.get( 'errors' ).length ) {\n               this.errorCollectionView.render(); \n            }\n            \n    \t\t/*\n    \t\t * If we have an input limit set, render the view that contains our counter\n    \t\t * TODO: Move this to a controller so that the logic isn't in the view.\n    \t\t */\n    \t\tif ( 'undefined' != typeof this.model.get( 'input_limit' ) && '' != jQuery.trim( this.model.get( 'input_limit' ) ) ){\n    \t\t\tvar inputLimitEl = jQuery( this.el ).children( '.nf-input-limit');\n    \t\t\tthis.inputLimitView = new InputLimitView( { el: inputLimitEl, model: this.model } );\n    \t\t}\n        },\n\n        changeError: function() {\n\t\t\tthis.errorCollectionView.render();\n\t\t},\n\n    });\n\n    return view;\n} );\n","define( 'views/fieldLayout',['views/fieldItem', 'views/beforeField', 'views/afterField'], function( fieldItem, beforeField, afterField ) {\n\n    var view = Marionette.LayoutView.extend({\n        tagName: 'nf-field',\n\n        regions: {\n            beforeField: '.nf-before-field',\n            field: '.nf-field',\n            afterField: '.nf-after-field',\n        },\n\n        initialize: function() {\n            this.listenTo( this.model, 'change:visible', this.render, this );\n        },\n\n        getTemplate: function() {\n            if ( this.model.get( 'visible' ) ) {\n                return '#tmpl-nf-field-layout';\n            } else {\n                return '#tmpl-nf-empty';\n            }\n        },\n\n        onRender: function() {\n            if ( this.model.get( 'visible' ) ) {\n                this.beforeField.show( new beforeField( { model: this.model } ) );\n                this.field.show( new fieldItem( { model: this.model } ) );\n                this.afterField.show( new afterField( { model: this.model } ) );\n            }\n        },\n\n        templateHelpers: function() {\n            return {\n                renderContainerClass: function() {\n                    var containerClass = ' label-' + this.label_pos + ' ';\n                    // If we have a description position, add that to our container.\n                    if ( 'undefined' != typeof this.desc_pos ) {\n                        containerClass += 'desc-' + this.desc_pos + ' ';\n                    }\n                    // if we have a container_class field setting, add that to our container.\n                    if ( 'undefined' != typeof this.container_class && 0 < jQuery.trim( this.container_class ).length ) {\n                        containerClass += this.container_class + ' ';\n                    }\n\n                    //check if the parent type and type are different. If\n                    // so, add parent type container styling\n                    \n                    if( this.type !== this.parentType ) {\n                        containerClass += ' ' + this.parentType + '-container';\n                    }\n                    return containerClass;\n                }\n            }\n        }\n\n    });\n\n    return view;\n} );\n\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/loadViews',['views/fieldItem', 'views/fieldLayout'], function( fieldItemView, fieldLayoutView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldLayout', this.getFieldLayout );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetFieldLayout: function() {\n\t\t\treturn fieldLayoutView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * If a form has at least one field error, we should disable the submit button and add a form error.\n * If a form had errors, but all the field errors have been removed, we should remove the form error.\n *\n * @since 3.0\n */\ndefine('controllers/formErrors',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Listen for error messages being added to and removed from fields.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:error', this.addError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'remove:error', this.removeError );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get form errors\n\t\t\t */\n\t\t\tnfRadio.channel( 'form' ).reply( 'get:errors', this.getFormErrors );\n\t\t},\n\n\t\taddError: function( fieldModel, errorID, errorMsg ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\t/*\n\t\t\t * We store our errors in this object by field ID so that we don't have to loop over all our fields when we're testing for errors.\n\t\t\t * They are stored as an object within an array, using the field ID as the key.\n\t\t\t *\n\t\t\t * If we haven't setup an array item for this field, set it as an object.\n\t\t\t */\n\t\t\tif ( 'undefined' == typeof formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] ) {\n\t\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] = {};\n\t\t\t}\n\t\t\t// Add an error to our tracking array\n\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ][ errorID ] = errorMsg;\n\t\t\t/*\n\t\t\t * We have at least one field error, so submmission should be prevented.\n\t\t\t * Add a form error.\n\t\t\t */\n\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'add:error', 'field-errors', formModel.get( 'settings' ).formErrorsCorrectErrors );\n\t\t},\n\n\t\tremoveError: function( fieldModel, errorID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\t// Remove this error ID from our tracking array.\n\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] = _.omit( formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ], errorID );\n\t\t\t/*\n\t\t\t * If we don't have any more error IDs on this field, then we need to remove this field from the array.\n\t\t\t *\n\t\t\t * Then, if the fieldErrors tracking array has a length of 0, we remove our form error, because all field errors have been dealt with.\n\t\t\t */\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] ) ) {\n\t\t\t\tdelete formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ];\n\t\t\t}\n\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' ) ) ) {\n\t\t\t\t// Remove our form error.\n\t\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'remove:error', 'field-errors' );\n\t\t\t}\n\t\t},\n\n\t\tgetFormErrors: function( formID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\n\t\t\tvar errors = false;\n\t\t\t\n\t\t\tif ( formModel ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have any errors on our form model.\n\t\t\t\t */\n\t\t\t\tif ( 0 !== formModel.get( 'errors' ).length ) {\n\t\t\t\t\t_.each( formModel.get( 'errors' ).models, function( error ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ error.get( 'id' ) ] = error.get( 'msg' );\n\t\t\t\t\t} );\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\t\t\treturn errors;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles submission of our form.\n */\ndefine('controllers/submit',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'init:model', this.registerSubmitHandler );\n\t\t},\n\n\t\t/**\n\t\t * Register the submission handler function.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Backbone.model \tformModel\n\t\t * @return void\n\t\t */\n\t\tregisterSubmitHandler: function( formModel ) {\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).reply( 'submit', this.submit );\n\t\t},\n\n\t\t/**\n\t\t * Handles the actual submission of our form.\n\t\t * When we submit:\n\t\t *\n\t\t * 1) Send out a message saying that we're about to begin form submission.\n\t\t * 2) Check the form for errors\n\t\t * 3) Submit the data\n\t\t * 4) Send out a message with our response\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Backbone.model \tformModel\n\t\t * @return void\n\t\t */\n\t\tsubmit: function( formModel ) {\n\n\t\t\t/*\n\t\t\t * Send out a radio message saying that we're about to begin submitting.\n\t\t\t * First we send on the generic forms channel, and then on the form-specific channel.\n\t\t\t */\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'before:submit', formModel );\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'before:submit', formModel );\n\n\t\t\t/*\n\t\t\t * Validate our field models.\n\t\t\t */\n\t\t\tvar validate = nfRadio.channel( 'forms' ).request( 'maybe:validate', formModel );\n\t\t \tif( false !== validate ){\n\n                // When validating all fields, set clean to false to force validation.\n                _.each( formModel.get( 'fields' ).models, function( fieldModel ) {\n                    fieldModel.set( 'clean', false );\n                } );\n\n\t\t\t\t/*\n\t\t\t\t * This method is defined in our models/fieldCollection.js file,\n\t\t\t\t * except where overridden by an add-on (ie Layout & Styles).\n\t\t\t\t */\n\t\t\t\tformModel.get( 'formContentData' ).validateFields();\n\t\t\t}\n\n\t\t\tvar submit = nfRadio.channel( 'form-' + formModel.get( 'id' ) ).request( 'maybe:submit', formModel );\n\t\t\tif ( false == submit ) {\n\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:cancel', formModel );\n\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:cancel', formModel );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif( false !== validate ){\n\n\t\t\t\t// Ignore non-blocking errors.\n\t\t\t\tvar blockingFormErrors = _.filter( formModel.get( 'errors' ).models, function( error ){\n\n\t\t\t\t\t// Ignore email action related errors.\n\t\t\t\t\tif( 'invalid_email' == error.get( 'id' ) || 'email_not_sent' == error.get( 'id' ) ) return false;\n\n\t\t\t\t\treturn true; // Error is blocking.\n\t\t\t\t});\n\n\t\t\t\t/*\n\t\t\t\t * Make sure we don't have any form errors before we submit.\n\t\t\t\t * Return false if we do.\n\t\t\t\t */\n\t\t\t\tif ( 0 != _.size( blockingFormErrors ) ) {\n\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:failed', formModel );\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:failed', formModel );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message saying that we're about to begin submitting.\n\t\t\t * First we send on the generic forms channel, and then on the form-specific channel.\n\t\t\t */\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'after:submitValidation', formModel );\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'after:submitValidation', formModel );\n\n\t\t\t/*\n\t\t\t * Actually submit our form, and send out a message with our response.\n\t\t\t */\n\n \t\t\tvar formID = formModel.get( 'id' );\n\t\t\tvar fields = {};\n\t\t\t_.each( formModel.get( 'fields' ).models, function( field ) {\n\t\t\t\tvar fieldDataDefaults = { value:field.get( 'value' ), id:field.get( 'id' ) };\n\n\t\t\t\t// Add field data at the field ID for efficient access.\n\t\t\t\tfields[ field.get( 'id' ) ] = nfRadio.channel( field.get( 'type' ) ).request( 'get:submitData', fieldDataDefaults, field ) || fieldDataDefaults;;\n\t\t\t} );\n\t\t\tvar extra = formModel.get( 'extra' );\n\t\t\tvar settings = formModel.get( 'settings' );\n\t\t\tdelete settings.formContentData;\n\t\t\tvar formData = JSON.stringify( { id: formID, fields: fields, settings: settings, extra: extra } );\n\t\t\tvar data = {\n\t\t\t\t'action': 'nf_ajax_submit',\n\t\t\t\t'security': nfFrontEnd.ajaxNonce,\n\t\t\t\t'formData': formData\n\t\t\t}\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery.ajax({\n\t\t\t    url: nfFrontEnd.adminAjax,\n\t\t\t    type: 'POST',\n\t\t\t    data: data,\n\t\t\t    cache: false,\n\t\t\t   \tsuccess: function( data, textStatus, jqXHR ) {\n\t\t\t   \t\ttry {\n\t\t\t\t   \t\tvar response = data;\n\t\t\t\t        nfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t    \tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t    \tjQuery( document ).trigger( 'nfFormSubmitResponse', { response: response, id: formModel.get( 'id' ) } );\n\t\t\t   \t\t} catch( e ) {\n\t\t\t   \t\t\tconsole.log( e );\n\t\t\t   \t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t\tconsole.log( e );\n\t\t\t   \t\t}\n\n\t\t\t    },\n\t\t\t    error: function( jqXHR, textStatus, errorThrown ) {\n\t\t\t        // Handle errors here\n\t\t\t        console.log('ERRORS: ' + errorThrown);\n\t\t\t\t\tconsole.log( jqXHR );\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = jQuery.parseJSON( jqXHR.responseText );\n\t\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t}\n\n\t\t\t        // STOP LOADING SPINNER\n\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', 'error', textStatus, jqXHR, errorThrown );\n\t\t\t    }\n\t\t\t});\n\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define( 'views/fieldCollection',['views/fieldLayout'], function( fieldLayout ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'nf-fields-wrap',\n\t\tchildView: fieldLayout\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Default filters\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/defaultFilters',[ 'views/fieldCollection', 'models/fieldCollection' ], function( FieldCollectionView, FieldCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'before:filterData', this.registerDefaultDataFilter );\n\t\t},\n\n\t\tregisterDefaultDataFilter: function( formModel ) {\n\t\t\t/*\n\t\t\t * Set our default formContent load filter\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\t\t\t/*\n\t\t\t * Set our default formContentView.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData, formModel, context ) {\n\t\t\tvar fieldCollection = formModel.get( 'fields' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return formModel.get( 'fields' );\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn formModel.get( 'fields' ).findWhere( { key: key } );\n        \t}, this );\n\n        \tvar currentFieldCollection = new FieldCollection( fieldModels );\n\n        \tfieldCollection.on( 'reset', function( collection ) {\n        \t\tvar resetFields = [];\n        \t\tcurrentFieldCollection.each( function( fieldModel ) {\n        \t\t\tif ( 'submit' != fieldModel.get( 'type' ) ) {\n        \t\t\t\tresetFields.push( collection.findWhere( { key: fieldModel.get( 'key' ) } ) );\n        \t\t\t} else {\n        \t\t\t\tresetFields.push( fieldModel );\n        \t\t\t}\n        \t\t} );\n\n                currentFieldCollection.options = { formModel: formModel };\n        \t\tcurrentFieldCollection.reset( resetFields );\n        \t} );\n\n        \treturn currentFieldCollection;\n        },\n\n        defaultFormContentView: function() {\n        \treturn FieldCollectionView;\n        }\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Controller responsible for removing unique field errors.\n */\n\ndefine('controllers/uniqueFieldError',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Listen to keyup and field changes.\n\t\t\t *\n\t\t\t * If those fields have a unique field error, remove that error.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.removeError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'keyup:field', this.removeError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.removeError );\n\n\t\t},\n\n\t\tremoveError: function( el, model ) {\n\t\t\tmodel = model || el;\n\t\t\t/*\n\t\t\t * Remove any unique field errors.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'unique_field' );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","define(\n\t'controllers/loadControllers',[\n\t\t'controllers/formData',\n\t\t'controllers/fieldError',\n\t\t'controllers/changeField',\n\t\t'controllers/changeEmail',\n\t\t'controllers/fieldCheckbox',\n\t\t'controllers/fieldCheckboxList',\n\t\t'controllers/fieldRadio',\n\t\t'controllers/fieldNumber',\n\t\t'controllers/mirrorField',\n\t\t'controllers/confirmField',\n\t\t'controllers/updateFieldModel',\n\t\t'controllers/submitButton',\n\t\t'controllers/submitDebug',\n\t\t'controllers/getFormErrors',\n\t\t'controllers/validateRequired',\n\t\t'controllers/submitError',\n\t\t'controllers/actionRedirect',\n\t\t'controllers/actionSuccess',\n\t\t'controllers/fieldSelect',\n\t\t'controllers/coreSubmitResponse',\n\t\t'controllers/fieldProduct',\n\t\t'controllers/fieldTotal',\n\t\t'controllers/fieldQuantity',\n\t\t'controllers/calculations',\n\t\t'controllers/fieldDate',\n\t\t'controllers/fieldRecaptcha',\n\t\t'controllers/fieldHTML',\n\t\t'controllers/helpText',\n\t\t'controllers/fieldTextareaRTE',\n\t\t'controllers/fieldStarRating',\n\t\t'controllers/fieldTerms',\n\t\t'controllers/formContentFilters',\n\t\t'controllers/loadViews',\n\t\t'controllers/formErrors',\n\t\t'controllers/submit',\n\t\t'controllers/defaultFilters',\n\t\t'controllers/uniqueFieldError'\n\t],\n\tfunction(\n\t\tFormData,\n\t\tFieldError,\n\t\tChangeField,\n\t\tChangeEmail,\n\t\tFieldCheckbox,\n\t\tFieldCheckboxList,\n\t\tFieldRadio,\n\t\tFieldNumber,\n\t\tMirrorField,\n\t\tConfirmField,\n\t\tUpdateFieldModel,\n\t\tSubmitButton,\n\t\tSubmitDebug,\n\t\tGetFormErrors,\n\t\tValidateRequired,\n\t\tSubmitError,\n\t\tActionRedirect,\n\t\tActionSuccess,\n\t\tFieldSelect,\n\t\tCoreSubmitResponse,\n\t\tFieldProduct,\n\t\tFieldTotal,\n\t\tFieldQuantity,\n\t\tCalculations,\n\t\tFieldDate,\n\t\tFieldRecaptcha,\n\t\tFieldHTML,\n\t\tHelpText,\n\t\tFieldTextareaRTE,\n\t\tFieldStarRating,\n\t\tFieldTerms,\n\t\tFormContentFilters,\n\t\tLoadViews,\n\t\tFormErrors,\n\t\tSubmit,\n\t\tDefaultFilters,\n\t\tUniqueFieldError\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\n\t\t\t\t/**\n\t\t\t\t * App Controllers\n\t\t\t\t */\n\t\t\t\tnew LoadViews();\n\t\t\t\tnew FormErrors();\n\t\t\t\tnew Submit();\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Field type controllers\n\t\t\t\t */\n\t\t\t\tnew FieldCheckbox();\n\t\t\t\tnew FieldCheckboxList();\n\t\t\t\tnew FieldRadio();\n\t\t\t\tnew FieldNumber();\n\t\t\t\tnew FieldSelect();\n\t\t\t\tnew FieldProduct();\n\t\t\t\tnew FieldTotal();\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldRecaptcha();\n\t\t\t\tnew FieldHTML();\n\t\t\t\tnew HelpText();\n\t\t\t\tnew FieldTextareaRTE();\n\t\t\t\tnew FieldStarRating();\n\t\t\t\tnew FieldTerms();\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew UniqueFieldError();\n\t\t\t\t/**\n\t\t\t\t * Misc controllers\n\t\t\t\t */\n\t\t\t\tnew FieldError();\n\t\t\t\tnew ChangeField();\n\t\t\t\tnew ChangeEmail();\n\t\t\t\t\n\t\t\t\tnew MirrorField();\n\t\t\t\tnew ConfirmField();\n\t\t\t\tnew UpdateFieldModel();\n\t\t\t\tnew SubmitButton();\n\t\t\t\tnew SubmitDebug();\n\t\t\t\tnew GetFormErrors();\n\t\t\t\tnew ValidateRequired();\n\t\t\t\tnew SubmitError();\n\t\t\t\tnew ActionRedirect();\n\t\t\t\tnew ActionSuccess();\n\t\t\t\t\n\t\t\t\tnew CoreSubmitResponse();\n\t\t\t\tnew Calculations();\n\n\t\t\t\tnew DefaultFilters();\n\n\t\t\t\t/**\n\t\t\t\t * Data controllers\n\t\t\t\t */\n\t\t\t\tnew FieldDate();\n\t\t\t\tnew FormData();\n\t\t\t\t\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/beforeForm',[], function( ) {\n\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-before-form\",\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/formErrorItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'nf-section',\n\t\ttemplate: '#tmpl-nf-form-error',\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/formErrorCollection',['views/formErrorItem'], function( formErrorItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: \"nf-errors\",\n\t\tchildView: formErrorItem\n\t});\n\n\treturn view;\n} );\n","define( 'views/honeyPot',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-form-hp',\n\n        events: {\n        \t'keyup .nf-field-hp': 'maybeError',\n            'change .nf-field-hp': 'maybeError'\n        },\n\n        maybeError: function( e ) {\n            /*\n             * If we have an empty honeyPot field, remove the honeypot form error.\n             * If we do not have an empty honeyPot field, add the honeypot form error.\n             */\n            if ( 0 == jQuery( e.target ).val().length ) {\n                nfRadio.channel( 'form-' + this.model.get( 'id' ) ).request( 'remove:error', 'honeyPot' );\n            } else {\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  this.model.get( 'id' ) );\n                nfRadio.channel( 'form-' + this.model.get( 'id' ) ).request( 'add:error', 'honeyPot', formModel.get( 'settings' ).honeypotHoneypotError );\n            }\n        }\n    });\n\n    return view;\n} );\n","define( 'views/afterFormContent',['views/formErrorCollection', 'views/honeyPot'], function( FormErrors, HoneyPot ) {\n\n    var view = Marionette.LayoutView.extend({\n        tagName: \"nf-section\",\n        template: \"#tmpl-nf-after-fields\",\n\n\t\tregions: {\n\t\t\terrors: \".nf-form-errors\",\n            hp: \".nf-form-hp\"\n\t\t},\n\n        onShow: function() {\n        \tthis.errors.show( new FormErrors( { collection: this.model.get( 'errors' ) } ) );\n            this.hp.show( new HoneyPot( { model: this.model } ) );\n        }\n\n    });\n\n    return view;\n} );\n","define( 'views/beforeFormContent',[], function( ) {\n\n    var view = Marionette.ItemView.extend({\n        tagName: \"nf-section\",\n        template: \"#tmpl-nf-before-fields\",\n\n        templateHelpers: function () {\n            return {\n\n                renderFieldsMarkedRequired: function() {\n\n                    var requiredFields = this.fields.filter( { required: 1 } );\n                    return ( requiredFields.length ) ? this.fieldsMarkedRequired : '';\n                },\n            };\n        },\n\n    });\n\n    return view;\n} );\n","define( 'views/formLayout',[ 'views/afterFormContent', 'views/beforeFormContent', 'models/fieldCollection' ], function( AfterFormContent, BeforeFormContent, FieldCollection ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-form-layout\",\n\n\t\tregions: {\n\t\t\tbeforeFormContent: \".nf-before-form-content\",\n\t\t\tformContent: \".nf-form-content\",\n\t\t\tafterFormContent: \".nf-after-form-content\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'form-' + this.model.get( 'id' ) ).reply( 'get:el', this.getEl, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * If we need to hide a form, set the visibility of this form to hidden.\n\t\t\t */\n\t\t\t this.listenTo( this.model, 'hide', this.hide );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.beforeFormContent.show( new BeforeFormContent( { model: this.model } ) );\n\t\t\t\n\t\t\t/*\n\t\t\t * Set our formContentData to our form setting 'formContentData'\n\t\t\t */\n\t\t\tvar formContentData = this.model.get( 'formContentData' );\n\t\t\t\n\t\t\t/*\n\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t */\n\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\tformContentView = callback();\n\t\t\t\n\t\t\tvar options = {\n\t\t\t\tdata: formContentData,\n\t\t\t\tformModel: this.model\n\t\t\t};\n\t\t\t\n\t\t\t/*\n\t\t\t * If we have a collection, pass the returned data as the collection.\n\t\t\t *\n\t\t\t * If we have a model, pass the returned data as the collection.\n\t\t\t */\n\t\t\tif ( false !== formContentData instanceof Backbone.Collection ) {\n\t\t\t\toptions.collection = formContentData;\n\t\t\t} else if ( false !== formContentData instanceof Backbone.Model ) {\n\t\t\t\toptions.model = formContentData;\n\t\t\t}\n\n\t\t\tthis.formContent.show( new formContentView( options ) );\n\t\t\tthis.afterFormContent.show( new AfterFormContent( { model: this.model } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n        templateHelpers: function () {\n            return {\n\n                renderClasses: function() {\n                    return '';\n                }\n\n            };\n        },\n\n        hide: function() {\n        \tjQuery( this.el ).hide();\n        }\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/afterForm',[], function( ) {\n\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-after-form\",\n\t\t\n\t});\n\n\treturn view;\n} );\n","define( 'views/mainLayout',['views/beforeForm', 'views/formLayout', 'views/afterForm'], function( BeforeForm, FormLayout, AfterForm ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttemplate: '#tmpl-nf-layout',\n\n\t\tregions: {\n\t\t\tresponseMsg: '.nf-response-msg',\n\t\t\tbeforeForm: '.nf-before-form',\n\t\t\tformLayout: '.nf-form-layout',\n\t\t\tafterForm: '.nf-after-form'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.$el = jQuery( '#nf-form-' + this.model.id + '-cont' );\n\t\t\tthis.el = '#nf-form-' + this.model.id + '-cont';\n\n\t\t\tthis.render();\n\n\t\t\tthis.beforeForm.show( new BeforeForm( { model: this.model } ) );\n\t\t\tthis.formLayout.show( new FormLayout( { model: this.model, fieldCollection: this.options.fieldCollection } ) );\n\t\t\tthis.afterForm.show( new AfterForm( { model: this.model } ) );\n\n\t\t\t/*\n\t\t\t * If we need to hide a form, set the visibility of this form to hidden.\n\t\t\t */\n\t\t\t this.listenTo( this.model, 'hide', this.hide );\n\t\t},\n\n        hide: function() {\n        \tjQuery( this.el ).find( '.nf-form-title' ).hide();\n        }\n\n\t});\n\n\treturn view;\n} );\n","/*\n * Because our backbone listens to .change() events on elements, changes made using jQuery .val() don't bubble properly.\n * This patch overwrites the default behaviour of jQuery .val() so that IF the item has an nf-element class, we fire a change event.\n */\n( function( jQuery ) {\n\t/*\n\t * Store our original .val() function.\n\t */\n    var originalVal = jQuery.fn.val;\n    /*\n     * Create our own .val() function.\n     */\n    jQuery.fn.val = function(){\n        var prev;\n        /* \n         * Store a copy of the results of the original .val() call.\n         * We use this to make sure that we've actually changed something.\n         */\n        if( arguments.length > 0 ){\n            prev = originalVal.apply( this,[] );\n        }\n        /*\n         * Get the results of the original .val() call. \n         */\n        var result = originalVal.apply( this, arguments );\n\n        /*\n         * If we have arguments, we have actually made a change, AND this has the nf-element class, trigger .change().\n         */\n        if( arguments.length > 0 && prev != originalVal.apply( this, [] ) && jQuery( this ).hasClass( 'nf-element' ) ) {\n\t\t\tjQuery(this).change();\n        }\n\n        return result;\n    };\n} ) ( jQuery );\n\njQuery( document ).ready( function( $ ) {\n\trequire( [ 'models/formCollection', 'models/formModel', 'models/fieldCollection', 'controllers/loadControllers', 'views/mainLayout'], function( formCollection, FormModel, FieldCollection, LoadControllers, mainLayout ) {\n\n\t\tif( 'undefined' == typeof nfForms ) {\n\t\t\t/*\n\t\t\t * nfForms is not defined. This means that something went wrong loading the form data.\n\t\t\t * Bail form setup and empty the form containers to remove any loading animations.\n\t\t\t */\n\t\t\tjQuery( '.nf-form-cont' ).empty();\n\t\t\treturn;\n\t\t}\n\n\t\tvar NinjaForms = Marionette.Application.extend({\n\t\t\tforms: {},\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Underscore one-liner for getting URL Parameters\n\t\t\t\tthis.urlParameters = _.object(_.compact(_.map(location.search.slice(1).split('&'), function(item) {  if (item) return item.split('='); })));\n\n\t\t\t\tif( 'undefined' != typeof this.urlParameters.nf_resume ) {\n\t\t\t\t\tthis.listenTo(nfRadio.channel('form-' + this.urlParameters.nf_resume), 'loaded', this.restart);\n\t\t\t\t}\n\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers' );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\t\t\t\n\t\t\tonStart: function() {\n\t\t\t\tvar formCollection = nfRadio.channel( 'app' ).request( 'get:forms' );\n\t\t\t\t_.each( formCollection.models, function( form, index ) {\n\t\t\t\t\tvar layoutView = new mainLayout( { model: form, fieldCollection: form.get( 'fields' ) } );\t\t\t\n\t\t\t\t\tnfRadio.channel( 'form' ).trigger( 'render:view', layoutView );\n\t\t\t\t\tjQuery( document ).trigger( 'nfFormReady', layoutView );\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\trestart: function( formModel ) {\n\t\t\t\tif( 'undefined' != typeof this.urlParameters.nf_resume ){\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\t'action': 'nf_ajax_submit',\n\t\t\t\t\t\t'security': nfFrontEnd.ajaxNonce,\n\t\t\t\t\t\t'nf_resume': this.urlParameters\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'disable:submit' );\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'processingLabel' );\n\n\t\t\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'render:view', function() {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Hide form fields (but not the submit button).\n\t\t\t\t\t\t */\n\t\t\t\t\t\tjQuery( '#nf-form-' + formModel.get( 'id' ) + '-cont .nf-field-container:not(.submit-container)' ).hide();\n\t\t\t\t\t});\n\n\t\t\t\t\t// TODO: Refactor Duplication\n\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\turl: nfFrontEnd.adminAjax,\n\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\tsuccess: function( data, textStatus, jqXHR ) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t   \t\tvar response = data;\n\t\t\t\t\t\t        nfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t\t\t    \tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t    },\n\t\t\t\t\t    error: function( jqXHR, textStatus, errorThrown ) {\n\t\t\t\t\t        // Handle errors here\n\t\t\t\t\t        console.log('ERRORS: ' + textStatus);\n\t\t\t\t\t        // STOP LOADING SPINNER\n\t\t\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', 'error', textStatus, jqXHR, errorThrown );\n\t\t\t\t\t    }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t});\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\t\t\n\t} );\n} );\n\ndefine(\"main\", function(){});\n\n"]}